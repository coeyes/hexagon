/* * rhombus - Application framework for web/desktop-based Flash & Flex projects. *  *  /\ RHOMBUS *  \/ FRAMEWORK *  * Licensed under the MIT License * Copyright (c) 2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package view.screen{	import view.display.TestDisplay;	import com.hexagonstar.framework.view.screen.AbstractScreen;	import com.hexagonstar.framework.view.screen.IScreen;		/**	 * Simple test class to demonstrate how to set up screen classes.	 * 	 * @author Sascha Balkau	 */	public class TestScreen extends AbstractScreen implements IScreen	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected var _testDisplay:TestDisplay;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new instance.		 */		public function TestScreen()		{			super();		}						/**		 * @inheritDoc		 */		override public function load():void		{			/* TestScreen has nothing to load so we just call super.load()			 * or we could as well leave the load method non-overriden. */			super.load();		}						/**		 * @inheritDoc		 */		override public function start():void		{			_testDisplay.start();		}						/**		 * @inheritDoc		 */		override public function stop():void		{			_testDisplay.stop();		}						/**		 * @inheritDoc		 */		override public function reset():void		{			_testDisplay.reset();		}						/**		 * @inheritDoc		 */		override public function update():void		{			_testDisplay.update();						updateDisplayText();			layoutChildren();		}						/**		 * @inheritDoc		 */		override public function dispose():void		{			_testDisplay.dispose();						removeEventListeners();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @inheritDoc		 */		override public function set enabled(v:Boolean):void		{			super.enabled = v;			_testDisplay.enabled = v;		}						/**		 * @inheritDoc		 */		override public function set paused(v:Boolean):void		{			super.paused = v;			_testDisplay.paused = v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @inheritDoc		 */		override protected function createChildren():void		{			_testDisplay = new TestDisplay();			addChild(_testDisplay);		}						/**		 * @inheritDoc		 */		override protected function addEventListeners():void		{		}						/**		 * @inheritDoc		 */		override protected function removeEventListeners():void		{		}						/**		 * @inheritDoc		 */		override protected function layoutChildren():void		{			_testDisplay.x = horizontalCenter(_testDisplay);			_testDisplay.y = verticalCenter(_testDisplay);		}						/**		 * @inheritDoc		 */		override protected function unload():void		{		}	}}