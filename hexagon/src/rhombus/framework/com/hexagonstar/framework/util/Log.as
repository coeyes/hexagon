/* * rhombus - Application framework for web/desktop-based Flash & Flex projects. *  *  /\ RHOMBUS *  \/ FRAMEWORK *  * Licensed under the MIT License * Copyright (c) 2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.framework.util{	import com.hexagonstar.debug.LogLevel;	import com.hexagonstar.framework.view.console.Console;	import com.hexagonstar.util.debug.Debug;	import flash.display.Stage;		/**	 * A simple wrapper class for project-external (and internal) Debug classes.	 * 	 * @author Sascha Balkau	 * @version 1.0.0	 */	public class Log	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		private static var _console:Console;		/** @private */		private static var _enabled:Boolean = true;		/** @private */		private static var _filterLevel:int = 0;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Needs to be called before the Logger can be used.		 */		public static function init():void		{			if (!_console)			{				if (Main.config.consoleEnabled)				{					_console = Console.instance;				}			}						if (_console)			{				_console.clear();				_console.clearInput();				Log.monitor(Main.app.stage);				Log.info(Main.appInfo.name + " v" + Main.appInfo.version					+ " " + Main.appInfo.releaseStage					+ " (build #" + Main.appInfo.build					+ ", " + Main.appInfo.releaseType					+ "" + (Main.appInfo.isDebug ? " debug" : "") + ")");				Log.info("Type 'help' for a list of all available console commands.");			}		}						/**		 * Receives any logging data from the logger in the hexagonLib.		 */		public static function logByLevel(level:int, data:*):void		{			switch (level)			{				case LogLevel.TRACE:					trace(data);					break;				case LogLevel.DEBUG:					debug(data);					break;				case LogLevel.INFO:					info(data);					break;				case LogLevel.WARN:					warn(data);					break;				case LogLevel.ERROR:					error(data);					break;				case LogLevel.FATAL:					fatal(data);			}		}						/**		 * monitor		 */		public static function monitor(stage:Stage):void		{			Debug.monitor(stage);		}						/**		 * trace		 */		public static function trace(data:*):void		{			if (_filterLevel > LogLevel.TRACE) return;			send(data, LogLevel.TRACE);		}						/**		 * debug		 */		public static function debug(data:*):void		{			if (_filterLevel > LogLevel.DEBUG) return;			send(data, LogLevel.DEBUG);		}						/**		 * info		 */		public static function info(data:*):void		{			if (_filterLevel > LogLevel.INFO) return;			send(data, LogLevel.INFO);		}						/**		 * warn		 */		public static function warn(data:*):void		{			if (_filterLevel > LogLevel.WARN) return;			send("WARNING: " + data, LogLevel.WARN);		}						/**		 * error		 */		public static function error(data:*):void		{			if (_filterLevel > LogLevel.ERROR) return;			send("ERROR: " + data, LogLevel.ERROR);		}						/**		 * fatal		 */		public static function fatal(data:*):void		{			if (_filterLevel > LogLevel.FATAL) return;			send("FATAL ERROR: " + data, LogLevel.FATAL);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public static function get enabled():Boolean		{			return _enabled;		}		public static function set enabled(v:Boolean):void		{			if (_console)			{				_console.log("Console logging " + (v ? "enabled" : "disabled")					+ " with filter level " + _filterLevel + ".");				_console..log("");			}			_enabled = Debug.enabled = v;		}						public static function get filterLevel():int		{			return _filterLevel;		}		public static function set filterLevel(v:int):void		{			_filterLevel = v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * send		 * @private		 */		private static function send(data:*, level:int):void		{			if (_enabled)			{				if (_console) _console.log(data, level);				Debug.trace(data, level);			}		}	}}