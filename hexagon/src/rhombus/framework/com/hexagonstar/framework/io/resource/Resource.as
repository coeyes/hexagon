/* * rhombus - Application framework for web/desktop-based Flash & Flex projects. *  *  /\ RHOMBUS *  \/ FRAMEWORK *  * Licensed under the MIT License * Copyright (c) 2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.framework.io.resource{	import com.hexagonstar.event.FileIOEvent;	import com.hexagonstar.framework.util.Log;	import com.hexagonstar.io.file.loaders.FileTypeLoaderFactory;	import com.hexagonstar.io.file.loaders.IFileTypeLoader;	import com.hexagonstar.io.file.loaders.ZIPFileLoader;	import com.hexagonstar.io.file.types.IFile;	import flash.events.EventDispatcher;		/**	 * Resource Class	 * @author Sascha Balkau	 */	public class Resource extends EventDispatcher	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _path:String;		/** @private */		protected var _loader:IFileTypeLoader;		/** @private */		protected var _file:IFile;		/** @private */		protected var _referenceCount:int = 0;		/** @private */		protected var _loaded:Boolean = false;		/** @private */		protected var _failed:Boolean = false;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new Resource instance.		 */		public function Resource()		{		}						/**         * Loads resource data from a file.         *          * @param path The file path to the resource.		 */		public function load(path:String):void		{			_path = path;			_loader = FileTypeLoaderFactory.create(_file);						addLoaderEventListeners();						/* Catch security exception here in case the application tries			 * to locally load a resource from a non-trusted location */			try			{				_loader.load(_path);			}			catch (e:Error)			{				onSecurityError(new FileIOEvent(FileIOEvent.SECURITY_ERROR,				_file, e.message				+ " (Probably tried to load a local resource from a non-trusted location)."));			}		}						/**		 * Increments the number of references to the resource. This should only ever be		 * called by the ResourceManager.		 */		public function incrementReferenceCount():void		{			_referenceCount++;		}						/**		 * Decrements the number of references to the resource. This should only ever be		 * called by the ResourceManager.		 */		public function decrementReferenceCount():void		{			_referenceCount--;		}						/**		 * Disposes Resource.		 */		public function dispose():void		{			disposeFileLoader();		}						/**		 * Returns a String Representation of Resource.		 * 		 * @return A String Representation of Resource.		 */		override public function toString():String		{			return "[Resource]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * The file path of the resource.		 */		public function get path():String		{			return _path;		}		public function set path(v:String):void		{			if (_path != null)			{				Log.warn(toString()					+ " Can't change the filename of a resource once it has been set.");				return;			}			_path = v;		}						/**		 * Whether or not the resource has been loaded. This only marks whether loading has		 * been completed, not whether it succeeded. If this is true, <code>failed</code>		 * can be checked to see if loading was successful.		 * 		 * @see #failed		 */		public function get loaded():Boolean		{			return _loaded;		}						/**		 * Whether or not the resource failed to load. This is only valid after the resource		 * has loaded, so being false only verifies a successful load if <code>loaded</code>		 * is true.		 * 		 * @see #loaded		 */		public function get failed():Boolean		{			return _failed;		}						/**		 * The number of places this resource is currently referenced from. When this		 * reaches zero, the resource will be unloaded.		 */		public function get referenceCount():int		{			return _referenceCount;		}						/**		 * The IFileTypeLoader object that was used to load this resource. This is set to		 * null after onContentReady returns true.		 */		protected function get resourceLoader():IFileTypeLoader		{			return _loader;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onOpen(e:FileIOEvent):void		{		}						/**		 * @private		 */		protected function onProgress(e:FileIOEvent):void		{		}						/**		 * @private		 */		protected function onFileComplete(e:FileIOEvent):void		{		}						/**		 * @private		 */		protected function onAbort(e:FileIOEvent):void		{		}						/**		 * @private		 */		protected function onHTTPStatus(e:FileIOEvent):void		{		}						/**		 * @private		 */		protected function onIOError(e:FileIOEvent):void		{		}						/**		 * @private		 */		protected function onSecurityError(e:FileIOEvent):void		{		}						/**		 * @private		 */		protected function onZippedFileLoaded(e:FileIOEvent):void		{		}				/**		 * @private		 */		protected function onZipParseError(e:FileIOEvent):void		{		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function addLoaderEventListeners():void		{			_loader.addEventListener(FileIOEvent.OPEN, onOpen);			_loader.addEventListener(FileIOEvent.PROGRESS, onProgress);			_loader.addEventListener(FileIOEvent.FILE_COMPLETE, onFileComplete);			_loader.addEventListener(FileIOEvent.ABORT, onAbort);			_loader.addEventListener(FileIOEvent.HTTP_STATUS, onHTTPStatus);			_loader.addEventListener(FileIOEvent.IO_ERROR, onIOError);			_loader.addEventListener(FileIOEvent.SECURITY_ERROR, onSecurityError);						if (_loader is ZIPFileLoader)			{				_loader.addEventListener(FileIOEvent.ZIPPED_FILE_LOADED, onZippedFileLoaded);				_loader.addEventListener(FileIOEvent.ZIP_PARSE_ERROR, onZipParseError);			}		}						/**		 * @private		 */		protected function disposeFileLoader():void		{			_loader.removeEventListener(FileIOEvent.OPEN, onOpen);			_loader.removeEventListener(FileIOEvent.PROGRESS, onProgress);			_loader.removeEventListener(FileIOEvent.FILE_COMPLETE, onFileComplete);			_loader.removeEventListener(FileIOEvent.ABORT, onAbort);			_loader.removeEventListener(FileIOEvent.HTTP_STATUS, onHTTPStatus);			_loader.removeEventListener(FileIOEvent.IO_ERROR, onIOError);			_loader.removeEventListener(FileIOEvent.SECURITY_ERROR, onSecurityError);						if (_loader is ZIPFileLoader)			{				_loader.removeEventListener(FileIOEvent.ZIPPED_FILE_LOADED, onZippedFileLoaded);				_loader.removeEventListener(FileIOEvent.ZIP_PARSE_ERROR, onZipParseError);			}						_loader.dispose();		}	}}