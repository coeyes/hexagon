/* * rhombus - Application framework for web/desktop-based Flash & Flex projects. *  *  /\ RHOMBUS *  \/ FRAMEWORK *  * Licensed under the MIT License * Copyright (c) 2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.framework.view.display{	import flash.display.Sprite;	import flash.utils.getQualifiedClassName;		/**	 * Abstract base class for all display classes.	 * 	 * @author Sascha Balkau	 * @version 0.8.5	 */	public class AbstractDisplay extends Sprite implements IDisplay	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected var _enabled:Boolean = true;				/**		 * @private		 */		protected var _paused:Boolean = false;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AbstractDisplay instance.		 */		public function AbstractDisplay()		{			super();		}						/**		 * @inheritDoc		 */		public function start():void		{			/* Abstract method! */		}						/**		 * @inheritDoc		 */		public function stop():void		{			/* Abstract method! */		}						/**		 * @inheritDoc		 */		public function reset():void		{			/* Abstract method! */		}						/**		 * @inheritDoc		 */		public function update():void		{			updateDisplayText();			layoutChildren();		}						/**		 * @inheritDoc		 */		public function dispose():void		{			removeEventListeners();		}						/**		 * @inheritDoc		 */		override public function toString():String		{			return "[" + getQualifiedClassName(this).match("[^:]*$")[0] + "]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @inheritDoc		 */		public function get enabled():Boolean		{			return _enabled;		}		public function set enabled(v:Boolean):void		{			if (v == _enabled) return;			_enabled = v;			if (_enabled) enableChildren();			else disableChildren();		}						/**		 * @inheritDoc		 */		public function get paused():Boolean		{			return _paused;		}		public function set paused(v:Boolean):void		{			if (v == _paused) return;			_paused = v;			if (_paused) pauseChildren();			else unpauseChildren();		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Sets up the display. This method should only be called once after object		 * instantiation. It initiates the display by creating child objects and adding		 * event listeners.		 * 		 * @private		 */		protected function setup():void		{			createChildren();			addEventListeners();		}						/**		 * Used to create any display children (and other objects) that the display		 * contains.		 * 		 * @private		 */		protected function createChildren():void		{			/* Abstract method! */		}						/**		 * enableChildren		 * @private		 */		protected function enableChildren():void		{			/* Abstract method! */		}						/**		 * disableChildren		 * @private		 */		protected function disableChildren():void		{			/* Abstract method! */		}						/**		 * pauseChildren		 * @private		 */		protected function pauseChildren():void		{			/* Abstract method! */		}						/**		 * unpauseChildren		 * @private		 */		protected function unpauseChildren():void		{			/* Abstract method! */		}						/**		 * Should be used to add any required event listeners to the display and/or it's		 * children.		 * 		 * @private		 */		protected function addEventListeners():void		{			/* Abstract method! */		}						/**		 * Used to remove any event listeners that has been added with addEventListeners().		 * This method is automatically called by the dispose() method.		 * 		 * @private		 */		protected function removeEventListeners():void		{			/* Abstract method! */		}						/**		 * Used to update any display text of the display if it contains any children that		 * are used to display text. Typically any text displays should be updated here with		 * text strings from the application's locale object.		 * 		 * @private		 */		protected function updateDisplayText():void		{			/* Abstract method! */		}						/**		 * Used to lay out the display children of the display. This method is called		 * initially to set the position and size of any child objects and is called		 * whenever the children need to update their position or size because the layout		 * has changed, for instance after the application window has been resized.		 * 		 * @private		 */		protected function layoutChildren():void		{			/* Abstract method! */		}	}}