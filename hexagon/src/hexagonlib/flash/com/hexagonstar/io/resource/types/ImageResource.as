/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.resource.types{	import com.hexagonstar.io.file.types.ImageFile;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	[EditorData(extensions="jpg,png,gif")]        	/**	 * This is a Resource subclass for image data. It allows you to load an image file	 * format supported by Flash (JPG, PNG, or GIF) and access it as a BitmapData or	 * Bitmap.	 * 	 * @author Sascha Balkau	 */	public class ImageResource extends Resource	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _bitmapData:BitmapData;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Constructs a new ImageResource instance.		 */		public function ImageResource()		{			_file = new ImageFile();		}						/**		 * @inheritDoc		 */		override public function initialize(data:*):void		{        				if (data is Bitmap)			{				/* Directly load embedded resources if they gave us a Bitmap. */				onContentReady(data.bitmapData);				onLoadComplete();				return;			}			else if (data is BitmapData)			{				/* If they gave us a BitmapData object create a new Bitmap from that */				onContentReady(data as BitmapData);				onLoadComplete();  				return;          				}			else if (data is DisplayObject)			{				// TODO Add support for DisplayObjects!				//var dObj:DisplayObject = data as DisplayObject;				//				///* get sprite's targetSpace */				//var targetSpace:DisplayObject;				//if (dObj.parent) targetSpace = dObj.parent;				//else targetSpace = PBE.mainStage;				//				///* get sprite's rectangle */				//var r:Rectangle = dObj.getBounds(targetSpace);				//				///* create transform matrix for drawing this sprite */				//var m:Matrix = new Matrix();				//m.translate(r.x * -1, r.y * -1);				//				///* If they gave us a Sprite draw this onto a transparent filled BitmapData object */				//var bmd:BitmapData = new BitmapData(r.width, r.height, true, 0x000000);				//bmd.draw(dObj, m);				//				///* Use the BitmapData to create a new Bitmap for this ImageResource */				//onContentReady(bmd);				//onLoadComplete();				//return;			}						/* Otherwise it must be a ByteArray, pass it over to the normal path. */			super.initialize(data);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Once the resource has succesfully loaded, this contains a Bitmap representing the		 * loaded image. Because Bitmaps cannot be shared, this makes a new Bitmap every		 * time it is called.		 */		public function get bitmap():Bitmap		{			/* if we have BitmapData but no Bitmap yet .. create one.. */			if (_bitmapData != null)			{				return new Bitmap(_bitmapData);			}			return null;		}						/**		 * Get the raw BitmapData that was loaded.		 */		public function  get bitmapData():BitmapData		{			return _bitmapData;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @inheritDoc		 */		override protected function onContentReady(content:*):Boolean		{			if (content is BitmapData)			{				_bitmapData = content as BitmapData;			}			else if (content is Bitmap)			{				/* a .png is initialized as a ByteArray and will be provided through				 * the super(). Resource class as a Bitmap */				_bitmapData = (content as Bitmap).bitmapData;				content = null;			}			return _bitmapData != null;		}	}}