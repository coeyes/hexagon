/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.bulk{	import com.hexagonstar.io.bulk.types.BulkLoadFile;	import flash.events.Event;	import flash.events.EventDispatcher;		/**	 * BulkFileLoader Class	 * @author Sascha Balkau	 */	public class BulkFileLoader extends EventDispatcher	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * An array of RequestHeader objects to be used when contructing the		 * <code>URLRequest</code> object. If the <code>url</code> parameter is passed as a		 * <code>URLRequest</code> object it will be ignored. Checked when adding a new item		 * to load.		 */		public static const HEADERS:String = "headers";				/**		 * A <code>String</code> to be used to identify a file to load, can be used in any		 * method that fetches content (as the key parameters), stops, removes and resume		 * items. Checked when adding a new file to load.		 */		public static const ID:String = "id";						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Maximum number of simultaneous open requests.		 */		public static const DEFAULT_MAX_CONNECTIONS:int = 12;				public static const ERROR:String = "error";				/** @private */		protected static var _instanceCount:int = 0;		/** @private */		protected static var _instances:Object = {};				/** @private */		protected var _maxConnections:int = DEFAULT_MAX_CONNECTIONS;		/** @private */		protected var _name:String;		/** @private */		protected var _id:int;		/** @private */		protected var _additionIndex:int;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new BulkFileLoader instance identifiable by the <code>name</code>		 * parameter. The <code>name</code> parameter must be unique, else an Error will be		 * thrown.		 * 		 * @param name A name that can be used later to reference this loader in a static		 *            context. If null, bulkloader will generate a unique name.		 * @param maxConnections The number of maximum simultaneous connections to be open.		 * @see #maxConnections		 */		public function BulkFileLoader(name:String = null,			maxConnections:int = BulkFileLoader.DEFAULT_MAX_CONNECTIONS)		{			if (!name || name && name.length < 1)			{				name = createUniqueName();			}						if (Boolean(_instances[name]))			{				throw new Error(toString() + " A BulkFileLoader with name <" + name					+ "> already exists.");			}						_instances[name] = this;						if (maxConnections > 0)			{				_maxConnections = maxConnections;			}						_name = name;			_instanceCount++;			_id = _instanceCount;			_additionIndex = 0;						/* we create a mock event listener for errors, else Unhandled errors			 * will bubble and display an stack trace to the end user */			addEventListener(BulkFileLoader.ERROR, onSwallowError, false, 1, true);		}						/**		 * Creates a unique name to identify the bulkfileloader.		 * 		 * @return A unique name to identify the bulkfileloader.		 */		public static function createUniqueName():String		{			return "BulkFileLoader" + _instanceCount;		}						/**		 * Creates a BulkFileLoader instance with an unique name. This is useful for		 * situations where you might be creating many BulkFileLoader instances and it gets		 * tricky to garantee that no other instance is using that name.		 * 		 * @param maxConnections The number of maximum simultaneous connections to be open.		 * @return A BulkFileLoader intance, with an unique name.		 */		public static function createUniqueLoader(maxConnections:int			= BulkFileLoader.DEFAULT_MAX_CONNECTIONS):BulkFileLoader		{			return new BulkFileLoader(BulkFileLoader.createUniqueName(),				maxConnections);		}						/**		 * Fetches a <code>BulkFileLoader</code> object that was created with the		 * <code>name</code> parameter. This is useful if you must access loaded assets from		 * another scope, without having to pass direct references to this loader.		 * 		 * @param name The name of the loader to be fetched.		 * @return The BulkFileLoader instance that was registred with that name. Returns		 *         null if none is found.		 */		public static function getLoader(name:String):BulkFileLoader		{			return BulkFileLoader._instances[name] as BulkFileLoader;		}						/**		 * Checks if there is a <b>loaded</b> file in this <code>BulkFileLoader</code>.		 * 		 * @param key The path (as a <code>String</code> or a <code>URLRequest</code>		 *            object) or an ID (as a <code>String</code>) by which the item is		 *            identifiable.		 * @param searchAll If true will search through all <code>BulkFileLoader</code>		 *            instances. Else will only search this one.		 * @return True if a loader has the <b>loaded</b> file stored.		 */		public function hasFile(key:*, searchAll:Boolean = true):Boolean		{			var instances:Object;						if (searchAll)			{				instances = _instances;			}			else			{				instances = [this];			}						for each (var l:BulkFileLoader in instances)			{				if (hasFileInLoader(key, l))				{					return true;				}			}						return false;		}						/**		 * Checks which <code>BulkFileLoader</code> has a file by the given key.		 * 		 * @param key The url (as a <code>String</code> or a <code>URLRequest</code> object)		 *            or an id (as a <code>String</code>) by which the file is identifiable.		 * @return The <code>BulkFileLoader</code> instance that has the given key or		 *         <code>null</code> if no key if found in any loader.		 */		public static function getLoaderWithFile(key:*):BulkFileLoader		{			for each (var l:BulkFileLoader in _instances)			{				if (BulkFileLoader.hasFileInLoader(key, l)) return l;			}			return null;		}						public function add(path:String, props:Object = null):BulkLoadFile		{			return null;		}						/**		 * Start loading all files added previously.		 * 		 * @param maxConnections [optional] The maximum number of connections to make at the		 *            same time. If specified, will override the parameter passed (if any)		 *            to the constructor.		 * @see #maxConnections		 */		public function start(maxConnections:int = -1):void		{		}						/**		 * Forces the file specified by key to be reloaded right away. This will stop any		 * open connection as needed.		 * 		 * @param key The url request, url as a string or a id from which the asset was		 *            created.		 * @return <code>true</code> if an item with that key is found, <code>false</code>		 *         otherwise.		 */		public function reload(key:*):Boolean		{			return true;		}						/**		 * Forces the file specified by key to be loaded right away. This will stop any open		 * connection as needed. If needed, the connection to be closed will be the one with		 * the lower priority. In case of a tie, the one that has more bytes to complete		 * will be removed. The file to load now will be automatically be set the highest		 * priority value in this BulkFileLoader instance.		 * 		 * @param key The url request, url as a string or a id from which the asset was		 *            created.		 * @return <code>true</code> if an item with that key is found, <code>false</code>		 *         otherwise.		 */		public function loadNow(key:*):Boolean		{			return true;		}						/**		 * Returns a String Representation of BulkFileLoader.		 * 		 * @return A String Representation of BulkFileLoader.		 */		override public function toString():String		{			return "[BulkFileLoader]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * This is here only to assure that non handled errors won't bubble up.		 * @private		 */		protected function onSwallowError(e:Event):void		{		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected static function hasFileInLoader(key:*, loader:BulkFileLoader):Boolean		{			//var item:BulkLoadFile = loader.get(key);			//if (item && item.loaded) return true;			return false;		}						/**		 * Figures out which file to remove from open connections, comparation is done by		 * priority and then by bytes remaining.		 * @private		 */		public function _getLeastUrgentOpenedItem():BulkLoadFile		{			return null;		}	}}