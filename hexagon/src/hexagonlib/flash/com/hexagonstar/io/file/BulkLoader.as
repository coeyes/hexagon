/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file{	import com.hexagonstar.debug.HLog;	import com.hexagonstar.event.FileIOEvent;	import com.hexagonstar.io.file.types.IFile;	import flash.events.EventDispatcher;	import flash.utils.Dictionary;		/**	 * BulkLoader Class	 * @author Sascha Balkau	 */	public class BulkLoader extends EventDispatcher implements IFileLoader	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Stores all files that are being loaded.		 * @private		 */		protected var _files:Dictionary;				/**		 * The maximum number of concurrent load connections.		 * @private		 */		protected var _maxConnections:int;				/**		 * The load connections that are currently open.		 * @private		 */		protected var _openConnections:Object;				/**		 * @private		 */		protected var _loading:Boolean;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new BulkLoader instance.		 */		public function BulkLoader(maxConnections:int = 2)		{			_maxConnections = maxConnections;			reset();		}						/**		 * reset		 */		public function reset():void		{			_files = new Dictionary(true);			_openConnections = {};			_loading = false;		}						/**		 * Adds a new file to the loader.		 * 		 * @param file a File that is to be loaded.		 * @see com.hexagonstar.io.file.types.IFile		 */		public function addFile(file:IFile):void		{			var identifier:String = getFileIdentifier(file);						if (_files[identifier] != null)			{				HLog.warn(toString() + " A file with the identifier <" + identifier					+ "> has already been added.");			}			else			{				var bf:BulkFile = new BulkFile(file);				bf.addEventListener(FileIOEvent.FILE_COMPLETE, onBulkFileComplete);				_files[identifier] = bf;			}		}						/**		 * Starts to load all files that were added to the loader.		 */		public function load():void		{			if (_loading) return;			if (fileCount < 1) return;			_loading = true;						loadNext();		}						/**		 * Disposes BulkLoader.		 */		public function dispose():void		{		}						/**		 * Returns a String Representation of BulkLoader.		 * 		 * @return A String Representation of BulkLoader.		 */		override public function toString():String		{			return "[BulkLoader]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @inheritDoc		 */		public function get loading():Boolean		{			return _loading;		}						public function get fileCount():int		{			var v:int = 0;			for each (var bf:BulkFile in _files)			{				v++;				continue;				bf = bf; /* To prevent unused var editor warnings! */			}			return v;		}						/**		 * Returns how many connections are currently in use.		 * @private		 */		protected function get currentOpenConnections():int		{			var v:int = 0;			for (var c:String in _openConnections)			{				v++;				continue;				c = c; /* To prevent unused var editor warnings! */			}			return v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onBulkFileComplete(e:FileIOEvent):void		{			var bf:BulkFile = e.bulkFile;			removeConnectionFor(bf);			HLog.debug(toString() + " completed: " + bf.toString());			HLog.debug(toString() + " open connections: " + currentOpenConnections);						// TODO check if more files need to be loaded!		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * getFileIdentifier		 * @private		 */		protected function getFileIdentifier(file:IFile):String		{			return file.path;		}						/**		 * Loads the next available bulkfile.		 * 		 * @private		 * @return true if there is a next bulkfile to load, otherwise false.		 */		protected function loadNext():Boolean		{			var hasNext:Boolean = false;			var next:BulkFile = getNextBulkFile();						if (next)			{				HLog.debug(toString() + " loading " + next.toString() + " ...");				hasNext = true;				_openConnections[getFileIdentifier(next.file)] = true;				next.load();								/* If we got any more connections available, go on and load the next item. */				if (getNextBulkFile())				{					loadNext();				}			}						return hasNext;		}						/**		 * Returns the bulkfile that is ready to load next.		 * @private		 */		protected function getNextBulkFile():BulkFile		{			for each (var bf:BulkFile in _files)			{				if (!bf.loading && bf.status != BulkFile.STATUS_STOPPED					&& isConnectionAvailable())				{					return bf;				}			}			return null;		}						/**		 * Checks if a connection is available.		 * @private		 */		protected function isConnectionAvailable():Boolean		{			return currentOpenConnections < _maxConnections;		}						/**		 * removeConnectionFor		 * @private		 */		protected function removeConnectionFor(bf:BulkFile):void		{			var id:String = getFileIdentifier(bf.file);			for (var i:String in _openConnections)			{				if (i == id)				{					_openConnections[i] = false;					delete _openConnections[i];					return;				}			}		}	}}