/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file.types{	import com.hexagonstar.core.BasicClass;	import com.hexagonstar.data.types.Byte;		/**	 * Contains common methods used by concrete File implementations.	 * 	 * @author Sascha Balkau	 * @version 1.0.0	 */	public class AbstractFile extends BasicClass	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _id:String;		/** @private */		protected var _path:String;		/** @private */		protected var _size:Byte;		/** @private */		protected var _isValid:Boolean;		/** @private */		protected var _errorStatus:String;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AbstractFile instance. This class only exists		 * so that File implementations can extend it.		 * 		 * @param path The path where the file is located.		 * @param id An optional ID string for the file.		 */		public function AbstractFile(path:String = "", id:String = null)		{			_path = path;			_id = id;			_size = new Byte(0);			_isValid = false;			_errorStatus = "";		}						/**		 * Returns a String Representation of the File.		 * 		 * @return A String Representation of the File.		 */		override public function toString(...args):String		{			return super.toString("path=" + _path, "id=" + _id, "size=" + _size);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get id():String		{			return _id;		}		public function set id(v:String):void		{			_id = v;		}						public function get path():String		{			return _path;		}		public function set path(v:String):void		{			_path = v;		}						public function get size():Byte		{			return _size;		}		public function set size(v:Byte):void		{			_size = v;		}						public function get isValid():Boolean		{			return _isValid;		}						public function get errorStatus():String		{			return _errorStatus;		}						/**		 * Abstract method! Needs overriding.		 */		public function get content():*		{			return null;		}	}}