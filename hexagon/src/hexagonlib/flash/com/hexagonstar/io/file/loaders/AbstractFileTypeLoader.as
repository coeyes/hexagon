/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file.loaders{	import com.hexagonstar.data.types.Bit;	import com.hexagonstar.data.types.Byte;	import com.hexagonstar.event.FileIOEvent;	import com.hexagonstar.exception.AbstractMethodException;	import com.hexagonstar.io.file.types.IFile;	import com.hexagonstar.time.AbstractTimeConsumer;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLRequest;	import flash.utils.getTimer;		/**	 * Provides common properties and methods for FileTypeLoader implementations.	 * Extend this class to implement most methods required for a concrete FileTypeLoader.	 * 	 * @author Sascha Balkau	 * @version 1.0.0	 */	public class AbstractFileTypeLoader extends AbstractTimeConsumer	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _urlRequest:URLRequest;		/** @private */		protected var _filePath:String;		/** @private */		protected var _file:IFile;		/** @private */		protected var _loading:Boolean;		/** @private */		protected var _aborted:Boolean;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AbstractFileLoader instance.		 */		public function AbstractFileTypeLoader(file:IFile)		{			super();			_file = file;			_loading = false;		}						/**		 * Loads the file that is at the specified path.		 * 		 * @param path Location of the file to load.		 */		public function load(path:String):void		{			_filePath = path;			_isStarted = true;			_isFinished = false;			_aborted = false;			_startTime = getTimer();			_urlRequest = new URLRequest(_filePath);		}						/**		 * Cleans up Objects used by the FileReader.		 */		public function dispose():void		{			_file = null;			_urlRequest = null;		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns the file path of the file that was requested to load.		 * 		 * @return location of the file to load.		 */		public function get filePath():String		{			return _filePath;		}						/**		 * Returns true if a file loading is in progress.		 */		public function get loading():Boolean		{			return _loading;		}						/**		 * Returns true if the file loading progress was aborted.		 */		public function get aborted():Boolean		{			return _aborted;		}						/**		 * Returns the pecentage of the file that is being loaded. This evaluates		 * the current percentage of the execution by using getBytesTotal and		 * getBytesLoaded. Returns -1 if the percentage is not evaluable, i.e. the		 * file has not started loading yet.		 * 		 * @return percentage of the file that is being loaded.		 */		override public function get percentage():int		{			if (isStarted || isFinished)			{				var p:int = (bytesLoaded.byte / bytesTotal.byte * 100);				if (p >= 100) p = 100;				return p;			}			else			{				return -1;			}		}						/**		 * Returns the current transfer rate for the execution. This evalutes		 * the transfer rate by using getBytesLoaded and getDuration.		 * 		 * @return transfer rate in bit (per second).		 */		public function get transferRate():Bit		{			return new Bit(bytesLoaded.bit / duration.seconds);		}						/**		 * Abstract method.		 */		public virtual function get bytesTotal():Byte		{			throwAbstractMethodException();			return null;		}						/**		 * Abstract method.		 */		public virtual function get bytesLoaded():Byte		{			throwAbstractMethodException();			return null;		}						/**		 * Abstract method.		 */		public virtual function get fileContent():*		{			throwAbstractMethodException();			return null;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onOpen(e:Event):void		{			dispatchEvent(new FileIOEvent(FileIOEvent.OPEN, _file));		}				/**		 * @private		 */		protected function onProgress(e:ProgressEvent):void		{			dispatchEvent(new FileIOEvent(FileIOEvent.PROGRESS, _file));		}				/**		 * @private		 */		protected function onHTTPStatus(e:HTTPStatusEvent):void		{			dispatchEvent(new FileIOEvent(FileIOEvent.HTTP_STATUS, _file, "", e.status));		}				/**		 * @private		 */		protected function onFileComplete(e:Event):void		{			removeEventListeners(EventDispatcher(e.target));			dispatchEvent(new FileIOEvent(FileIOEvent.FILE_COMPLETE, _file));		}				/**		 * @private		 */		protected function onIOError(e:IOErrorEvent):void		{			removeEventListeners(EventDispatcher(e.target));			dispatchEvent(new FileIOEvent(FileIOEvent.IO_ERROR, _file, e.text));		}				/**		 * @private		 */		protected function onSecurityError(e:SecurityErrorEvent):void		{			removeEventListeners(EventDispatcher(e.target));			dispatchEvent(new FileIOEvent(FileIOEvent.SECURITY_ERROR, _file, e.text));					}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Adds standard event listeners for the specified file loader.		 * @private		 * 		 * @param l the loader that should listen to the events.		 */		protected function addEventListeners(l:EventDispatcher):void		{			l.addEventListener(Event.OPEN, onOpen, false, 0, true);			l.addEventListener(ProgressEvent.PROGRESS, onProgress, false, 0, true);			l.addEventListener(Event.COMPLETE, onFileComplete, false, 0, true);			l.addEventListener(HTTPStatusEvent.HTTP_STATUS, onHTTPStatus, false, 0, true);			l.addEventListener(IOErrorEvent.IO_ERROR, onIOError, false, 0, true);			l.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError,				false, 0, true);			_loading = true;		}						/**		 * Removes the formerly added Event Listeners.		 * @private		 */		protected function removeEventListeners(l:EventDispatcher):void		{			l.removeEventListener(Event.OPEN, onOpen);			l.removeEventListener(ProgressEvent.PROGRESS, onProgress);			l.removeEventListener(Event.COMPLETE, onFileComplete);			l.removeEventListener(HTTPStatusEvent.HTTP_STATUS, onHTTPStatus);			l.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			l.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			_loading = false;		}						/**		 * throws an AbstractMethodException.		 * @private		 */		private function throwAbstractMethodException():void		{			throw new AbstractMethodException("Called an abstract method in AbstractFileTypeLoader!");		}	}}