/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file{	import com.hexagonstar.data.types.Byte;	import com.hexagonstar.event.FileIOEvent;	import com.hexagonstar.io.file.loaders.FileTypeLoaderFactory;	import com.hexagonstar.io.file.loaders.IFileTypeLoader;	import com.hexagonstar.io.file.loaders.ZIPFileLoader;	import com.hexagonstar.io.file.types.IFile;	import flash.events.EventDispatcher;		/**	 * SingleFileLoader Class	 * @author Sascha Balkau	 */	public class SingleFileLoader extends EventDispatcher implements IFileLoader	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _file:IFile;		/** @private */		protected var _fileLoader:IFileTypeLoader;		/** @private */		protected var _finished:Boolean;		/** @private */		protected var _preventCaching:Boolean;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new SingleFileLoader instance.		 */		public function SingleFileLoader(file:IFile = null, preventCaching:Boolean = false)		{			super();			reset();						_file = file;			_preventCaching = preventCaching;		}						/**		 * reset		 */		public function reset():void		{			_finished = false;		}						/**		 * load		 */		public function load():void		{			var filePath:String = _file.path				+ (!_preventCaching ? "" : "?nocaching=" + new Date().time);						_fileLoader = FileTypeLoaderFactory.create(_file);			addLoaderEventListeners();						/* Catch security exception here in case the application tries			 * to locally load a resource from a non-trusted location */			try			{				_fileLoader.load(filePath);			}			catch (e:Error)			{				onSecurityError(new FileIOEvent(FileIOEvent.SECURITY_ERROR,				_file, e.message				+ " (Probably tried to load a local resource from a non-trusted location)."));			}		}						/**		 * dispose		 */		public function dispose():void		{			_fileLoader.dispose();			_fileLoader = null;		}						/**		 * A shortcut method that can be used to add all event listeners to the specified		 * listener class. The listener class must implement the IFileIOEventListener		 * interface to be a valid FileIO listener.		 * 		 * @param listener The class for which events listeners should be added.		 */		public function addEventListenersFor(listener:IFileIOEventListener):void		{			addEventListener(FileIOEvent.OPEN, listener.onOpen);			addEventListener(FileIOEvent.PROGRESS, listener.onProgress);			addEventListener(FileIOEvent.FILE_COMPLETE, listener.onFileComplete);			addEventListener(FileIOEvent.COMPLETE, listener.onComplete);			addEventListener(FileIOEvent.ABORT, listener.onAbort);			addEventListener(FileIOEvent.PAUSE, listener.onPause);			addEventListener(FileIOEvent.UNPAUSE, listener.onUnpause);			addEventListener(FileIOEvent.HTTP_STATUS, listener.onHTTPStatus);			addEventListener(FileIOEvent.IO_ERROR, listener.onIOError);			addEventListener(FileIOEvent.SECURITY_ERROR, listener.onSecurityError);		}						/**		 * Removes all event listeners that where added previously to the specified listener		 * class.		 * 		 * @param listener The class from which events listeners should be removed.		 */		public function removeEventListenersFor(listener:IFileIOEventListener):void		{			removeEventListener(FileIOEvent.OPEN, listener.onOpen);			removeEventListener(FileIOEvent.PROGRESS, listener.onProgress);			removeEventListener(FileIOEvent.FILE_COMPLETE, listener.onFileComplete);			removeEventListener(FileIOEvent.COMPLETE, listener.onComplete);			removeEventListener(FileIOEvent.ABORT, listener.onAbort);			removeEventListener(FileIOEvent.PAUSE, listener.onPause);			removeEventListener(FileIOEvent.UNPAUSE, listener.onUnpause);			removeEventListener(FileIOEvent.HTTP_STATUS, listener.onHTTPStatus);			removeEventListener(FileIOEvent.IO_ERROR, listener.onIOError);			removeEventListener(FileIOEvent.SECURITY_ERROR, listener.onSecurityError);		}						/**		 * Returns a String Representation of SingleFileLoader.		 * 		 * @return A String Representation of SingleFileLoader.		 */		override public function toString():String		{			return "[SingleFileLoader]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get file():IFile		{			return _file;		}		public function set file(v:IFile):void		{			_file = v;		}						/**		 * The bytes that have so far been loaded by the loader.		 * 		 * @see com.hexagonstar.data.types.Byte.		 */		public function get bytesLoaded():Byte		{			return _fileLoader.bytesLoaded;		}						/**		 * The percentage that has so far been loaded by the loader, thus value from 0 to		 * 100.		 */		public function get percentage():int		{			return _fileLoader.percentage;		}						/**		 * @inheritDoc		 */		public function get loading():Boolean		{			if (_fileLoader) return _fileLoader.loading;			return false;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onOpen(e:FileIOEvent):void		{			relayEvent(e);		}						/**		 * @private		 */		protected function onProgress(e:FileIOEvent):void		{			relayEvent(e);		}						/**		 * @private		 */		protected function onFileComplete(e:FileIOEvent):void		{			relayEvent(e);			finish(e);		}						/**		 * @private		 */		protected function onAbort(e:FileIOEvent):void		{			disposeFileLoader();			relayEvent(e);		}						/**		 * @private		 */		protected function onHTTPStatus(e:FileIOEvent):void		{			relayEvent(e);		}						/**		 * @private		 */		protected function onIOError(e:FileIOEvent):void		{			relayEvent(e);			finish(e);		}						/**		 * @private		 */		protected function onSecurityError(e:FileIOEvent):void		{			relayEvent(e);						/* Catch any occuring exceptions here! We already relay the event			 * so any overlaying application can care about the error handling! */			try			{				finish(e);			}			catch (err:Error)			{			}		}						/**		 * @private		 */		protected function onZippedFileLoaded(e:FileIOEvent):void		{			relayEvent(e);		}				/**		 * @private		 */		protected function onZipParseError(e:FileIOEvent):void		{			relayEvent(e);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function addLoaderEventListeners():void		{			_fileLoader.addEventListener(FileIOEvent.OPEN, onOpen);			_fileLoader.addEventListener(FileIOEvent.PROGRESS, onProgress);			_fileLoader.addEventListener(FileIOEvent.FILE_COMPLETE, onFileComplete);			_fileLoader.addEventListener(FileIOEvent.ABORT, onAbort);			_fileLoader.addEventListener(FileIOEvent.HTTP_STATUS, onHTTPStatus);			_fileLoader.addEventListener(FileIOEvent.IO_ERROR, onIOError);			_fileLoader.addEventListener(FileIOEvent.SECURITY_ERROR, onSecurityError);						if (_fileLoader is ZIPFileLoader)			{				_fileLoader.addEventListener(FileIOEvent.ZIPPED_FILE_LOADED, onZippedFileLoaded);				_fileLoader.addEventListener(FileIOEvent.ZIP_PARSE_ERROR, onZipParseError);			}		}						/**		 * @private		 */		protected function disposeFileLoader():void		{			_fileLoader.removeEventListener(FileIOEvent.OPEN, onOpen);			_fileLoader.removeEventListener(FileIOEvent.PROGRESS, onProgress);			_fileLoader.removeEventListener(FileIOEvent.FILE_COMPLETE, onFileComplete);			_fileLoader.removeEventListener(FileIOEvent.ABORT, onAbort);			_fileLoader.removeEventListener(FileIOEvent.HTTP_STATUS, onHTTPStatus);			_fileLoader.removeEventListener(FileIOEvent.IO_ERROR, onIOError);			_fileLoader.removeEventListener(FileIOEvent.SECURITY_ERROR, onSecurityError);						if (_fileLoader is ZIPFileLoader)			{				_fileLoader.removeEventListener(FileIOEvent.ZIPPED_FILE_LOADED, onZippedFileLoaded);				_fileLoader.removeEventListener(FileIOEvent.ZIP_PARSE_ERROR, onZipParseError);			}						_fileLoader.dispose();		}						/**		 * @private		 */		protected function relayEvent(e:FileIOEvent):void		{			dispatchEvent(e);		}						/**		 * @private		 */		protected function finish(e:FileIOEvent):void		{			disposeFileLoader();			_finished = true;			dispatchEvent(new FileIOEvent(FileIOEvent.COMPLETE, e.file, e.text,				e.httpStatus, e.bubbles, e.cancelable));		}	}}