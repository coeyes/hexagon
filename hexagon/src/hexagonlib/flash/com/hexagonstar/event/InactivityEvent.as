 /*  * hexagonlib - Multi-Purpose ActionScript 3 Library.  *       __    __  *    __/  \__/  \__    __  *   /  \__/HEXAGON \__/  \  *   \__/  \__/  LIBRARY _/  *            \__/  \__/  *  * Licensed under the MIT License  *   * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks  *   * Permission is hereby granted, free of charge, to any person obtaining a copy of  * this software and associated documentation files (the "Software"), to deal in  * the Software without restriction, including without limitation the rights to  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of  * the Software, and to permit persons to whom the Software is furnished to do so,  * subject to the following conditions:  *   * The above copyright notice and this permission notice shall be included in all  * copies or substantial portions of the Software.  *   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  */package com.hexagonstar.event{	import com.hexagonstar.data.types.Time;	import flash.events.Event;		/**	 * An event dispatched by Inactivity.	 * 	 * @author Sascha Balkau	 * @version 1.0.0 	 */ 	public class InactivityEvent extends Event	{		//////////////////////////////////////////////////////////////////////////////////////// 		// Constants                                                                          // 		//////////////////////////////////////////////////////////////////////////////////////// 				public static const ACTIVE:String	= "active";		public static const INACTIVE:String	= "inactive";		 		 		//////////////////////////////////////////////////////////////////////////////////////// 		// Properties                                                                         // 		//////////////////////////////////////////////////////////////////////////////////////// 		 		/** @private */		protected var _ms:int; 		 		 		//////////////////////////////////////////////////////////////////////////////////////// 		// Public Methods                                                                     // 		//////////////////////////////////////////////////////////////////////////////////////// 				/**		 * Creates a new InactivityEvent.		 * 		 * @param type The type of event.		 * @param bubbles Determines whether the Event object participates in		 *         the bubbling stage of the event flow.		 * @param cancelable Determines whether the Event object can be canceled.		 */		public function InactivityEvent(type:String,											bubbles:Boolean = false,											cancelable:Boolean = false) 		{			super(type, bubbles, cancelable);		} 		 				/**		 * Clones the event object.		 * 		 * @return a clone of the event.		 */		override public function clone():Event		{			var e:InactivityEvent = new InactivityEvent(type, bubbles, cancelable);			e.milliseconds = milliseconds;			return e;		}				 		//////////////////////////////////////////////////////////////////////////////////////// 		// Getters & Setters                                                                  // 		////////////////////////////////////////////////////////////////////////////////////////				/**		 * The length of time an user has been inactive.		 */		public function get milliseconds():int 		{			return _ms;		}		public function set milliseconds(v:int):void 		{			_ms = v;		}						/**		 * Returns the inactive time as a Time object.		 */		public function get time():Time		{			return new Time(_ms);		}	}}