/* * tetragonlib - ActionScript 3 Game Library. *    ____ *   /    / TETRAGON *  /____/  LIBRARY *  * Licensed under the MIT License *  * Copyright (c) 2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.game.tile{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Point;	import flash.geom.Rectangle;		/**	 * The TileSetFactory takes an XML object and a Bitmap object and generates	 * a TileSet object from these.	 */	public class TileSetFactory	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _bitmap:BitmapData;		protected var _tileSet:TileSet;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new TileSetFactory instance.		 */		public function TileSetFactory()		{		}						/**		 * Generates a new TileSet object from the specified XML object and bitmap.		 * 		 * @param xml The XML that contains the TileSet data.		 * @param bitmap A Bitmap that contains the graphic tiles.		 */		public function create(xml:XML, bitmap:Bitmap):TileSet		{			_bitmap = bitmap.bitmapData;			_tileSet = new TileSet();						parseData(xml);			generateTiles();						_bitmap = null;			return _tileSet;		}						/**		 * Disposes the TileSetFactory.		 */		public function dispose():void		{			_tileSet = null;		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns the generated TileSet. The create method needs to called to		 * generate the TileSet first, otherwise the returned value will be null.		 */		public function get tileSet():TileSet		{			return _tileSet;		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Parses the TileSet attributes and Tile data from the provided XML object.		 * @private		 */		protected function parseData(xml:XML):void		{			var root:XMLList = xml["tileSet"];			var node:XMLList;			var p:XML;						/* Parse TileSet main attributes */			with (_tileSet)			{				id = root.@id;				tileWidth = root.@tileWidth;				tileHeight = root.@tileHeight;				tileGap = root.@tileGap;				transparent = (root.@transparent == "true") ? true : false;				backgroundColor = root.@bgColor;				tileImageFilePath = root.@imageFilePath;			}						/* Parse TileSet meta data */			node = root.meta;			with (_tileSet.metaData)			{				name = node["name"];				description = node.description;				author = node.author;				keywords = node.keywords;				date = node.date;			}						/* Parse TileSet Property Pool */			node = root.propertyPool.property;			for each (p in node)			{				_tileSet.addPoolProperty(p.@id, p.@name, p.@defaultValue);			}						/* Parse TileSet Global Properties */			node = root.globalProperties.property;			for each (p in node)			{				_tileSet.addGlobalProperty(p.@id, p.@value);			}						/* Parse TileSet tiles */			var tile:ITile;			var tileID:int;			var totalFrames:int;			var copyOf:int;			node = root.tiles.tile;			for each (var t:XML in node)			{				tileID = t.@id;				totalFrames = t.@frameCount || 1;				copyOf = t.@copyOf;								if (totalFrames > 1)				{					tile = new AnimTile(tileID, copyOf);					(tile as AnimTile).totalFrames = totalFrames;				}				else				{					tile = new Tile(tileID, copyOf);				}								/* Parse the current tile's properties */				var propertyNode:XMLList = t.properties.property;				for each (var prop:XML in propertyNode)				{					tile.addProperty(prop.@id, prop.@value);				}				_tileSet.addTile(tile);			}		}						/**		 * Creates a 'physical' tileset from the provided bitmap by copying the tiles from it.		 * @private		 */		protected function generateTiles():void		{			var tile:ITile;			var b:Bitmap;						var id:int;			var totalFrames:int;			var copyOf:int = 0;			var x:int = 0;			var y:int = 0;						var bitmapWidth:int = _bitmap.width;			//var bitmapHeight:int = _bitmap.height;						var tileWidth:int = _tileSet.tileWidth;			var tileHeight:int = _tileSet.tileHeight;			var tileGap:int = _tileSet.tileGap;			var tileAmount:int = _tileSet.tileCount;			var bgColor:uint = _tileSet.backgroundColor;			var transparent:Boolean = _tileSet.transparent;						var rectangle:Rectangle = new Rectangle(0, 0, tileWidth, tileHeight);			var point:Point = new Point(0, 0);						/* Iterate through tiles on the bitmap */			for (var i:int = 1; i <= tileAmount; i++)			{				rectangle.x = x;				rectangle.y = y;								tile = _tileSet.getTile(i);				id = tile.id;				copyOf = tile.copyOf;				totalFrames = (tile is AnimTile) ? (tile as AnimTile).totalFrames : 1;				b = tile as Bitmap;								/* TODO Experimenal feature! Checks if the current tile should be a copy				/* of an already existing tile and if so use that instead but update the				/* tile ID to the current one */				if (copyOf > 0)				{					tile = _tileSet.duplicateTile(_tileSet.getTile(copyOf));					tile.id = id;					tile.copyOf = copyOf;					_tileSet.replaceTile(id, tile);					continue;				}								/* Static tiles */				if (totalFrames < 2)				{					b.bitmapData = new BitmapData(tileWidth, tileHeight, transparent, bgColor);					b.bitmapData.copyPixels(_bitmap, rectangle, point);					/* Increase x position */					x += (tileWidth + tileGap);					/* Reset x and increase y after reaching the last tile per row */					if (x > (bitmapWidth - tileWidth))					{						x = 0;						y += (tileHeight + tileGap);					}				}				/* Anim tiles */				else				{					var frames:Vector.<BitmapData> = new Vector.<BitmapData>(totalFrames, true);					for (var f:int = 0; f < totalFrames; f++)					{						rectangle.x = x;						rectangle.y = y;						var frame:BitmapData = new BitmapData(tileWidth, tileHeight, transparent, bgColor);						frame.copyPixels(_bitmap, rectangle, point);						frames[f] = frame;						//(tile as AnimTile).addFrame(f, frame);												/* Increase x position */						x += (tileWidth + tileGap);						/* Reset x and increase y after reaching the last tile per row */						if (x > (bitmapWidth - tileWidth))						{							x = 0;							y += (tileHeight + tileGap);						}					}					(tile as AnimTile).frames = frames;				}																/* If tile has subFrames, extend its width to create space for subFrame buffer *///				width = (frameCount > 1) ? tileWidth * frameCount : tileWidth;//				//				if (frameCount > 1)//				{//					var bmd:BitmapData = new BitmapData(width, tileHeight, transparent, bgColor);//					bmd.copyPixels(_bitmap, rectangle, point);//				}//				//				/* Iterate over all frames of the anim tile. *///				var at:AnimTile = tile as AnimTile;//				for (var j:int = 0; j < frameCount; j++)//				{//					if (frameCount > 1)//					{//						var frame:BitmapData = new BitmapData(tileWidth, tileHeight, transparent, bgColor);//						rectangle = new Rectangle(x, y, tileWidth, tileHeight);//						point = new Point((tileWidth * j), 0);//						frame.copyPixels(_bitmap, rectangle, point);//						at.addFrame(frame);//					}//					else//					{//						/* Copy bitmap area from the bitmap to the tile *///						b.bitmapData = new BitmapData(tileWidth, tileHeight, transparent, bgColor);//						b.bitmapData.copyPixels(_bitmap, rectangle, point);//					}//					//				}																												/* If tile has subFrames, extend its width to create space for subFrame buffer *///				width = (subFrames > 0) ? tileWidth * (subFrames + 1) : tileWidth;//				//				/* Copy bitmap area from the bitmap to the tile *///				b.bitmapData = new BitmapData(width, tileHeight, transparent, bgColor);//				b.bitmapData.copyPixels(_bitmap, rectangle, point);//				//				/* Iterate over the 'physical' tiles (all tiles and their sub tiles) *///				for (var j:int = 0; j < (1 + subFrames); j++)//				{//					/* If tile has subtiles, copy them into the current tile *///					if (subFrames > 0)//					{//						rectangle = new Rectangle(x, y, tileWidth, tileHeight);//						point = new Point((tileWidth * j), 0);//						b.bitmapData.copyPixels(_bitmap, rectangle, point);//					}//					//					/* Increase x position *///					x += (tileWidth + tileGap);//					//					/* Reset x and increase y after reaching the last tile per row *///					if (x > (bitmapWidth - tileWidth))//					{//						x = 0;//						y += (tileHeight + tileGap);//					}//				}//				//				/* For AnimTiles set their ScrollRect *///				if (subFrames > 0)//				{//					rectangle = new Rectangle(0, 0, tileWidth, tileHeight);//					(tile as AnimTile).scrollRect = rectangle;//				}								/* Iterate over the 'physical' tiles (all tiles and their sub tiles) *///				for (var j:int = 0; j < frameCount; j++)//				{//					/* If tile has subtiles, copy them into the current tile *///					if (frameCount > 1)//					{//						rectangle = new Rectangle(x, y, tileWidth, tileHeight);//						point = new Point((tileWidth * j), 0);//						b.bitmapData.copyPixels(_bitmap, rectangle, point);//					}//					//					/* Increase x position *///					x += (tileWidth + tileGap);//					//					/* Reset x and increase y after reaching the last tile per row *///					if (x > (bitmapWidth - tileWidth))//					{//						x = 0;//						y += (tileHeight + tileGap);//					}//				}//				//				/* For AnimTiles set their ScrollRect *///				if (frameCount > 0)//				{//					rectangle = new Rectangle(0, 0, tileWidth, tileHeight);//					(tile as AnimTile).scrollRect = rectangle;//				}			}		}	}}