/* * tetragonlib - ActionScript 3 Game Library. *    ____ *   /    / TETRAGON *  /____/  LIBRARY *  * Licensed under the MIT License *  * Copyright (c) 2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.game.tile{	import com.hexagonstar.data.types.MetaData;	import com.hexagonstar.game.tile.ds.PropertyMap;		/**	 * ITileMap Interface	 * @author Sascha Balkau <sascha@hexagonstar.com>	 */	public interface ITileMap	{		/**		 * The ID of the TileMap.		 */		function get id():String;		function set id(v:String):void;				/**		 * The width of the TileMap measured in tiles.		 */		function get widthTiles():int;		function set widthTiles(v:int):void;				/**		 * The height of the TileMap measured in tiles.		 */		function get heightTiles():int;		function set heightTiles(v:int):void;				/**		 * The width of the entire map in pixels. This is calculated from		 * mapWidth measured in tiles * tileWidth of the tileset with largest tiles.		 */		function get widthPixel():uint;				/**		 * The height of the entire map in pixels. This is calculated from		 * mapHeight measured in tiles * tileHeight of the tileset with largest tiles.		 */		function get heightPixel():uint;				/**		 * The background color of the tilemap.		 */		function get backgroundColor():uint;		function set backgroundColor(v:uint):void;				/**		 * Returns a Map of the tilemap properties.		 */		function get properties():PropertyMap;				/**		 * The tile layers of the TileMap.		 */		function get layers():Vector.<ITileLayer>;				/**		 * The amount of tile layers that the TileMap has.		 */		function get layerCount():int;		function set layerCount(v:int):void;				/**		 * Returns the meta data object of the TileSet.		 */		function get metaData():MetaData;				/**		 * Adds a new TileMap Property to the TileMap.		 * 		 * @param id The property ID.		 * @param value The value of the property.		 */		function addProperty(id:String, value:*):void;				/**		 * Adds a new Tile Layer to the TileMap.		 * 		 * @param layer The Tile Layer.		 */		function addLayer(layer:ITileLayer):void;				/**		 * getLayer		 */		function getLayer(index:int):ITileLayer;				/**		 * Initializes the Tile Map.		 */		function init():void;				/**		 * initLayers		 */		function initLayers(tileSetsMap:PropertyMap, winWidth:int, winHeight:int):void;				function toString(...args):String;	}}