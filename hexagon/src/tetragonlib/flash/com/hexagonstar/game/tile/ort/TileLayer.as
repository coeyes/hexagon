/* * tetragonlib - ActionScript 3 Game Library. *    ____ *   /    / TETRAGON *  /____/  LIBRARY *  * Licensed under the MIT License *  * Copyright (c) 2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.game.tile.ort{	import com.hexagonstar.game.tile.AnimTile;	import com.hexagonstar.game.tile.ITile;	import com.hexagonstar.game.tile.ITileLayer;	import com.hexagonstar.game.tile.Tile;	import com.hexagonstar.game.tile.TileSet;	import com.hexagonstar.game.tile.ds.PropertyMap;	import com.hexagonstar.game.tile.ds.TileGrid;	import com.hexagonstar.time.PreciseTimer;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.PixelSnapping;	import flash.display.Sprite;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.geom.Rectangle;		/**	 * TileLayer Class	 */	public class TileLayer extends Sprite implements ITileLayer	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				//public static const WRAPPING_H:String = "wrappingH";		//public static const WRAPPING_V:String = "wrappingV";		//public static const WRAPPING_HV:String = "wrappingHV";				//public static const AUTOSCROLL_H:String = "autoScrollH";		//public static const AUTOSCROLL_V:String = "autoScrollV";		//public static const AUTOSCROLL_HV:String = "autoScrollHV";				protected static const ANIMTILE_EXPIRATION_INTERVAL:int = 9;						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _index:int;		protected var _name:String;		protected var _tileSetID:String;		protected var _tileAnimFPS:int;		protected var _transparent:Boolean;		protected var _fillColor:uint;		protected var _wrapping:String;		protected var _autoScroll:String;		protected var _autoScrollSpeed:int;				protected var _properties:PropertyMap;				protected var _tileAnimRenderCount:int;		protected var _tileAnimTimer:PreciseTimer;				protected var _grid:TileGrid;		protected var _tileSet:TileSet;		protected var _buffer:BitmapData;		protected var _canvas:BitmapData;				protected var _viewWidth:int;		protected var _viewHeight:int;		protected var _viewCols:int;		protected var _viewRows:int;				protected var _tileWidth:int;		protected var _tileHeight:int;				protected var _bufferWidth:int;		protected var _bufferHeight:int;				protected var _oldXPos:int;		protected var _oldYPos:int;				/**		 * Rectangle and Point that are used to copy/position tiles.		 * @private		 */		protected var _rectangle:Rectangle;		protected var _point:Point;				/**		 * Rectangle and Point that are used to copy an area from the buffer to the canvas.		 * @private		 */		protected var _copyRectangle:Rectangle;		protected var _copyPoint:Point;				/**		 * Rectangle used to clear (flood fill) the buffer.		 * @private		 */		protected var _bufferRectangle:Rectangle;				/**		 * If false also renders the buffer to the screen. Only used for debugging.		 * @private		 */		protected var _masked:Boolean = true;						/**		 * Used to store references to all anim tiles that are currently being rendered.		 * @private		 */		protected var _animTiles:Object;				/**		 * Stores the current frame number for all animtiles of the same id. Used for		 * sync animtile looping.		 * @private		 */		protected var _animTileFrameCounts:Object;				/**		 * Determines if anim tiles are being rendered.		 * @private		 */		protected var _hasAnimTiles:Boolean = false;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new TileLayer instance.		 * 		 * @param width Width of the layer, measured in tiles.		 * @param height Height of the layer, measured in tiles.		 */		public function TileLayer(width:int = 0, height:int = 0)		{			_properties = new PropertyMap(10);			_grid = new TileGrid(width, height);		}				/**		 * Adds a new Layer Property to the Layer.		 * 		 * @param id The property ID.		 * @param value The value of the property.		 */		public function addProperty(id:String, value:*):void		{			_properties.put(id, value);		}						/**		 * Sets the Grid data that is used by the layer. This must be set before		 * the layer can be used.		 * 		 * @param array A 2D Array whose values must be integers and will		 * be used to populate the layers' grid. The Grid will automatically		 * receive the width and height from the 2D array.		 */		public function setGridData(array:Array):void		{			_grid.fromArray(array);		}						/**		 * Initializes TileLayer.		 */		public function init(tileSetsMap:PropertyMap, viewWidth:int, viewHeight:int):void		{			_tileSet = tileSetsMap.getValue(_tileSetID);			_tileWidth = _tileSet.tileWidth;			_tileHeight = _tileSet.tileHeight;						_viewWidth = viewWidth;			_viewHeight = viewHeight;			_viewCols = (_viewWidth / _tileWidth);			_viewRows = (_viewHeight / _tileHeight);						_oldXPos = -1;			_oldYPos = -1;						//Debug.trace("viewCols: " + _viewCols + "  viewRows: " + _viewRows);						/* Calculate buffer width and height */			_bufferWidth = _viewWidth + _tileWidth;			_bufferHeight = _viewHeight + _tileHeight;						_point = new Point(0, 0);			_copyPoint = new Point(0, 0);			_copyRectangle = new Rectangle(0, 0, _viewWidth, _viewHeight);			_rectangle = new Rectangle(0, 0, _tileWidth, _tileHeight);						_buffer = new BitmapData(_bufferWidth, _bufferHeight, _transparent, _fillColor);			_bufferRectangle = new Rectangle(0, 0, _bufferWidth, _bufferHeight);						if (!_masked)			{				var bufferBitmap:Bitmap = new Bitmap(_buffer);				bufferBitmap.alpha = 0.4;				addChild(bufferBitmap);			}						_canvas = new BitmapData(_viewWidth, _viewHeight, _transparent, _fillColor);			addChild(new Bitmap(_canvas, PixelSnapping.ALWAYS, false));						if (_tileSet.animTileCount > 0)			{				_animTiles = {};				_animTileFrameCounts = {};				_tileAnimRenderCount = 0;				_hasAnimTiles = false;				_tileAnimTimer = new PreciseTimer(Math.round(1000 / _tileAnimFPS), 0);				_tileAnimTimer.addEventListener(TimerEvent.TIMER, onTileAnimTimer,					false, 0, true);				_tileAnimTimer.start();			}		}						/**		 * Draws the layer.		 * 		 * @private		 * @param xPos The current x position, in pixels.		 * @param yPos The current y position, in pixels.		 */		public function draw(xPos:int, yPos:int):void		{			/* If the position hasn't changed and there are no anim tiles to render			 * we don't need to update the layer at all and can safe cpu cycles. */			if (!_hasAnimTiles && xPos == _oldXPos && yPos == _oldYPos)			{				return;			}						var rx:int = (xPos % _tileWidth);			var ry:int = (yPos % _tileHeight);						/* Clear the buffer */			_buffer.fillRect(_bufferRectangle, _fillColor);						for (var y:int = 0; y <= _viewRows; y++)			{				for (var x:int = 0; x <= _viewCols; x++)				{					/* Calculate tile coord in the grid. */					var tileID:int = 0;					var gridX:int = x + (xPos / _tileWidth);					var gridY:int = y + (yPos / _tileHeight);										if (gridX < _grid.width && gridY < _grid.height)					{						tileID = _grid.getCell(gridX, gridY);					}										/* Don't draw areas that are empty. */					if (tileID > 0)					{						var tile:ITile = _tileSet.getTile(tileID);						_point.x = x * _tileWidth;						_point.y = y * _tileHeight;												/* If anim tile, it needs special treatment. */						if (tile is AnimTile)						{							/* Create a key to store the anim tile under. */							var key:String = gridX + "" + gridY;														/* If anim tile is already on view, just pick it from the list ... */							if (_animTiles[key])							{								tile = _animTiles[key];							}							/* ... otherwise create it and store it in the list. */							else							{								tile = tile.clone();								_animTiles[key] = tile;								_animTileFrameCounts[tile.id] = (tile as AnimTile).totalFrames - 1;								_tileAnimRenderCount++;							}						}												_buffer.copyPixels((tile as Tile).bitmapData, _rectangle, _point);					}				}			}						/* Calculate offset position to copy view rect from the buffer. */			_copyRectangle.x = rx;			_copyRectangle.y = ry;			_canvas.copyPixels(_buffer, _copyRectangle, _copyPoint);						_oldXPos = xPos;			_oldYPos = yPos;						_hasAnimTiles = (_tileAnimRenderCount > 0);		}						/**		 * Returns a String Representation of TileLayer.		 * 		 * @return A String Representation of TileLayer.		 */		override public function toString():String		{			return "[TileLayer, index=" + _index + ", layerName=" + _name + "]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get index():int		{			return _index;		}		public function set index(v:int):void		{			_index = v;		}						public function get layerName():String		{			return _name;		}		public function set layerName(v:String):void		{			_name = v;		}						public function get tileSetID():String		{			return _tileSetID;		}		public function set tileSetID(v:String):void		{			_tileSetID = v;		}						public function get tileSet():TileSet		{			return _tileSet;		}		public function set tileSet(v:TileSet):void		{			_tileSet = v;		}						public function get tileAnimFPS():int		{			return _tileAnimFPS;		}		public function set tileAnimFPS(v:int):void		{			_tileAnimFPS = v;		}						public function get transparent():Boolean		{			return _transparent;		}		public function set transparent(v:Boolean):void		{			_transparent = v;		}						public function get fillColor():uint		{			return _fillColor;		}		public function set fillColor(v:uint):void		{			_fillColor = v;		}						public function get wrapping():String		{			return _wrapping;		}		public function set wrapping(v:String):void		{			_wrapping = v;		}						public function get autoScroll():String		{			return _autoScroll;		}		public function set autoScroll(v:String):void		{			_autoScroll = v;		}						public function get autoScrollSpeed():int		{			return _autoScrollSpeed;		}		public function set autoScrollSpeed(v:int):void		{			_autoScrollSpeed = v;		}						public function get grid():TileGrid		{			return _grid;		}						public function get properties():PropertyMap		{			return _properties;		}						public function get masked():Boolean		{			return _masked;		}		public function set masked(v:Boolean):void		{			_masked = v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onTileAnimTimer(e:TimerEvent):void		{			if (!_hasAnimTiles) return;						/* Update the synced frame count of every anim tile with the same id. */			for (var id:String in _animTileFrameCounts)			{				var fc:int = _animTileFrameCounts[id];				var ft:int = _tileSet.animTileFrameTotals[id];				if (fc < 1) fc = ft - 1;				else fc--;				_animTileFrameCounts[id] = fc;			}						/* Loop through all anim tiles that are currently rendered. */			for (var key:String in _animTiles)			{				var t:AnimTile = _animTiles[key];								if (t)				{					t.currentFrame = _animTileFrameCounts[t.id];										if (t.currentFrame < 1)					{						if (t.loops > ANIMTILE_EXPIRATION_INTERVAL)						{							_animTiles[key] = null;							_tileAnimRenderCount--;														if (_tileAnimRenderCount < 1)							{								_animTiles = {};							}						}						else						{							t.loops++;						}					}				}			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////	}}