/* * tetragonlib - ActionScript 3 Game Library. *    ____ *   /    / TETRAGON *  /____/  LIBRARY *  * Licensed under the MIT License *  * Copyright (c) 2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.game.tile{	import flash.display.Bitmap;	import flash.display.BitmapData;		/**	 * AnimTile Class	 */	public class AnimTile extends Tile implements ITile	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				public var frameCount:int = 0;		public var currentFrame:int = 0;				protected var _frames:Vector.<BitmapData>;				////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AnimTile instance.		 */		public function AnimTile(id:int, copyOf:int = 0, frames:Vector.<BitmapData> = null)		{			super(id, copyOf);						if (frames)			{				_frames = frames;				frameCount = _frames.length;				bitmapData = _frames[0];			}		}						/**		 * Starts the playback of the tile animation.		 *///		public function play():void//		{//			if (!_isPlaying)//			{//				_isPlaying = true;//			}//		}						/**		 * stop		 *///		public function stop():void//		{//			if (_isPlaying)//			{//				_isPlaying = false;//			}//		}						/**		 * nextFrame		 */		public function nextFrame():void		{			if (currentFrame == 0)			{				currentFrame = frameCount - 1;			}			else			{				currentFrame--;			}						bitmapData = _frames[currentFrame];		}				/**		 * nextFrame		 *///		public function nextFrame():void//		{//			if (_count == _frameCount)//			{//				bitmapData = _buffer.clone();//				_count = 0;//			}//			else//			{//				bitmapData.scroll(-width, 0);//				_count++;//			}//		}						/**		 * Clones the Tile's BitmapData Buffer into the passed-in Bitmap's		 * bitmapData. This is used by the TileSet's Duplicate function to		 * create duplicate tiles from existing ones.		 * 		 * @param target The bitmap object to whose bitmapdata the tile is cloned to.		 */		override public function cloneBufferTo(target:Bitmap):void		{			/* As an AnimTile, clone from its buffer to get all sub tiles. */			//target.bitmapData = _buffer.clone();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get frames():Vector.<BitmapData>		{			return _frames;//.concat();		}		public function set frames(v:Vector.<BitmapData>):void		{			_frames = v;			bitmapData = _frames[0];		}						/**		 * Sets the ScrollRect for the AnimTile.		 */		//override public function set scrollRect(v:Rectangle):void		//{		//	_buffer = bitmapData.clone();		//	super.scrollRect = v;		//}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * onTimer function that is called by the play method.		 * @private		 */		//protected function onTimer(e:TimerEvent):void		//{		//}	}}