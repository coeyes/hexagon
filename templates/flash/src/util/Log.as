package util{	import com.hexagonstar.env.console.Console;	import com.hexagonstar.util.debug.Debug;	import flash.display.Stage;		/**	 * A simple wrapper class for project-external (and internal) Debug classes.	 * 	 * @author Sascha Balkau	 */	public class Log	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				private static var _console:Console;		private static var _enabled:Boolean = true;		private static var _filterLevel:int = 0;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Needs to be called before the Logger can be used.		 */		public static function init():void		{			if (!_console)			{				if (Main.config.consoleEnabled)				{					_console = Console.instance;				}			}						if (_console)			{				_console.clear();				_console.clearInput();				Log.monitor(Main.app.stage);				Log.info(AppInfo.APP_NAME + " v" + AppInfo.APP_VERSION					+ " (build #" + AppInfo.APP_BUILD + ")");				Log.info("Type 'help' for a list of all available console commands.");			}		}						/**		 * monitor		 */		public static function monitor(stage:Stage):void		{			Debug.monitor(stage);		}						/**		 * trace		 */		public static function trace(data:*):void		{			if (_filterLevel > Console.LEVEL_TRACE) return;			send(data, Console.LEVEL_TRACE);		}						/**		 * debug		 */		public static function debug(data:*):void		{			if (_filterLevel > Console.LEVEL_DEBUG) return;			send(data, Console.LEVEL_DEBUG);		}						/**		 * info		 */		public static function info(data:*):void		{			if (_filterLevel > Console.LEVEL_INFO) return;			send(data, Console.LEVEL_INFO);		}						/**		 * warn		 */		public static function warn(data:*):void		{			if (_filterLevel > Console.LEVEL_WARN) return;			send(data, Console.LEVEL_WARN);		}						/**		 * error		 */		public static function error(data:*):void		{			if (_filterLevel > Console.LEVEL_ERROR) return;			send(data, Console.LEVEL_ERROR);		}						/**		 * fatal		 */		public static function fatal(data:*):void		{			if (_filterLevel > Console.LEVEL_FATAL) return;			send(data, Console.LEVEL_FATAL);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public static function get enabled():Boolean		{			return _enabled;		}		public static function set enabled(v:Boolean):void		{			if (_console)			{				_console.log("Console logging " + (v ? "enabled" : "disabled")					+ " with filter level " + _filterLevel + ".");			}			_enabled = Debug.enabled = v;		}						public static function get filterLevel():int		{			return _filterLevel;		}		public static function set filterLevel(v:int):void		{			_filterLevel = v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * send		 * @private		 */		private static function send(data:*, level:int):void		{			if (_enabled)			{				if (_console) _console.log(data, level);				Debug.trace(data, level);			}		}	}}