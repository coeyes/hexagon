package view.screens{	import com.hexagonstar.display.shapes.RectangleShape;		/**	 * TestScreen1 class	 * @author Sascha Balkau <sascha@hexagonstar.com>	 */	public class TestScreen1 extends AbstractScreen implements IScreen	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new screen instance.		 */		public function TestScreen1()		{			super();		}						/**		 * Initializes the screen. This method is called by ScreenManager as soon		 * as the screen has been added to the display list but while it is still		 * invisible.		 */		override public function init():void		{			super.init();		}						/**		 * Activates the screen's functionality. This method is called by ScreenManager		 * after the screen has been made visible (e.g. after it finished fading in).		 */		override public function activate():void		{			super.activate();		}						/**		 * Deactivates the screen's functionality. This method is called by ScreenManager		 * right before it is about to disappear (e.g. before being faded out).		 */		override public function deactivate():void		{			super.deactivate();		}						/**		 * Updates the screen. Call this method whenever child objects of the screen		 * need to be updated, e.g. after localization was changed.		 */		override public function update():void		{			super.update();		}						/**		 * Disposes the screen to clean up used resources. This method is called		 * by ScreenManager after the screen finished closing and after it has		 * been removed from the display list.		 */		override public function dispose():void		{			super.removeEventListeners();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Sets up the class. This method sets up all class properties which		 * should be available right after instantiation and normally would be		 * placed into the constructor. The purpose for this method is to be		 * delegated from the constructor to initiate class setup because code		 * in the constructor is not optimized by the compiler. This method		 * should never be called manually as it is supposed to be called only		 * once during object lifetime.		 * 		 * @private		 */		override protected function setup():void		{			super.setup();		}						/**		 * Creates all display object children that the screen contains.		 * @private		 */		override protected function createChildren():void		{			super.createChildren();						var shape:RectangleShape = new RectangleShape(1024, 640, 0xFF0000);			addChild(shape);		}				/**		 * Adds event listeners for the screen's child objects.		 * @private		 */		override protected function addEventListeners():void		{			super.addEventListeners();		}						/**		 * Removes event listeners from the screen's child objects.		 * @private		 */		override protected function removeEventListeners():void		{			super.removeEventListeners();		}	}}