/* * hexcomps * Copyright (C) 2007 Hexagon Star Softworks * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.flex.controls{	import mx.controls.TextArea;	import mx.core.ScrollPolicy;	import mx.events.FlexEvent;			/**	 * Logger Class	 * @author Sascha Balkau	 */	public class Logger extends TextArea	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				public static const DEBUG:String	= "debug";		public static const INFO:String	= "info";		public static const WARN:String	= "warn";		public static const ERROR:String	= "error";		public static const FATAL:String	= "fatal";						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _isComplete:Boolean = false;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new Logger instance.		 */		public function Logger()		{			super();			clear();			addEventListener(FlexEvent.CREATION_COMPLETE, onCreationComplete);		}						/**		 * log		 */		public function log(message:String, level:String = "info"):void		{			var l:String = "<b>[" + level.toUpperCase() + "]</b>";			htmlText += "<" + level + ">" + l + " " + convertTags(message) + "</" + level + ">";			if (_isComplete) validateProperties();		}						/**		 * clear		 */		public function clear():void		{			text = "";			htmlText = "<body>";			if (_isComplete) validateProperties();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function set scrollPosition(v:int):void		{			validateNow();			if (v == -1) verticalScrollPosition = textHeight;			else verticalScrollPosition = v;		}				public function get textAsHTML():String		{			return htmlText + "</body>";		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				protected function onCreationComplete(e:FlexEvent):void		{			removeEventListener(FlexEvent.CREATION_COMPLETE, onCreationComplete);			_isComplete = true;		}				protected function onUpdateComplete(e:FlexEvent):void		{			scrollPosition = -1;		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Converts all occurances of HTML special characters and braces.		 * @private		 * 		 * @param s        String to convert Tags in.		 * @param stripCRs true if CR's should be stripped from String.		 */		protected function convertTags(s:String, stripCRs:Boolean = false):String		{			if (stripCRs) s = s.replace(/\\r/g, "");			return s.replace(/&amp;/gi, "&amp;amp;")				.replace(/&quot;/gi, "&amp;quot;")				.replace(/&lt;/gi, "&amp;lt;")				.replace(/&gt;/gi, "&amp;gt;")				.replace(/</gi, "&lt;")				.replace(/>/gi, "&gt;");		}						/**		 * createChildren		 * @private		 */		override protected function createChildren():void		{			super.createChildren();						editable = false;			focusEnabled = false;			horizontalScrollPolicy = ScrollPolicy.AUTO;			verticalScrollPolicy = ScrollPolicy.AUTO;			addEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);		}	}}