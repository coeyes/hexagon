/* * hexcomps * Copyright (C) 2007 Hexagon Star Softworks * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.flex.containers{	import com.hexagonstar.flex.controls.FlexButton;		import mx.containers.Panel;	import mx.core.Application;	import mx.core.UIComponent;	import mx.events.CloseEvent;	import mx.events.DragEvent;	import mx.events.FlexEvent;	import mx.managers.CursorManager;	import mx.managers.CursorManagerPriority;		import flash.display.DisplayObject;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.geom.Rectangle;		[Event(name="panelMove", type="flash.events.Event")]	[Event(name="panelMaximize", type="flash.events.Event")]	[Event(name="panelRestore", type="flash.events.Event")]	[Event(name="panelResize", type="flash.events.Event")]			/**	 * FlexPanel Class	 * @author Sascha Balkau	 */	public class FlexPanel extends Panel	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				public static const MOVE:String		= "panelMove";		public static const MAXIMIZE:String	= "panelMaximize";		public static const RESTORE:String	= "panelRestore";		public static const RESIZE:String	= "panelResize";				private static const SIDE_OTHER:Number	= 0;		private static const SIDE_TOP:Number		= 1;		private static const SIDE_BOTTOM:Number	= 2;		private static const SIDE_LEFT:Number	= 4;		private static const SIDE_RIGHT:Number	= 8;				[Embed(source="../assets/cursor_verticalResize.png")]		private static const VERTICAL:Class;		[Embed(source="../assets/cursor_horizontalResize.png")]		private static const HORIZONTAL:Class;		[Embed(source="../assets/cursor_leftObliqueResize.png")]		private static const LEFT_OBLIQUE:Class;		[Embed(source="../assets/cursor_rightObliqueResize.png")]		private static const RIGHT_OBLIQUE:Class;						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected static var _resizeObj:FlexPanel;		protected static var _resizeMargin:Number = 4;		protected static var _mouseState:Number = 0;		protected static var _cursorType:Class = null;				protected var _resizeable:Boolean = true;		protected var _dragable:Boolean = true;		protected var _maximized:Boolean = false;		protected var _showCloseButton:Boolean = false;		protected var _showMaximizeButton:Boolean = false;		protected var _minWidth:int = 200;		protected var _minHeight:int = 100;				protected var _isResizing:Boolean = false;		protected var _noDrag:Boolean = false;				protected var _boundTop:int = 0;		protected var _boundBottom:int = 0;		protected var _boundLeft:int = 0;		protected var _boundRight:int = 0;				protected var _oW:Number = 0;		protected var _oH:Number = 0;		protected var _oX:Number = 0;		protected var _oY:Number = 0;		protected var _oP:Point;				protected var _appParent:DisplayObject;		protected var _titleBar:UIComponent;		protected var _maxButton:FlexButton;		protected var _closeButton:FlexButton;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new FlexPanel instance.		 */		public function FlexPanel()		{			super();						_appParent = Application.application["parent"];			addEventListener(FlexEvent.CREATION_COMPLETE, onCreationComplete);		}						/**		 * Centers the Panel on the Screen.		 */		public function center():void		{			x = (screen.width / 2) - (width / 2);			y = (screen.height / 2) - (height / 2);		}				/**		 * Closes the Panel. Override this method in sub classes!		 */		public function close():void		{			removeListeners();			dispatchEvent(new CloseEvent(CloseEvent.CLOSE));		}						/**		 * Returns a String Representation of FlexPanel.		 * 		 * @return A String Representation of FlexPanel.		 */		override public function toString():String		{			return "[FlexPanel]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				[Bindable]		public function set showCloseButton(v:Boolean):void		{			_showCloseButton = v;		}				public function get showCloseButton():Boolean		{			return _showCloseButton;		}				[Bindable]		public function set showMaximizeButton(v:Boolean):void		{			_showMaximizeButton = v;		}				public function get showMaximizeButton():Boolean		{			return _showMaximizeButton;		}				[Bindable]		public function set resizeable(v:Boolean):void		{			_resizeable = v;		}				public function get resizeable():Boolean		{			return _resizeable;		}				[Bindable]		public function set dragable(v:Boolean):void		{			_dragable = v;		}				public function get dragable():Boolean		{			return _dragable;		}				public function get maximized():Boolean		{			return _maximized;		}				[Bindable]		public function set maximized(v:Boolean):void		{			_maximized = v;		}				[Bindable]		public function set minimumWidth(v:int):void		{			_minWidth = v;		}				public function get minimumWidth():int		{			return _minWidth;		}				[Bindable]		public function set minimumHeight(v:int):void		{			_minHeight = v;		}				public function get minimumHeight():int		{			return _minHeight;		}				public function get boundTop():int		{			return _boundTop;		}				[Bindable]		public function set boundTop(v:int):void		{			_boundTop = v;		}				public function get boundBottom():int		{			return _boundBottom;		}				[Bindable]		public function set boundBottom(v:int):void		{			_boundBottom = v;		}				public function get boundLeft():int		{			return _boundLeft;		}				[Bindable]		public function set boundLeft(v:int):void		{			_boundLeft = v;		}				public function get boundRight():int		{			return _boundRight;		}				[Bindable]		public function set boundRight(v:int):void		{			_boundRight = v;		}				public function get resizeMargin():int		{			return _resizeMargin;		}				[Bindable]		public function set resizeMargin(v:int):void		{			_resizeMargin = v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				protected function onCreationComplete(e:FlexEvent):void		{			removeEventListener(FlexEvent.CREATION_COMPLETE, onCreationComplete);			checkBoundaries();			initPosition(this);			addListeners();		}						protected function onPanelClick(e:MouseEvent):void		{			_titleBar.removeEventListener(MouseEvent.MOUSE_MOVE, onDragMove);			if (parent) parent.setChildIndex(this, parent.numChildren - 1);		}				protected function onDragStart(e:MouseEvent):void		{			/* Only allow dragging if we are not over any Buttons */			if (!_noDrag)			{				_titleBar.addEventListener(MouseEvent.MOUSE_MOVE, onDragMove);			}		}						protected function onDragMove(e:MouseEvent):void		{			if (!_isResizing && width < screen.width)			{				_appParent.addEventListener(MouseEvent.MOUSE_UP, onDragStop);				_titleBar.addEventListener(DragEvent.DRAG_DROP,onDragStop);				if (parent) parent.setChildIndex(this, parent.numChildren - 1);				startDrag(false, new Rectangle(_boundLeft, _boundTop,					(screen.width - _boundRight - _boundLeft) - width,					(screen.height - _boundBottom - _boundTop) - height));			}		}						protected function onDragStop(e:MouseEvent):void		{			_titleBar.removeEventListener(MouseEvent.MOUSE_MOVE, onDragMove);			stopDrag();			dispatchEvent(new Event(MOVE));		}						protected function onStageResize(e:Event):void		{			checkBoundaries();			if (_maximized)			{				x = _boundLeft;				y = _boundTop;				width = screen.width - _boundRight - _boundLeft;				height = screen.height - _boundBottom - _boundTop;				positionChildren();			}		}						protected function onDoubleClick(e:MouseEvent):void		{			onMaximize();		}								protected function onButtonOver(e:MouseEvent):void		{			_noDrag = true;		}				protected function onButtonOut(e:MouseEvent):void		{			_noDrag = false;		}						protected function onMaximize(e:MouseEvent = null):void		{			if (!_maximized)			{				initPosition(this);				x = _boundLeft;				y = _boundTop;				width = screen.width - _boundRight - _boundLeft;				height = screen.height - _boundBottom - _boundTop;				_maxButton.styleName = "restoreButton";				_maximized = true;				dispatchEvent(new Event(MAXIMIZE));			}			else			{				x = _oX;				y = _oY;				width = _oW;				height = _oH;				_maxButton.styleName = "maximizeButton";				_maximized = false;				dispatchEvent(new Event(RESTORE));			}			checkBoundaries();		}						/**		 * Needs to be called or overriden.		 */		protected function onClose(e:MouseEvent = null):void		{			close();		}						protected function onMouseMove(e:MouseEvent):void		{			/* No resizing allowed if Panel is maximized */			if (!_maximized)			{				if (!_resizeObj)				{					var xp:Number = _appParent.mouseX;					var yp:Number = _appParent.mouseY;										if (xp >= (x + width - _resizeMargin) && yp >= (y + height - _resizeMargin))					{						changeCursor(LEFT_OBLIQUE, -6, -6);						_mouseState = SIDE_RIGHT | SIDE_BOTTOM;					}					else if (xp <= (x + _resizeMargin) && yp <= (y + _resizeMargin))					{						changeCursor(LEFT_OBLIQUE, -6, -6);						_mouseState = SIDE_LEFT | SIDE_TOP;					}					else if (xp <= (x + _resizeMargin) && yp >= (y + height - _resizeMargin))					{						changeCursor(RIGHT_OBLIQUE, -6, -6);						_mouseState = SIDE_LEFT | SIDE_BOTTOM;					}					else if (xp >= (x + width - _resizeMargin) && yp <= (y + _resizeMargin))					{						changeCursor(RIGHT_OBLIQUE, -6, -6);						_mouseState = SIDE_RIGHT | SIDE_TOP;					}					else if (xp >= (x + width - _resizeMargin))					{						changeCursor(HORIZONTAL, -9, -9);						_mouseState = SIDE_RIGHT;						}					else if (xp <= (x + _resizeMargin))					{						changeCursor(HORIZONTAL, -9, -9);						_mouseState = SIDE_LEFT;					}					else if (yp >= (y + height - _resizeMargin))					{						changeCursor(VERTICAL, -9, -9);						_mouseState = SIDE_BOTTOM;					}					else if (yp <= (y + _resizeMargin))					{						changeCursor(VERTICAL, -11, -11);						_mouseState = SIDE_TOP;					}					else					{						_mouseState = SIDE_OTHER;						changeCursor(null, 0, 0);					}				}			}		}						protected function onMouseOut(e:MouseEvent):void		{			if (!_resizeObj)			{				changeCursor(null, 0, 0);				_isResizing = false;			}		}						protected function onMouseDown(e:MouseEvent):void		{			if (_mouseState != SIDE_OTHER)			{				onPanelClick(e);				_resizeObj = e.currentTarget as FlexPanel;				initPosition(_resizeObj);				_oP.x = _resizeObj.mouseX;				_oP.y = _resizeObj.mouseY;				_oP = this.localToGlobal(_oP);				_isResizing = true;			}		}						protected function onMouseUp(e:MouseEvent):void		{			if (_resizeObj)			{				initPosition(_resizeObj);				_isResizing = false;				dispatchEvent(new Event(RESIZE));			}			_resizeObj = null;		}						protected function onResize(e:MouseEvent):void		{			// TODO Add condition to not allow dragging over the bounds (right & bottom)!			if (_resizeObj)			{				_resizeObj.stopDragging();								var ro:FlexPanel = _resizeObj;				var xpl:Number = _appParent.mouseX - _resizeObj._oP.x;				var ypl:Number = _appParent.mouseY - _resizeObj._oP.y;				var mw:int = _minWidth;				var mh:int = _minHeight;								switch (_mouseState)				{					case SIDE_RIGHT:						ro.width = ro._oW + xpl > mw ? ro._oW + xpl : mw;						break;					case SIDE_LEFT:						ro.x = xpl < ro._oW - mw ? ro._oX + xpl : ro.x;						ro.width = ro._oW - xpl > mw ? ro._oW - xpl : mw;						break;					case SIDE_BOTTOM:						ro.height = ro._oH + ypl > mh ? ro._oH + ypl : mh;						break;					case SIDE_TOP:						ro.y = ypl < ro._oH - mh ? ro._oY + ypl : ro.y;						ro.height = ro._oH - ypl > mh ? ro._oH - ypl : mh;						break;					case SIDE_RIGHT | SIDE_BOTTOM:						ro.width = ro._oW + xpl > mw ? ro._oW + xpl : mw;						ro.height = ro._oH + ypl > mh ? ro._oH + ypl : mh;						break;					case SIDE_LEFT | SIDE_TOP:						ro.x = xpl < ro._oW - mw ? ro._oX + xpl : ro.x;						ro.y = ypl < ro._oH - mh ? ro._oY + ypl : ro.y;						ro.width = ro._oW - xpl > mw ? ro._oW - xpl : mw;						ro.height = ro._oH - ypl > mh ? ro._oH - ypl : mh;						break;					case SIDE_LEFT | SIDE_BOTTOM:						ro.x = xpl < ro._oW - mw ? ro._oX + xpl : ro.x;						ro.width = ro._oW - xpl > mw ? ro._oW - xpl : mw;						ro.height = ro._oH + ypl > mh ? ro._oH + ypl : mh;						break;					case SIDE_RIGHT | SIDE_TOP:						ro.y = ypl < ro._oH - mh ? ro._oY + ypl : ro.y;						ro.width = ro._oW + xpl > mw ? ro._oW + xpl : mw;						ro.height = ro._oH - ypl > mh ? ro._oH - ypl : mh;						break;				}			}			positionChildren();		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * initPosition		 * @private		 */		protected static function initPosition(obj:FlexPanel):void		{			obj._oH = obj.height;			obj._oW = obj.width;			obj._oX = obj.x;			obj._oY = obj.y;		}						/**		 * Remove the current cursor and set an image.		 * 		 * @param type The image class		 * @param xOffset The xOffset of the cursorimage		 * @param yOffset The yOffset of the cursor image		 */		public static function changeCursor(type:Class, xOffset:Number = 0, yOffset:Number = 0):void		{			if (_cursorType != type)			{				_cursorType = type;				CursorManager.removeCursor(CursorManager.currentCursorID);								if (type != null)				{					CursorManager.setCursor(type, CursorManagerPriority.MEDIUM, xOffset, yOffset);				}			}		}						/**		 * createChildren		 * @private		 */		override protected function createChildren():void 		{			super.createChildren();			_titleBar = super.titleBar;						if (_resizeable)			{				_oP = new Point();			}						if (_showMaximizeButton)			{				doubleClickEnabled = true;				_maxButton = new FlexButton();				_maxButton.width = 16;				_maxButton.height = 16;				_maxButton.styleName = "maximizeButton";				_titleBar.addChild(_maxButton);			}						if (_showCloseButton)			{				_closeButton = new FlexButton();				_closeButton.width = 16;				_closeButton.height = 16;				_closeButton.styleName = "closeButton";				_titleBar.addChild(_closeButton);			}		}						/**		 * checkBoundaries		 * @private		 */		protected function checkBoundaries():void		{			/* Check that the minimum size is not out of bounds */			var bw:int = screen.width - _boundRight - _boundLeft;			var bh:int = screen.height - _boundBottom - _boundTop;			if (_minWidth < 0) _minWidth = 0;			else if (_minWidth > bw) _minWidth = bw;			if (_minHeight < 0) _minHeight = 0;			else if (_minHeight > bh) _minWidth = bh;						/* Check that the Panel size is not overlapping the boundaries */			if (width < _minWidth) width = _minWidth;			else if (width > bw) width = bw;			if (height < _minHeight) height = _minHeight;			else if (height > bh) height = bh;						/* Check that the Panel Position is inside the boundaries */			var px:int = screen.width - _boundRight - width;			var py:int = screen.height - _boundBottom - height;			if (x < _boundLeft) x = _boundLeft;			else if (x > px) x = px;			if (y < _boundTop) y = _boundTop;			else if (y > py) y = py;						positionChildren();		}						/**		 * positionChildren		 * @private		 */		protected function positionChildren():void		{			if (_showMaximizeButton)			{				_maxButton.y = 6;				if (_showCloseButton)					_maxButton.x = unscaledWidth - (_maxButton.width * 2) - 10;				else					_maxButton.x = unscaledWidth - _maxButton.width - 8;			}						if (_showCloseButton)			{				_closeButton.y = 6;				_closeButton.x = unscaledWidth - _closeButton.width - 8;			}		}						/**		 * addListeners		 * @private		 */		protected function addListeners():void		{			addEventListener(MouseEvent.CLICK, onPanelClick);						if (_resizeable)			{				addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);				addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);				addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);				_appParent.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);				_appParent.addEventListener(MouseEvent.MOUSE_MOVE, onResize);			}						if (_dragable)			{				_titleBar.addEventListener(MouseEvent.MOUSE_DOWN, onDragStart);			}						if (_showMaximizeButton)			{				_titleBar.addEventListener(MouseEvent.DOUBLE_CLICK, onDoubleClick);				_maxButton.addEventListener(MouseEvent.MOUSE_OVER, onButtonOver);				_maxButton.addEventListener(MouseEvent.MOUSE_OUT, onButtonOut);				_maxButton.addEventListener(MouseEvent.CLICK, onMaximize);				stage.addEventListener(Event.RESIZE, onStageResize);			}						if (_showCloseButton)			{				_closeButton.addEventListener(MouseEvent.MOUSE_OVER, onButtonOver);				_closeButton.addEventListener(MouseEvent.MOUSE_OUT, onButtonOut);				_closeButton.addEventListener(MouseEvent.CLICK, onClose);			}		}						/**		 * removeListeners		 * @private		 */		protected function removeListeners():void		{			removeEventListener(MouseEvent.CLICK, onPanelClick);						if (_resizeable)			{				_appParent.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);				_appParent.removeEventListener(MouseEvent.MOUSE_MOVE, onResize);			}			if (_showMaximizeButton)			{				stage.removeEventListener(Event.RESIZE, onStageResize);			}		}	}}