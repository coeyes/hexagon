/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.ui.controls{	import com.hexagonstar.ui.core.InvalidationType;	import com.hexagonstar.ui.core.UIComponent;	import com.hexagonstar.ui.managers.IFocusManagerComponent;		import flash.display.DisplayObject;			[Style(name="emphasizedSkin", type="Class")]	[Style(name="emphasizedPadding", type="Number", format="Length")]		/**	 * The Button component represents a commonly used rectangular button. 	 * Button components display a text label, an icon, or both.	 *	 * <p>A Button component is typically associated with an event handler	 * method that listens for a <code>click</code> event and performs the 	 * specified task after the <code>click</code> event is dispatched. When  	 * the user clicks an enabled button, the button dispatches the <code>click</code> 	 * and <code>buttonDown</code> events. Even if it is not enabled, a button 	 * dispatches other events including <code>mouseMove</code>, <code>mouseOver</code>,	 * <code>mouseOut</code>, <code>rollOver</code>, <code>rollOut</code>, <code>	 * mouseDown</code>, and <code>mouseUp</code>.</p>	 *	 * <p>You can change the appearance of the button by associating a different	 * skin with each button state. A Button component can also be set to	 * function as a push button or a toggle button. </p>	 */	public class Button extends LabelButton implements IFocusManagerComponent	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _emphasizedBorder:DisplayObject;		protected var _isEmphasized:Boolean = false;				private static var defaultStyles:Object =		{			emphasizedSkin:		"ButtonEmphasized",			emphasizedPadding:	0		};						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new Button instance.		 */		public function Button(x:Number = 0,								  y:Number = 0,								  width:Number = 0,								  height:Number = 0,								  label:String = null)		{			super(x, y, width, height, label);		}						/**		 * @copy com.hexagonstar.ui.core.UIComponent#drawFocus()		 * @internal Added logic to resize focusRect if button has emphasis		 */		override public function drawFocus(focused:Boolean):void		{			super.drawFocus(focused);						/* Add focusRect to stage, and resize */			if (focused)			{				/* Add the emphasis padding to the focus padding if appropriate */				var padding:Number = Number(getStyleValue("emphasizedPadding"));				if (padding < 0 || !_isEmphasized) padding = 0;								var focusPadding:Number = getStyleValue("focusRectPadding") as Number;				focusPadding = (!focusPadding) ? 2 : focusPadding;				focusPadding += padding;								_focusRect.x = -focusPadding;				_focusRect.y = -focusPadding;				_focusRect.width = width + (focusPadding * 2);				_focusRect.height = height + (focusPadding * 2);			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @copy com.hexagonstar.ui.core.UIComponent#getStyleDefinition()		 *		 * @see com.hexagonstar.ui.core.UIComponent#getStyle() UIComponent#getStyle()		 * @see com.hexagonstar.ui.core.UIComponent#setStyle() UIComponent#setStyle()		 * @see com.hexagonstar.ui.managers.StyleManager StyleManager		 */		public static function get styleDefinition():Object		{			return UIComponent.mergeStyles(LabelButton.styleDefinition, defaultStyles);		}						/**		 * Gets or sets a Boolean value that indicates whether a border is drawn 		 * around the Button component when the button is in its up state. A value 		 * of <code>true</code> indicates that the button is surrounded by a border 		 * when it is in its up state; a value of <code>false</code> indicates that 		 * it is not.		 * 		 * @see #style:emphasizedPadding		 * @see #style:emphasizedSkin		 */		public function get emphasized():Boolean		{			return _isEmphasized;		}				public function set emphasized(v:Boolean):void		{			_isEmphasized = v;			invalidate(InvalidationType.STYLES);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		override protected function draw():void		{			if (isInvalid(InvalidationType.STYLES) || isInvalid(InvalidationType.SIZE))				drawEmphasized();						super.draw();						if (_emphasizedBorder) setChildIndex(_emphasizedBorder, numChildren - 1);		}						/**		 * @private		 */		protected function drawEmphasized():void		{			if (_emphasizedBorder)			{				removeChild(_emphasizedBorder);				_emphasizedBorder = null;			}						if (!_isEmphasized) return;						var style:Object = getStyleValue("emphasizedSkin");						if (style) _emphasizedBorder = getDisplayObjectInstance(style);			if (_emphasizedBorder)			{				addChildAt(_emphasizedBorder, 0);				var padding:Number = getStyleValue("emphasizedPadding") as Number;				_emphasizedBorder.x = _emphasizedBorder.y = -padding;				_emphasizedBorder.width = width + padding * 2;				_emphasizedBorder.height = height + padding * 2;			}		}	}}