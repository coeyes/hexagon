/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.env.command{	import com.hexagonstar.env.event.CommandCompleteEvent;	import com.hexagonstar.env.event.CommandErrorEvent;	import com.hexagonstar.env.event.CommandProgressEvent;			[Event(name="complete", type="com.hexagonstar.env.event.CommandCompleteEvent")]	[Event(name="progress", type="com.hexagonstar.env.event.CommandProgressEvent")]	[Event(name="error", type="com.hexagonstar.env.event.CommandErrorEvent")]			/**	 * A CompositeCommand is a composite command that consists of several single	 * commands which are executed in sequential order.	 * 	 * @author Sascha Balkau	 */	public class CompositeCommand extends Command implements ICommandListener	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _progress:int;		protected var _progressMessage:String;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new MacroCommand instance.		 */		public function CompositeCommand(listener:ICommandListener)		{			super(listener);		}						/**		 * Executes the macro command. Abstract method. Be sure to call super.execute()		 * first in subclassed execute methods.		 */ 		override public function execute():void		{			super.execute();			_progress = 0;			_progressMessage = "";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * TODO Not really the optimum! This getter should be static!		 * @return the name identifier of the command. Must be overriden in sub classes!		 */		override public function get name():String		{			return "compositeCommand";		}						/**		 * @return The command's progress.		 */		public function get progress():int		{			return _progress;		}				/**		 * @return The Message associated to the command's progress.		 */		public function get progressMessage():String		{			return _progressMessage;		}				////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		public function onCommandProgress(e:CommandProgressEvent):void		{		}						/**		 * @private		 */		public function onCommandComplete(e:CommandCompleteEvent):void		{		}						/**		 * @private		 */		public function onCommandError(e:CommandErrorEvent):void		{		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Notify listeners that the command has updated progress.		 * @private		 */		protected function notifyProgress(progressMsg:String = null):void		{			_progress++;			if (progressMsg) _progressMessage = progressMsg;			dispatchEvent(new CommandProgressEvent(this));		}						/**		 * Notify listeners that an error has occured executing the command.		 * @private		 */		override protected function notifyError(errorMsg:String):void		{			super.notifyError(errorMsg);		}	}}