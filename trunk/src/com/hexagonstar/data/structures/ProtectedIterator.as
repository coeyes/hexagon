/* * hexagon framework - Multi-Purpose ActionScript 3 Framework. * Copyright (C) 2007 Hexagon Star Softworks *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/ FRAMEWORK_/ *            \__/  \__/ * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.data.structures{	import com.hexagonstar.env.exception.UnsupportedOperationException;			/**	 * The ProtectedIterator is used to iterate over any data structure	 * without being able to remove its elements. This class acts as a	 * wrapper for any class that implements the Iterator interface and	 * wants to be protected.	 */	public class ProtectedIterator implements IIterator	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Holds the iterator this protected iterator delegates to.		 * @private		 */		private var _iterator:IIterator;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Constructs a new ProtectedIterator instance.		 * <p>This iterator forwards all functionality to the wrapped		 * specified iterator, except the removal of the current element.		 * 		 * @param iterator The iterator to protect.		 */		public function ProtectedIterator(iterator:IIterator)		{			_iterator = iterator;		}						/**		 * This method always throws an UnsupportedOperationException because		 * this method is not supported by this iterator and has the duty to		 * not let the removal of elements happen.		 *		 * @throws com.hexagonstar.env.exception.UnsupportedOperationException		 */		public function remove():*		{			throw new UnsupportedOperationException("This Iterator does not allow"				+ " the removal of elements.");			return undefined;		}						/**		 * Resets the iterator to its default index. After this operation returns		 * the iterated elements start from the beginning again as if the iterator		 * has been started for the first time.		 */		 public function reset():void		 {		 	_iterator.reset();		 }		 		 		////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns whether there are more elements to iterate over. For any		 * special functionality that may be performed, refer to the wrapped		 * iterator that has been specified on construction. This method		 * simply delegates to the wrapped iterator.		 *		 * @return true if there is a next element to iterate over,		 *          otherwise false.		 */		public function get hasNext():Boolean		{			return _iterator.hasNext;		}						/**		 * Returns the next element. For any special functionality that may be		 * performed refer to the wrapped iterator that has been specified on		 * construction. This method simply delegates to the wrapped iterator.		 *		 * @return the next iterated element.		 */		public function get next():*		{			return _iterator.next;		}	}}