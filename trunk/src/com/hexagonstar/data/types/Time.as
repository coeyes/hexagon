/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.data.types{	import com.hexagonstar.core.BasicClass;	import com.hexagonstar.data.constants.TimeUnit;			/**	 * Time class	 */	public class Time extends BasicClass	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Constant used to determine the time format as days.		 */		public static const FORMAT_DAYS:String = "days";				/**		 * Constant used to determine the time format as hours.		 */		public static const FORMAT_HOURS:String = "hours";				/**		 * Constant used to determine the time format as minutes.		 */		public static const FORMAT_MINUTES:String = "minutes";				/**		 * Constant used to determine the time format as seconds.		 */		public static const FORMAT_SECONDS:String = "seconds";						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _days:Number;		protected var _hours:Number;		protected var _minutes:Number;		protected var _seconds:Number;		protected var _milliSeconds:Number;		protected var _ms:Number;		protected var _doEval:Boolean;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new Time instance.		 * 	     * @param time   The size of the time difference for the specified format.	     * @param format "d"/"h"/"m"/"s"/"ms" for the unit of the time amount,	     * 	              it uses milliseconds as default.		 */		public function Time(time:Number, format:String = "ms")		{			setValue(time, format);		}						/**		 * setValue		 * 	     * @param time   The size of the time difference for the specified format.	     * @param format "d"/"h"/"m"/"s"/"ms" for the unit of the time amount,	     * 	              it uses milliseconds as default.	     * @return A reference to the Time instance.		 */		public function setValue(time:Number, format:String = "ms"):Time		{			if (time == Number.NEGATIVE_INFINITY)				time = Number.NEGATIVE_INFINITY;			else if (time == Number.POSITIVE_INFINITY)				time = Number.MAX_VALUE;						switch (format)			{				case Time.FORMAT_DAYS:					_ms = time * TimeUnit.DAY;					break;				case Time.FORMAT_HOURS:					_ms = time * TimeUnit.HOUR;					break;				case Time.FORMAT_MINUTES:					_ms = time * TimeUnit.MINUTE;					break;				case Time.FORMAT_SECONDS:					_ms = time * TimeUnit.SECOND;					break;				default:					_ms = time;			}			_doEval = true;			return this;		}						/**		 * Adds the specified time to the current time.		 *  		 * @param time The time difference to be added to the current time.		 * @return A new instance with the resulting amount of time.		 */		public function plus(time:Time):Time		{			return new Time(_ms + time.valueOf());		}						/**		 * Subtracts the specified time from the current time.		 *  		 * @param time The time difference to be subtracted from the current time.		 * @return A new instance with the resulting amount of time.		 */		public function minus(time:Time):Time		{			return new Time(_ms - time.valueOf());		}						/**		 * Returns a well formatted String representation of the time value.		 * 		 * @return The time difference as string.		 */		override public function toString(...args):String		{			var result:String;			var value:int = valueOf();			if (value < TimeUnit.SECOND)				result = getMilliSeconds() + TimeUnit.SYMBOL_MILLISECOND;			else if (value < TimeUnit.MINUTE)				result = getSeconds() + TimeUnit.SYMBOL_SECOND;			else if (value < TimeUnit.HOUR)				result = getMinutes() + TimeUnit.SYMBOL_MINUTE;			else if (value < TimeUnit.DAY)				result = getHours() + TimeUnit.SYMBOL_HOUR;			else				result = getDays() + TimeUnit.SYMBOL_DAY;			return result;		}						/**		 * Returns the value of the time difference in milliseconds.		 * 		 * @return The time value in milliseconds.		 */		public function valueOf():Number		{			return _ms;		}						/**		 * Returns the amount of milliseconds that are contained within the time.		 * If the round argument is 0 it will not round the resulting value.		 * 		 * @param decimals The number of decimal spaces that the returned time has.		 * @return The time difference in milliseconds.		 */		public function getMilliSeconds(decimals:int = 0):Number		{			if (_doEval) evaluate();			return floor(_milliSeconds, decimals);		}						/**		 * Returns the amount of seconds that are contained within the time.		 * If the round argument is 0 it will not round the resulting value.		 * 		 * @param decimals The number of decimal spaces that the returned time has.		 * @return The time difference in seconds.		 */		public function getSeconds(decimals:int = 0):Number		{			if (_doEval) evaluate();			return floor(_seconds, decimals);		}						/**		 * Returns the amount of minutes that are contained within the time.		 * If the round argument is 0 it will not round the resulting value.		 * 		 * @param decimals The number of decimal spaces that the returned time has.		 * @return The time difference in minutes.		 */		public function getMinutes(decimals:int = 0):Number		{			if (_doEval) evaluate();			return floor(_minutes, decimals);		}						/**		 * Returns the amount of hours that are contained within the time.		 * If the round argument is 0 it will not round the resulting value.		 * 		 * @param decimals The number of decimal spaces that the returned time has.		 * @return The time difference in hours.		 */		public function getHours(decimals:int = 0):Number		{			if (_doEval) evaluate();			return floor(_hours, decimals);		}						/**		 * Returns the amount of days that are contained within the time.		 * If the round argument is 0 it will not round the resulting value.		 * 		 * @param decimals The number of decimal spaces that the returned time has.		 * @return The time difference in days.		 */		public function getDays(decimals:int = 0):Number		{			if (_doEval) evaluate();			return floor(_days, decimals);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get inMilliSeconds():Number		{			return valueOf();		}				public function get inSeconds():Number		{			return (_ms / TimeUnit.SECOND);		}				public function get inMinutes():Number		{			return (_ms / TimeUnit.MINUTE);		}				public function get inHours():Number		{			return (_ms / TimeUnit.HOUR);		}				public function get inDays():Number		{			return (_ms / TimeUnit.DAY);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Splits the time distance from ms (source value) into the different units.		 * 		 * @private		 */		protected function evaluate():void		{			var negative:int = (_ms >= 0) ? 1 : -1;			var rest:Number = _ms;						_days = rest / TimeUnit.DAY;			rest -= negative * Math.floor(_days) * TimeUnit.DAY;						_hours = rest / TimeUnit.HOUR;			rest -= negative * Math.floor(_hours) * TimeUnit.HOUR;						_minutes = rest / TimeUnit.MINUTE;			rest -= negative * Math.floor(_minutes) * TimeUnit.MINUTE;						_seconds = rest / TimeUnit.SECOND;			rest -= negative * Math.floor(_seconds) * TimeUnit.SECOND;						_milliSeconds = rest;						_doEval = false;		}						/**		 * Used internally by the class to round values.		 * 		 * @private		 */		protected function floor(n:Number, dec:int = 0):Number		{			var r:Number = Math.pow(10, dec);			return Math.floor(n * r) / r;		}	}}