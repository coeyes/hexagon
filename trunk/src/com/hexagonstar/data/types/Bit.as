/* * hexagon framework - Multi-Purpose ActionScript 3 Framework. * Copyright (C) 2007 Hexagon Star Softworks *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/ FRAMEWORK_/ *            \__/  \__/ * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.data.types{	import com.hexagonstar.core.BasicClass;	import com.hexagonstar.data.constants.DataUnit;				/**	 * The Bit class is representing a bit value.	 * 	 * <p>This class can be used for a different kind of formatting of a bit	 * value. It allows to access the value as bit, kilo-bit, mega-bit, giga-bit,	 * tera-bit, byte, kilo-byte, mega-byte, giga-byte and tera-byte.	 */	public class Bit extends BasicClass	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Stores the bit value.		 * @private		 */		protected var _value:Number;				/**		 * Stores how many decimal places the bit value has.		 * @private		 */		protected var _decimals:int;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Constructs a new Bit instance.		 * 		 * @param bit      The bit value for the Bit.		 * @param decimals Determines how many decimal places the bit value should have.		 */		public function Bit(bits:Number = 0, decimals:int = 2)		{			_value = bits;			_decimals = decimals;		}						/**		 * Returns a well formatted string representation of the bit value.		 * This method uses the next matching size and adds the matching		 * unit's Shortname to it.		 * 		 * @example		 * <p><pre>		 *    new Bit(1).toString();          // 1b		 *    new Bit(1234).toString();       // 1.21kb		 *    new Bit(15002344).toString();   // 14.31Mb		 * </pre>		 * 		 * @return Bits in the next matching size with the matching unit.		 */		override public function toString(...args):String		{			var result:String;			var v:int = bit;			if (v < DataUnit.KILOBIT)				result = bit + DataUnit.SYMBOL_BIT;			else if (v < DataUnit.MEGABIT)				result = kiloBit + DataUnit.SYMBOL_KILOBIT;			else if (v < DataUnit.GIGABIT)				result = megaBit + DataUnit.SYMBOL_MEGABIT;			else if (v < DataUnit.TERABIT)				result = gigaBit + DataUnit.SYMBOL_GIGABIT;			else				result = teraBit + DataUnit.SYMBOL_TERABIT;			return result;		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get value():Number		{			return _value;		}				public function set value(v:Number):void		{			_value = v;		}				public function get decimals():int		{			return _decimals;		}				public function set decimals(v:int):void		{			_decimals = v;		}				public function get bit():Number		{			if (isNaN(_value)) _value = 0;			return _value;		}				public function get kiloBit():Number		{			return round(bit / DataUnit.KILOBIT);		}				public function get megaBit():Number		{			return round(bit / DataUnit.MEGABIT);		}				public function get gigaBit():Number		{			return round(bit / DataUnit.GIGABIT);		}				public function get teraBit():Number		{			return round(bit / DataUnit.TERABIT);		}				public function get bytes():Number		{			return round(bit / DataUnit.BYTE);		}				public function get kiloBytes():Number		{			return round(bit / DataUnit.KILOBYTE);		}				public function get megaBytes():Number		{			return round(bit / DataUnit.MEGABYTE);		}				public function get gigaBytes():Number		{			return round(bit / DataUnit.GIGABYTE);		}				public function get teraBytes():Number		{			return round(bit / DataUnit.TERABYTE);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Used internally by the class to round values.		 * @private		 */		protected function round(n:Number):Number		{			var r:Number = Math.pow(10, _decimals);			return Math.round(n * r) / r;		}	}}