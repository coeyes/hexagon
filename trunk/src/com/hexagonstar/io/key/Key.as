/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.key{	import com.hexagonstar.display.StageReference;	import com.hexagonstar.env.event.KeyCombinationEvent;	import com.hexagonstar.env.event.RemovableEventDispatcher;	import com.hexagonstar.env.exception.UnsupportedOperationException;		import flash.display.Stage;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.utils.Dictionary;			[Event(name="keyDown",	type="flash.events.KeyboardEvent")]	[Event(name="keyUp",	type="flash.events.KeyboardEvent")]	[Event(name="down",		type="com.hexagonstar.env.event.KeyCombinationEvent")]	[Event(name="release",	type="com.hexagonstar.env.event.KeyCombinationEvent")]	[Event(name="sequence",	type="com.hexagonstar.env.event.KeyCombinationEvent")]			/**	 * Key class that simplifies listening to global key strokes and adds additional	 * keyboard events. Key enables you to receive events when multiple keys are	 * held/released and when a sequence of keys is pressed.	 */	public class Key extends RemovableEventDispatcher	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected static var _instance:Key;				protected var _keysDown:Dictionary;		protected var _keysTyped:Vector.<uint>;		protected var _combsDown:Vector.<KeyCombination>;		protected var _combs:Vector.<KeyCombination>;		protected var _longestComb:int;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new instance of the class.		 */		public function Key()		{			if (_instance)			{				throw new Error("Tried to instantiate a Singleton through"					+ " it's constructor. Use Key.instance instead!");			}						var stage:Stage = StageReference.stage;			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);			stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);			stage.addEventListener(Event.DEACTIVATE, onDeactivate);						_keysDown = new Dictionary();			_keysTyped = new Vector.<uint>();			_combsDown = new Vector.<KeyCombination>();			_combs = new Vector.<KeyCombination>();			_longestComb = 0;		}						/**		 * Determines if the specified key is down.		 * 		 * @param keyCode The key code value assigned to a specific key or a		 *         Keyboard class constant associated with the key.		 * @return Returns true if key is currently pressed; otherwise false.		 */		public function isDown(keyCode:uint):Boolean		{			return _keysDown[keyCode];		}						/**		 * Sets a key combination to trigger a KeyCombinationEvent.		 * 		 * @param kc A defined KeyCombination object.		 */		public function addKeyCombination(kc:KeyCombination):void		{			var l:int = _combs.length;			while (l--)			{				if (_combs[l].equals(kc)) return;			}						_longestComb = Math.max(_longestComb, kc.keyCodes.length);			_combs.push(kc);		}						/**		 * Removes a key combination from triggering a KeyCombinationEvent.		 * 		 * @param kc A defined KeyCombination object.		 */		public function removeKeyCombination(kc:KeyCombination):void		{			var i:int = -1;			var l:int = _combs.length;						while (l--)			{				if (_combs[l].equals(kc))				{					i = int(l);					break;				}			}						if (i == -1) return;						_combs.splice(i, 1);						if (kc.keyCodes.length == _longestComb)			{				var size:int = 0;				l = _combs.length;				while (l--)				{					size = Math.max(size, _combs[l].keyCodes.length);				}								_longestComb = size;			}		}						/**		 * Throws an UnsupportedOperationException since Key should not		 * be disposed.		 */		override public function dispose():void		{			throw new UnsupportedOperationException("Key should not be disposed!");		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public static function get instance():Key		{			if (!_instance) _instance = new Key();			return _instance;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @sends KeyboardEvent#KEY_DOWN - Dispatched when the user presses a key.		 * @private		 */		protected function onKeyDown(e:KeyboardEvent):void		{			var alreadyDown:Boolean = _keysDown[e.keyCode];			_keysDown[e.keyCode] = true;			_keysTyped.push(e.keyCode);						if (_keysTyped.length > _longestComb) _keysTyped.splice(0, 1);						var l:int = _combs.length;			while (l--)			{				checkTypedKeys(_combs[l]);				if (!alreadyDown) checkDownKeys(_combs[l]);			}						dispatchEvent(e.clone());		}						/**		 * @sends KeyboardEvent#KEY_UP - Dispatched when the user releases a key.		 * @sends KeyComboEvent#RELEASE - Dispatched whens all keys in an added		 * {@link KeyCombo} are no longer being held together at once.		 * @private		 */		protected function onKeyUp(event:KeyboardEvent):void		{			var l:int = _combsDown.length;			while (l--)			{				if (_combsDown[l].keyCodes.indexOf(event.keyCode) != -1)				{					var e:KeyCombinationEvent =						new KeyCombinationEvent(KeyCombinationEvent.RELEASE);					e.keyCombination = _combsDown[l];					_combsDown.splice(l, 1);					dispatchEvent(e);				}			}						delete _keysDown[event.keyCode];			dispatchEvent(event.clone());		}						/**		 * @private		 */		protected function onDeactivate(event:Event):void		{			var l:int = _combsDown.length;			while (l--)			{				var e:KeyCombinationEvent = new KeyCombinationEvent(KeyCombinationEvent.RELEASE);				e.keyCombination = _combsDown[l];				dispatchEvent(e);			}						_combsDown = new Vector.<KeyCombination>();			_keysDown = new Dictionary();		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @sends KeyComboEvent#SEQUENCE - Dispatched when all keys in an added		 * KeyCombination are typed in order.		 * @private		 */		protected function checkTypedKeys(kc:KeyCombination):void		{			var c1:Vector.<uint> = kc.keyCodes;			var c2:Vector.<uint> = _keysTyped.slice(-kc.keyCodes.length);			var l:int = c1.length;			var isEqual:Boolean = true;						/* Check for equality */			if (l != c2.length)			{				isEqual = false;			}			else			{				while (l--)				{					if (c1[l] != c2[l]) isEqual = false;				}			}						if (isEqual)			{				var e:KeyCombinationEvent = new KeyCombinationEvent(KeyCombinationEvent.SEQUENCE);				e.keyCombination = kc;				dispatchEvent(e);			}		}				/**		 * @sends KeyComboEvent#DOWN - Dispatched when all keys in an added		 * {@link KeyCombo} are held down together at once.		 * @private		 */		protected function checkDownKeys(kc:KeyCombination):void		{			var uniqueCombination:Vector.<uint> = removeDuplicates(kc.keyCodes);			var i:int = uniqueCombination.length;						while (i--)			{				if (!isDown(uniqueCombination[i])) return;			}						var e:KeyCombinationEvent = new KeyCombinationEvent(KeyCombinationEvent.DOWN);			e.keyCombination = kc;			_combsDown.push(kc);			dispatchEvent(e);		}						/**		 * Removes duplicate characters from entered key sequences.		 * @private		 */		protected function removeDuplicates(v:Vector.<uint>):Vector.<uint>		{			return v.filter(duplicatesFilter);		}						/**		 * @private		 */		protected function duplicatesFilter(e:uint, i:int, v:Vector.<uint>):Boolean		{			return (i == 0) ? true : v.lastIndexOf(e, i - 1) == -1;		}	}}