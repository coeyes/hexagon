/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file{	import com.hexagonstar.env.exception.IllegalArgumentException;	import com.hexagonstar.io.file.types.*;			/**	 * FileLoaderFactory Class	 */	internal class FileLoaderFactory	{		////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new FileLoaderFactory instance.		 */		public function FileLoaderFactory()		{		}						/**		 * Creates a new FileLoader which type depends on the specified file type.		 *		 * @param file the file for whose file type a FileLoader should be created.		 * @return a new FileLoader instance specific to the passed-in file.		 * 		 * @throws com.hexagonstar.env.exception.IllegalArgumentException if		 *         the specified filetype is not known to the FileLoaderFactory.		 */		public function create(file:IFile):IFileLoader		{			var fileLoader:IFileLoader = null;						if (file is BinaryFile)			{				fileLoader = new BinaryFileLoader(file);			}			else if (file is TextFile)			{				fileLoader = new TextFileLoader(file);			}			else if (file is MediaFile)			{				fileLoader = new MediaFileLoader(file);			}			else if (file is SoundFile)			{				// TODO				fileLoader = new BinaryFileLoader(file);				//fileLoader = new SoundFileLoader(file);			}			else			{				throw new IllegalArgumentException("A FileLoader for the filetype of " + file					+ " has not been specified in the FileLoaderFactory!");			}						return fileLoader;		}	}}