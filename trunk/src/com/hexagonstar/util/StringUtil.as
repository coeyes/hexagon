/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.util{	/**	 * Utilities for manipulating and searching Strings.	 */	public class StringUtil	{		////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Determines if the specified String is only comprised of uppercase letters.		 * 		 * @param string String to check if upper case.		 * @return true if string is only upper case characters; otherwise false.		 */		public static function isUpperCase(string:String):Boolean		{			var c:Array = string.split("");			var l:int = c.length;			while (l--)			{				if (c[l] != c[l].toUpperCase()) return false;			}			return true;		}						/**		 * Determines if the specified String is only comprised of lowercase letters.		 * 		 * @param string String to check if lower case.		 * @return true if String is only lower case characters; otherwise false.		 */		public static function isLowerCase(string:String):Boolean		{			var c:Array = string.split("");			var l:Number = c.length;			while (l--)			{				if (c[l] != c[l].toLowerCase()) return false;			}			return true;		}						/**		 * Does a case insensitive compare or two strings and returns true if		 * they are equal.		 *		 * @param string1 The first string to compare.		 * @param string2 The second string to compare.		 * @param caseSensitive Determines whether case senstitive comparsion		 *         should be used or not.		 * @return true if boths strings are equal, false if not.		 */		public static function isEqual(string1:String, string2:String,			caseSensitive:Boolean = false):Boolean		{			if (!caseSensitive) return string1.toLowerCase() == string2.toLowerCase();			else return string1 == string2;		}						/**		 * Returns only the numbers that occur in the specified string.		 * 		 * @param string String to return numbers from.		 * @return String containing only numbers.		 */		public static function getNumbersFromString(string:String):String		{			var p:RegExp = /[^0-9]/g;			return string.replace(p, "");		}						/**		 * Returns only the letters that occur in the specified string.		 * 		 * @param string String to return letters from.		 * @return String containing only letters.		 */		public static function getLettersFromString(string:String):String		{			var p:RegExp = /[^A-Z^a-z]/g;			return string.replace(p, "");		}						/**		 * Determines if and how often the specified string contains the search String.		 * 		 * @param string String to search in.		 * @param search String to search for.		 * @return the frequency of the search term found in source String.		 */		public static function contains(string:String, search:String):int		{			var p:RegExp = new RegExp(search, "g");			return string.match(p).length;		}						/**		 * Strips whitespace (or other characters) from the beginning and end of a String.	 	 * 		 * @param string String to remove characters from.		 * @param chars Characters to strip (case sensitive).		 * @return String with characters removed.		 */		public static function trim(string:String, chars:String = " \n\t\r"):String		{			var p:RegExp = new RegExp("^[" + chars + "]+|[" + chars + "]+$", "g");			return string.replace(p, "");		}						/**		 * Strips whitespace (or other characters) from the beginning of a String.		 * 		 * @param string String to remove characters from.		 * @param chars Characters to strip (case sensitive).		 * @return String with characters removed.		 */		public static function trimLeft(string:String, chars:String = " \n\t\r"):String		{			var p:RegExp = new RegExp("^[" + chars + "]+", "");			return string.replace(p, "");		}						/**		 * Strips whitespace (or other characters) from the end of a String.		 * 		 * @param string String to remove characters from.		 * @param chars Characters to strip (case sensitive).		 * @return String with characters removed.		 */		public static function trimRight(string:String, chars:String = " \n\t\r"):String		{			var p:RegExp = new RegExp("[" + chars + "]+$", "");			return string.replace(p, "");		}						/**		 * Removes additional spaces from String.		 * 		 * @param string String to remove extra spaces from.		 * @return String with additional spaces removed.		 */		public static function removeExtraSpaces(string:String):String		{			var p:RegExp = /( )+/g;			return trim(string.replace(p, " "), " ");		}						/**		 * Removes tabs, linefeeds, carriage returns and spaces from String.		 * 		 * @param source: String to remove whitespace from.		 * @return String with whitespace removed.		 */		public static function removeWhitespace(string:String):String		{			var p:RegExp = new RegExp("[ \n\t\r]", "g");			return string.replace(p, "");		}						/**		 * Removes all occurances of chars String from the specified String.		 * 		 * @param source String to remove characters from.		 * @param chars String describing characters to remove.		 * @return String with characters removed.		 */		public static function remove(string:String, chars:String):String		{			return replace(string, chars, "");		}						/**		 * Replaces chars characters in string with new characters.		 * 		 * @param string String to replace characters from.		 * @param chars String describing characters to remove.		 * @param replace String to replace removed characters.		 * @return String with characters replaced.		 */		public static function replace(string:String, chars:String, replace:String):String		{			var p:RegExp = new RegExp(chars, "g");			return string.replace(p, replace);		}						/**		 * Removes a character at a specific index.		 * 		 * @param string String to remove character from.		 * @param position Position of character to remove.		 * @return String with character removed.		 */		public static function removeAt(string:String, position:int):String		{			return replaceAt(string, position, "");		}						/**		 * Replaces a character at a specific index with new characters.		 * 		 * @param string String to replace characters from.		 * @param position Position of character to replace.		 * @param replace String to replace removed character.		 * @return String with character replaced.		 */		public static function replaceAt(string:String, position:int, replace:String):String		{			var c:Array = string.split("");			c.splice(position, 1, replace);			return c.join("");		}						/**		 * Adds characters at a specific index.		 * 		 * @param string String to add characters to.		 * @param position Position in which to add characters.		 * @param addition String to add.		 * @return String with characters added.		 */		public static function addAt(string:String, position:int, addition:String):String		{			var c:Array = string.split("");			c.splice(position, 0, addition);			return c.join("");		}						/**		 * Extracts all the unique characters from a source String.		 * 		 * @param source String to find unique characters within.		 * @return String containing unique characters from source String.		 */		public static function getUniqueCharacters(string:String):String		{			var unique:String = "";			var i:int = 0;			var l:int = string.length;			var c:String;						while (i < l)			{				c = string.charAt(i);				if (unique.indexOf(c) == -1) unique += c;				i++;			}						return unique;		}						/**		 * Multiplies the passed-in string by the passed-in factor to create		 * long string blocks.		 * 		 * @param string the source string to multiply.		 * @param factor the number of times to multiply the string.		 * @return the multiplied string.		 */		public static function multiply(string:String, factor:int):String		{			var r:String = "";			for (var i:int = factor; i > 0; i--)			{				r += string;			}			return r;		}	}}