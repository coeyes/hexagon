package view.screens{	import com.hexagonstar.display.BaseSprite;	import com.hexagonstar.display.StageReference;	import flash.display.DisplayObject;	import flash.display.Stage;		/**	 * Abstract class for screen types that defines properties and methods that	 * all screens have in common and provides several utility method helpful for	 * dealing with screens and child display objects.	 * 	 * @author Sascha Balkau <sascha@hexagonstar.com>	 */	public class AbstractScreen extends BaseSprite	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected static var _stage:Stage;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new instance.		 */		public function AbstractScreen()		{			super();			setup();		}						/**		 * Initializes the screen. This method is called by ScreenManager as soon		 * as the screen has been added to the display list but while it is still		 * invisible.		 */		public function init():void		{		}						/**		 * Activates the screen's functionality. This method is called by ScreenManager		 * after the screen has been made visible (e.g. after it finished fading in).		 */		public function activate():void		{		}						/**		 * Deactivates the screen's functionality. This method is called by ScreenManager		 * right before it is about to disappear (e.g. before being faded out).		 */		public function deactivate():void		{		}						/**		 * Updates the screen. Call this method whenever child objects of the screen		 * need to be updated, e.g. after localization was changed.		 */		public function update():void		{		}						/**		 * Removes event listeners from the screen and it's child objects. This method		 * should not be called manually. Instead it is called by BaseSprite.dispose()!		 */		override public function removeEventListeners():void		{			/* Remove all listeners added to children of this screen			 * here before the call to super.removeEventListeners()! */			super.removeEventListeners();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Sets up the class. This method sets up all class properties which		 * should be available right after instantiation and normally would be		 * placed into the constructor. The purpose for this method is to be		 * delegated from the constructor to initiate class setup because code		 * in the constructor is not optimized by the compiler. This method		 * should never be called manually as it is supposed to be called only		 * once during object lifetime.		 * 		 * @private		 */		protected function setup():void		{			_stage = StageReference.stage;						createChildren();			addEventListeners();		}						/**		 * Creates all display object children that the screen contains.		 * @private		 */		protected function createChildren():void		{		}						/**		 * Adds event listeners for the screen's child objects.		 * @private		 */		protected function addEventListeners():void		{		}						/**		 * Calculates and returns the horizontal center of the specified display		 * object in regard to the application stage.		 * @private		 * 		 * @param d The display object for which to calculate the horizontal center.		 * @return The horizontal center of d.		 */		protected static function horizontalCenter(d:DisplayObject):Number		{			return Math.round((_stage.stageWidth / 2) - (d.width / 2));		}						/**		 * Calculates and returns the vertical center of the specified display		 * object in regard to the application stage.		 * @private		 * 		 * @param d The display object for which to calculate the vertical center.		 * @return The vertical center of d.		 */		protected static function verticalCenter(d:DisplayObject):Number		{			return Math.round((_stage.stageHeight / 2) - (d.height / 2));		}	}}