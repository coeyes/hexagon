package view{	import flash.display.Sprite;	import flash.events.Event;		/**	 * The Application's main UI wrapper. Can extend Sprite/BaseSprite for Flash	 * applications or any Flex framework container class for Flex applications.	 * 	 * @author Sascha Balkau <sascha@hexagonstar.com>	 */	public class ApplicationUI extends Sprite implements IView	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new instance.		 */		public function ApplicationUI()		{			super();			setup();		}						/**		 * init		 */		public function init():void		{		}						/**		 * update		 */		public function update():void		{		}						/**		 * Disposes the object by removing any event listeners and other		 * gc collectable-relevant objects.		 */		public function dispose():void		{			removeEventListeners();		}						/**		 * Returns a String Representation of ApplicationUI.		 * @return A String Representation of ApplicationUI.		 */		override public function toString():String		{			return "[ApplicationUI]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				protected function onApplicationInitialized(e:Event):void		{			init();		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Sets up the class. This method sets up all class properties which		 * should be available right after instantiation and normally would be		 * placed into the constructor. The purpose for this method is to be		 * delegated from the constructor to initiate class setup because code		 * in the constructor is not optimized by the compiler. This method		 * should never be called manually as it is supposed to be called only		 * once during object lifetime.		 * 		 * @private		 */		protected function setup():void		{			createChildren();			addEventListeners();		}						/**		 * Creates display object children that the class contains.		 * @private		 */		protected function createChildren():void		{			/*			var ti:TextInput = new TextInput(60, 60);			ti.text = "Testing Testing!";			//ti.mouseFocusEnabled = true;			//ti.enabled = false;			addChild(ti);						var b1:Button = new Button(300, 40, 120, 20, "OK");			b1.emphasized = true;			addChild(b1);						var b2:Button = new Button(b1.x + b1.width + 10, b1.y, 120, 20, "Cancel");			addChild(b2);						var b3:Button = new Button(b2.x + b2.width + 10, b2.y, 120, 20, "Toggle");			b3.toggle = true;			addChild(b3);						var b4:Button = new Button(b3.x + b3.width + 10, b3.y, 120, 20, "Disabled");			b4.enabled = false;			addChild(b4);						var b5:Button = new Button(b4.x + b4.width + 10, b4.y, 120, 20, "Selected");			b5.selected = true;			addChild(b5);						var sb:ScrollBarLite = new ScrollBarLite();			sb.height = 300;			sb.x = sb.y = 20;			addChild(sb);						var ta:TextArea = new TextArea();			ta.width = 300;			ta.height = 200;			ta.x = 200;			ta.y = 270;			ta.horizontalScrollPolicy = ScrollPolicy.ON;			ta.wordWrap = false;			addChild(ta);						var pane:Pane = new Pane();			addChild(pane);			*/		}						/**		 * Adds event listeners.		 * @private		 */		protected function addEventListeners():void		{			Main.instance.addEventListener(Main.APPLICATION_INITIALIZED,				onApplicationInitialized);		}						/**		 * Removes event listeners.		 * @private		 */		protected function removeEventListeners():void		{			Main.instance.removeEventListener(Main.APPLICATION_INITIALIZED,				onApplicationInitialized);		}	}}