package view{	import event.ScreenEvent;	import managers.ScreenManager;	import util.Log;	import flash.display.Sprite;	import flash.events.Event;		/**	 * The Application's main UI wrapper. Can extend Sprite/BaseSprite for Flash	 * applications or any Flex framework container class for Flex applications.	 * 	 * @author Sascha Balkau <sascha@hexagonstar.com>	 */	public class ApplicationUI extends Sprite implements IView	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _screenContainer:Sprite;		protected var _screenManager:ScreenManager;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new instance.		 */		public function ApplicationUI()		{			super();			setup();		}						/**		 * Initializes the ApplicationUI.		 */		public function init():void		{			//_screenManager.openScreen(TestScreen1);			//_screenManager.updateScreen();			//setTimeout(function():void 			//{			//	_screenManager.openScreen(TestScreen2);			//	_screenManager.updateScreen();			//}, 4000);			//			//setTimeout(function():void 			//{			//	_screenManager.updateScreen();			//}, 6000);		}						/**		 * Updates the ApplicationUI. Call this method whenever child objects of the		 * ApplicationUI need to be updated, e.g. after localization was changed.		 */		public function update():void		{			_screenManager.updateScreen();		}						/**		 * Disposes the object by removing any event listeners and other		 * gc collectable-relevant objects.		 */		public function dispose():void		{			removeEventListeners();		}						/**		 * Returns a String Representation of ApplicationUI.		 * @return A String Representation of ApplicationUI.		 */		override public function toString():String		{			return "[ApplicationUI]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get screenManager():ScreenManager		{			return _screenManager;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				protected function onApplicationInitialized(e:Event):void		{			init();		}						protected function onScreenOpen(e:ScreenEvent):void		{			Log.debug(toString() + " Opened screen " + e.screen);		}				protected function onScreenClose(e:ScreenEvent):void		{			Log.debug(toString() + " Closed screen " + e.screen);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Sets up the class. This method sets up all class properties which		 * should be available right after instantiation and normally would be		 * placed into the constructor. The purpose for this method is to be		 * delegated from the constructor to initiate class setup because code		 * in the constructor is not optimized by the compiler. This method		 * should never be called manually as it is supposed to be called only		 * once during object lifetime.		 * 		 * @private		 */		protected function setup():void		{			createChildren();			addEventListeners();		}						/**		 * Creates display object children that the class contains.		 * @private		 */		protected function createChildren():void		{			_screenContainer = new Sprite();			addChild(_screenContainer);						_screenManager = new ScreenManager(_screenContainer);		}						/**		 * Adds event listeners.		 * @private		 */		protected function addEventListeners():void		{			Main.instance.addEventListener(Main.APPLICATION_INITIALIZED,				onApplicationInitialized);						_screenManager.addEventListener(ScreenEvent.SCREEN_OPEN, onScreenOpen);			_screenManager.addEventListener(ScreenEvent.SCREEN_CLOSE, onScreenClose);		}						/**		 * Removes event listeners.		 * @private		 */		protected function removeEventListeners():void		{			Main.instance.removeEventListener(Main.APPLICATION_INITIALIZED,				onApplicationInitialized);						_screenManager.removeEventListener(ScreenEvent.SCREEN_OPEN, onScreenOpen);			_screenManager.removeEventListener(ScreenEvent.SCREEN_CLOSE, onScreenClose);		}	}}