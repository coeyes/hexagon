/* * tetragon - Application framework for Flash, Flash/AIR, Flex & Flex/AIR. *  * Licensed under the MIT License * Copyright (c) 2008-2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.framework.command.env{	import com.hexagonstar.env.*;	import com.hexagonstar.framework.util.Log;	import com.hexagonstar.pattern.cmd.Command;	import flash.desktop.*;	import flash.display.StageDisplayState;	import flash.utils.setTimeout;		/**	 * This command is responsible for closing the AIR application. It first makes sure	 * that the window won't automatically close the application.	 * 	 * @author Sascha Balkau	 * @version 1.0.0	 */	public class CloseApplicationCommand extends Command	{		////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new CloseApplicationCommand instance.		 */		public function CloseApplicationCommand()		{			super();		}						/**		 * Execute the command.		 */ 		override public function execute():void		{			super.execute();						/*FDT_IGNORE*/			CONFIG::IS_AIR			/*FDT_IGNORE*/			{				/* Don't store window bounds if we are fullscreen since that would				 * store the width and height of the whole screen which we don't want. */				if (Main.app.stage.displayState != StageDisplayState.FULL_SCREEN_INTERACTIVE					&& Main.app.stage.displayState != StageDisplayState.FULL_SCREEN)					{						WindowBoundsManager.instance.storeWindowBounds();					}			}						Log.debug("Exiting ...");			setTimeout(delayedExecute, 200);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @inheritDoc		 */		override public function get name():String		{			return "appClose";		}						/**		 * delayedExecute		 * @private		 */		private function delayedExecute():void		{			/*FDT_IGNORE*/			CONFIG::IS_AIR			/*FDT_IGNORE*/			{				Main.app.stage.nativeWindow.visible = false;				NativeApplication.nativeApplication.exit();			}		}	}}