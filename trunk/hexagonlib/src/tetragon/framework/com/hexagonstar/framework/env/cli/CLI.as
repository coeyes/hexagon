/* * tetragon - Application framework for Flash, Flash/AIR, Flex & Flex/AIR. *  * Licensed under the MIT License * Copyright (c) 2008-2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.framework.env.cli{	import com.hexagonstar.framework.view.console.Console;		/**	 * A Comand Line Interpreter that processes inputs made in the Console's command line.	 * 	 * @author Sascha Balkau	 * @version 1.0.0	 */	public class CLI	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _commands:Vector.<CLICommand>;		/** @private */		protected var _commandInvoker:CLICommandInvoker;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new CLI instance.		 */		public function CLI()		{			_commands = new Vector.<CLICommand>();			new CLIDefaultCommands(this).create();		}						/**		 * Processes the input entered in the TextInput.		 */		public function processInput(input:String):void		{			var found:Boolean = false;			for each (var c:CLICommand in _commands)			{				if (input.toLowerCase() == c.command.toLowerCase())				{					found = true;					try					{						(_commandInvoker[c.handler] as Function).apply(null, c.arguments);					}					catch (e:Error)					{						_commandInvoker.consoleMessage("CLI: " + e.message, Console.LEVEL_ERROR);					}					break;				}			}						if (!found)			{				_commandInvoker.consoleMessage("Unknown command: " + input);			}		}						/**		 * Adds a command to the CLI.		 */		public function addCommand(command:CLICommand):void		{			_commands.push(command);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get commandInvoker():CLICommandInvoker		{			return _commandInvoker;		}		public function set commandInvoker(v:CLICommandInvoker):void		{			_commandInvoker = v;		}						public function get commands():Vector.<CLICommand>		{			return _commands;		}	}}