package com.hexagonstar.framework.command.file{	import com.hexagonstar.framework.io.loaders.ILoader;	import com.hexagonstar.pattern.cmd.Command;	import flash.events.ErrorEvent;	import flash.events.Event;		/**	 * Abstract class for commands that use an ILoader to load data.	 * 	 * @author Sascha Balkau <sascha@hexagonstar.com>	 */	public class AbstractLoadCommand extends Command	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _loader:ILoader;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AbstractLoadCommand instance.		 */		public function AbstractLoadCommand()		{			super();		}						/**		 * Executes the load command. You should override this method, instantiate		 * the required ILoader in it and place any other load preparation like		 * for example adding parsers to the ILoader and after that place a call		 * to super.execute.		 */		override public function execute():void		{			super.execute();						_loader.addEventListener(Event.COMPLETE, onLoaderComplete);			_loader.addEventListener(ErrorEvent.ERROR, onLoaderError);			_loader.load();		}						/**		 * Aborts the command's execution.		 */		override public function abort():void		{			super.abort();			_loader.abort();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Abstract method! You should override this and return the name of the command.		 */		override public function get name():String		{			return null;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onLoaderComplete(e:Event):void		{			complete();		}						/**		 * @private		 */		protected function onLoaderError(e:ErrorEvent):void		{			notifyError(e.text);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		override protected function complete():void		{			_loader.removeEventListener(Event.COMPLETE, onLoaderComplete);			_loader.removeEventListener(ErrorEvent.ERROR, onLoaderError);			_loader.dispose();						super.complete();		}	}}