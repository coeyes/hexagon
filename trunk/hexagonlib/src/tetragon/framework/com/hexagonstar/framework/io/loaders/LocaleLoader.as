/* * tetragon - Application framework for Flash, Flash/AIR, Flex & Flex/AIR. *  * Licensed under the MIT License * Copyright (c) 2008-2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.framework.io.loaders{	import com.hexagonstar.framework.model.Locale;	import com.hexagonstar.framework.util.Log;		/**	 * LocaleLoader Class	 * 	 * @author Sascha Balkau	 * @version 1.0.0	 */	public class LocaleLoader extends AbstractIniLoader implements ILoader	{		////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new LocaleLoader instance.		 * 		 * @param filePath The file path of the locale file.		 * @param fileID An optional ID for the locale file.		 */		public function LocaleLoader(filePath:String, fileID:String = null)		{			super(filePath, fileID);		}						/**		 * Returns a String Representation of LocaleLoader.		 * @return A String Representation of LocaleLoader.		 */		override public function toString():String		{			return "[LocaleLoader]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Tries to parse the specified key and value pair into the Locale Model.		 * @private		 */		override protected function parseProperty(key:String, val:String):void		{			var keyExists:Boolean = true;			var p:*;						/* Check if the key found in the locale file is defined in the Locale class */			try			{				p = Locale[key];			}			catch (e:Error)			{				Log.error(toString() + " Error parsing locale string: " + e.message);				keyExists = false;			}						if (keyExists)			{					Locale[key] = val;			}		}	}}