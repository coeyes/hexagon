/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.util{	/**	 * LoremIpsumGenerator Class	 */	public class LoremIpsumGenerator	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				private var _startWithLoremIpsum:Boolean = true;		private var _generatedParagraphs:int;		private var _generatedWords:int;		private var _generatedBytes:int;		private var _cache:Array;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new LoremIpsumGenerator instance.		 */		public function LoremIpsumGenerator()		{		}						/**		 * Get Lorem Ipsum paragraphs.		 * 		 * @param count	Number of lorem ipsum paragraphs.		 * @return Array of lorem ipsum paragraphs.		 */		public function getParagraphs(count:int):Array 		{			return getLoremIpsum("paras", count);		}						/**		 * Get Lorem Ipsum words.		 * 		 * @param count	Number of lorem ipsum words.		 * @return Array of lorem ipsum words.		 */		public function getWords(count:int):Array 		{			return getLoremIpsum("words", count);		}						/**		 * Get Lorem Ipsum bytes.		 * 		 * @param count		 *          Number of lorem ipsum bytes.		 * @return Array of lorem ipsum paragraphs that contain lorem ipsum words.		 */		public function getBytes(count:int):Array 		{			return getLoremIpsum("bytes", count);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get startWithLoremIpsum():Boolean 		{			return _startWithLoremIpsum;		}				public function set startWithLoremIpsum(v:Boolean):void 		{			_startWithLoremIpsum = v;		}						/**		 * Number of paragraphs generated in the last call to getParagraphs(),		 * getBytes() or getWords() method.		 * 		 * @return Number of generated paragraphs.		 */		public function get generatedParagraphs():int 		{			return _generatedParagraphs;		}						/**		 * Return number of words generated in the last call to getParagraphs(),		 * getBytes() or getWords() method.		 * 		 * @return Number of generated words.		 */		public function get generatedWords():int 		{			return _generatedWords;		}						/**		 * Number of bytes generated in the last call to getParagraphs(),		 * getBytes() or getWords() method.		 * 		 * @return Number of generated bytes.		 */		public function get generatedBytes():int 		{			return _generatedBytes;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		private function getLoremIpsum(type:String, count:int):Array		{			var chunks:Array;						// retrieve from cache			chunks = getCached(type, count);						if (null == chunks) 			{				loadLoremIpsumString(type, count);			} 			else 			{				//var lie:LoremIpsumEvent = new LoremIpsumEvent(type + 'Loaded', chunks, count);				//dispatchEvent(lie);			}			return chunks;		}						private function getCached(type:String, count:int):Array		{			return _cache[startWithLoremIpsum + type + count];		}						private function loadLoremIpsumString(type:String, howMany:int):void 		{//			var url:String = getUrl(type, howMany);//			var req:URLRequest = new URLRequest(url);//			var loader:URLLoader = new LoremIpsumUrlLoader(req, type, howMany);//			loader.addEventListener(Event.COMPLETE, handleLoaderCompleteEvent);//			loader.addEventListener(IOErrorEvent.IO_ERROR, handleLoaderIOErrorEvent);//			loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, handleLoaderHttpStatusEvent);		}	}}