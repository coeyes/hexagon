/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.display{	import com.hexagonstar.data.structures.IIterator;	import com.hexagonstar.data.structures.queues.Queue;	import com.hexagonstar.io.file.types.ImageFile;	import com.hexagonstar.math.easing.IEasing;	import com.hexagonstar.math.easing.QuadEasing;	import com.hexagonstar.tween.HTween;	import com.hexagonstar.util.debug.Debug;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.Timer;		/**	 * @author Sascha Balkau <sascha@hexagonstar.com>	 */	public class DisplayCycler	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _parent:DisplayObjectContainer;		//protected var _displayObjects:Vector.<DisplayObject>;		protected var _displayObjects:Array;		protected var _current:DisplayObject;		protected var _currentNr:int;				protected var _displayTime:Number;		protected var _tweenInDuration:Number = 0.6;		protected var _tweenOutDuration:Number = 0.6;				protected var _timer:Timer;				protected var _tween:HTween;		protected var _easing:IEasing = new QuadEasing();				protected var _isTweenIn:Boolean;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new instance.		 * 		 * @param parent The container to that all added display objects are added.		 */		public function DisplayCycler(parent:DisplayObjectContainer, displayTime:Number = 5)		{			_parent = parent;			_displayTime = displayTime;						super();			setup();		}						/**		 * Adds a display object to the cycler.		 */		public function addDisplayObject(displayObject:DisplayObject):void		{			_displayObjects.push(displayObject);		}						/**		 * setDisplayObjectQueue		 */		public function setDisplayObjectQueue(queue:Queue):void		{			_displayObjects = [];			var i:IIterator = queue.iterator();			while (i.hasNext)			{				var next:Object = i.next;				if (next is DisplayObject)				{					addDisplayObject(DisplayObject(next));				}				else if (next is ImageFile)				{					addDisplayObject(ImageFile(next).contentAsBitmap);				}			}		}				/**		 * Starts the display cycling.		 */		public function play():void		{			tweenIn();					}						/**		 * Pauses the cycler.		 */		public function pause():void		{					}				/**		 * dispose		 */		public function dispose():void		{			removeEventListeners();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * The time in seconds how long a displayobject is being displayed		 * before it fades out.		 */		public function get displayTime():Number		{			return _displayTime;		}		public function set displayTime(v:Number):void		{			if (v == _displayTime) return;			_displayTime = v;			_timer.delay = _displayTime * 1000;		}								public function set tweenDuration(v:Number):void		{			_tweenInDuration = _tweenOutDuration = v;		}						public function get tweenInDuration():Number		{			return _tweenInDuration;		}		public function set tweenInDuration(v:Number):void		{			_tweenInDuration = v;		}						public function get tweenOutDuration():Number		{			return _tweenOutDuration;		}		public function set tweenOutDuration(v:Number):void		{			_tweenOutDuration = v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				protected function onTimerComplete(e:TimerEvent):void		{			Debug.trace("onTimerComplete");						tweenOut();		}						protected function onTweenComplete(e:Event):void		{			Debug.trace("onTweenComplete");						if (_isTweenIn)			{				wait();			}			else			{				removeCurrent();			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * setup		 * @private		 */		protected function setup():void		{			createChildren();			addEventListeners();						_currentNr = 0;		}						/**		 * createChildren		 * @private		 */		protected function createChildren():void		{			_displayObjects = [];						_timer = new Timer(_displayTime * 1000, 1);		}				/**		 * addEventListeners		 * @private		 */		protected function addEventListeners():void		{			_timer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);		}						/**		 * removeEventListeners		 * @private		 */		protected function removeEventListeners():void		{			_timer.removeEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);			//_tween.removeEventListener(Event.COMPLETE, onTweenComplete);		}						/**		 * tweenIn		 * @private		 */		protected function tweenIn():void		{			Debug.trace("tweenIn: " + _currentNr);						_isTweenIn = true;						_current = _displayObjects[_currentNr];			_current.alpha = 0;			_parent.addChild(_current);						/* TODO make the same HTween object being re-used! */			_tween = new HTween();			_tween.duration = _tweenInDuration;			_tween.easing = _easing.easeOut;			_tween.target = _current;			_tween.addEventListener(Event.COMPLETE, onTweenComplete);			_tween.setProperty("alpha", 1);		}						/**		 * tweenOut		 * @private		 */		protected function tweenOut():void		{			Debug.trace("tweenOut");						_isTweenIn = false;						_tween.duration = _tweenOutDuration;			_tween.setProperty("alpha", 0);		}						/**		 * wait		 * @private		 */		protected function wait():void		{			Debug.trace("wait");						_timer.reset();			_timer.start();		}						/**		 * removeCurrent		 * @private		 */		protected function removeCurrent():void		{			Debug.trace("removeCurrent");						_parent.removeChild(_current);			_current = null;						_currentNr++;			if (_currentNr > _displayObjects.length - 1)			{				_currentNr = 0;			}						tweenIn();		}	}}