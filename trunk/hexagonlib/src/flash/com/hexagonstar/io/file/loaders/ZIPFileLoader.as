/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file.loaders{	import com.hexagonstar.data.constants.CharEncoding;	import com.hexagonstar.data.types.Byte;	import com.hexagonstar.env.event.FileIOEvent;	import com.hexagonstar.io.file.types.IFile;	import com.hexagonstar.io.file.types.ZIPFile;	import com.hexagonstar.io.file.types.ZippedFile;	import flash.events.ProgressEvent;	import flash.net.URLStream;	import flash.utils.ByteArray;	import flash.utils.Endian;	import flash.utils.IDataInput;		/**	 * ZIPFileLoader Class	 */	public class ZIPFileLoader extends AbstractFileTypeLoader implements IFileTypeLoader	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _urlStream:URLStream;		protected var _charEncoding:String;		protected var _currentFile:ZippedFile;		protected var parseFunc:Function;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new ZIPFileLoader instance.		 */		public function ZIPFileLoader(file:IFile, charEncoding:String = CharEncoding.UTF8)		{			super(file);			_charEncoding = charEncoding;			parseFunc = parseIdle;		}						/**		 * Begins downloading the ZIP archive specified by the request		 * parameter.		 * 		 * @param request A URLRequest object specifying the URL of a ZIP archive		 * to download. 		 * If the value of this parameter or the URLRequest.url property 		 * of the URLRequest object passed are null, Flash Player throws 		 * a null pointer error.		 */		override public function load(filePath:String):void		{			if (_urlStream && parseFunc != parseIdle) return;						super.load(filePath);						_urlStream = new URLStream();			_urlStream.endian = Endian.LITTLE_ENDIAN;						addEventListeners(_urlStream);						parseFunc = parseSignature;			_urlStream.load(_urlRequest);		}						/**		 * Loads a ZIP archive from a ByteArray.		 * @param bytes The ByteArray containing the ZIP archive		 */		public function loadBytes(bytes:ByteArray):void		{			if (!_urlStream && parseFunc == parseIdle) 			{				bytes.position = 0;				bytes.endian = Endian.LITTLE_ENDIAN;				parseFunc = parseSignature;								if (parse(bytes))				{					parseFunc = parseIdle;					dispatchEvent(new FileIOEvent(FileIOEvent.FILE_COMPLETE));				}				else				{					dispatchEvent(new FileIOEvent(FileIOEvent.ZIP_PARSE_ERROR, _file, "EOF"));				}			}		}						/**		 * Immediately closes the stream and cancels the download operation.		 * Files contained in the ZIP archive being loaded stay accessible		 * through the getFileAt() and getFileByName() methods.		 */		public function close():void		{			if (_urlStream) 			{				parseFunc = parseIdle;				removeEventListeners(_urlStream);				_urlStream.close();				_urlStream = null;			}		}						/**		 * Aborts the file loading process.		 */		public function abort():void		{			if (_isLoading)			{				close();				_isAborted = true;			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Indicates whether a file is currently being processed or not.		 */				public function get isActive():Boolean		{			return (parseFunc !== parseIdle);		}						/**		 * Returns the total amount of bytes that have been loaded.		 * 		 * @return amount of bytes that have been loaded.		 */		override public function get bytesLoaded():Byte		{			return new Byte(_urlStream.bytesAvailable);		}						/**		 * Returns the total amount of bytes that will approximately be loaded.		 * 		 * @return amount of bytes to load.		 */		override public function get bytesTotal():Byte		{			return new Byte(_urlStream.bytesAvailable);		}						/**		 * Returns the content of the loaded file.		 * 		 * @return the loaded resource.		 * @throws FileNotLoadedException if the resource has not been loaded yet.		 *///		override public function get fileContent():*//		{//			if (_urlStream.data == null)//			{//				throw new FileNotLoadedException("No File has been loaded yet.");//			}//			return _urlStream.data;//		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		override protected function onProgress(e:ProgressEvent):void		{			super.onProgress(e);						try			{				if (parse(_urlStream))				{					close();					dispatchEvent(new FileIOEvent(FileIOEvent.FILE_COMPLETE));				}			}			catch(err:Error)			{				close();				if (hasEventListener(FileIOEvent.ZIP_PARSE_ERROR))				{					dispatchEvent(new FileIOEvent(FileIOEvent.ZIP_PARSE_ERROR, err.message));				}				else				{					throw(err);				}			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function parse(stream:IDataInput):Boolean		{			while (parseFunc(stream));			return (parseFunc === parseIdle);		}						/**		 * @private		 */		protected function parseIdle(stream:IDataInput):Boolean		{			return false;		}						/**		 * @private		 */		protected function parseSignature(stream:IDataInput):Boolean		{			if (stream.bytesAvailable >= 4)			{				var sig:uint = stream.readUnsignedInt();				switch (sig)				{					case 0x04034B50:						parseFunc = parseLocalFile;						_currentFile = new ZippedFile(_charEncoding);						break;					case 0x02014B50:					case 0x06054B50:						parseFunc = parseIdle;						break;					default:						throw(new Error("Unknown record signature."));						break;				}				return true;			}			return false;		}						/**		 * @private		 */		protected function parseLocalFile(stream:IDataInput):Boolean		{			if (_currentFile.parse(stream))			{				ZIPFile(_file).addZippedFile(_currentFile);				dispatchEvent(new FileIOEvent(FileIOEvent.ZIPPED_FILE_LOADED, _currentFile));				_currentFile = null;								if (parseFunc != parseIdle)				{					parseFunc = parseSignature;					return true;				}			}			return false;		}	}}