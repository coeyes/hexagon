/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file.types{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.PixelSnapping;		/**	 * ImageFile Class	 * 	 * @see #ImageFile	 * @see #SWFFile	 * @author Sascha Balkau	 * @version 0.9.0	 */	public class ImageFile extends MediaFile implements IFile	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _pixelSnapping:String;		/** @private */		protected var _smoothing:Boolean;		/** @private */		protected var _transparent:Boolean;		/** @private */		protected var _fillColor:uint;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new ImageFile instance.		 * 		 * @param path The path where the file is located.		 * @param id An optional ID string for the file.		 * @param pixelSnapping Optional pixelSnapping parameter if the loaded bitmap is		 *            being fetched with contentAsBitmap.		 * @param smoothing Optional smoothing parameter if the loaded bitmap is being		 *            fetched with contentAsBitmap.		 * @param transparent Optional transparent parameter for the bitmapData.		 * @param fillColor Optional fillColor parameter for the bitmapData.		 */		public function ImageFile(path:String = "",									 id:String = null,									 pixelSnapping:String = PixelSnapping.AUTO,									 smoothing:Boolean = false,									 transparent:Boolean = true,									 fillColor:uint = 0x00000000)		{			_pixelSnapping = pixelSnapping;			_smoothing = smoothing;			_transparent = transparent;			_fillColor = fillColor;						super(path, id);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * The content of the image file as a Bitmap object.		 */		public function get contentAsBitmap():Bitmap		{			var b:BitmapData = contentAsBitmapData;			if (b) return new Bitmap(b, _pixelSnapping, _smoothing);			return null;		}						/**		 * The content of the image file as a BitmapData object.		 */		public function get contentAsBitmapData():BitmapData		{			 // TODO Needs to be tested with smoothing problem when images are loaded			 // from a different server (http://www.airtightinteractive.com/news/?p=100).			if (_container.content != null)			{				var b:BitmapData = new BitmapData(					_container.content.width,					_container.content.height,					_transparent,					_fillColor);				b.draw(_container.content);				return b;			}						return null;		}						/**		 * The filetype ID of the file.		 * 		 * @see #FileTypeIndex		 */		override public function get fileTypeID():int		{			return FileTypeIndex.IMAGE_FILE_ID;		}	}}