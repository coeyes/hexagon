/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.game.tile.ds{	import com.hexagonstar.core.BasicClass;		import flash.utils.Dictionary;			/**	 * A special HashMap that is used for Tile Properties and Global TileSet Properties.	 */	public class PropertyMap extends BasicClass	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _size:int;		protected var _map:Dictionary;		protected var _initSize:int;		protected var _maxSize:int;				private var _node:Node;		private var _first:Node;		private var _last:Node;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new PropertyMap instance.		 */		public function PropertyMap(size:int = 20)		{			_initSize = _maxSize = Math.max(10, size);			_map = new Dictionary(true);			_size = 0;						initNodes();		}						////////////////////////////////////////////////////////////////////////////////////////		// Query Operations                                                                   //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns an integer that represents the number of elements that		 * the map contains.		 * 		 * @return The number of elements in the map.		 */		public function get size():int		{			return _size;		}						/**		 * Returns a boolean that signals if the map is empty or not. If		 * true is returned, the map is empty, if false is returned, the		 * map contains any number of elements.		 *		 * @return true If the map contains no elements, otherwise false.		 */		public function get isEmpty():Boolean		{			return (_size < 1);		}						/**		 * Checks if the Map contains the property with the specified ID.		 */		public function containsID(id:int):Boolean		{			return _map[id] != null;		}						/**		 * Returns the value that is mapped with the specified ID or null if		 * there is no property mapped with the ID.		 *  		 * @param id The ID of the Pool Property.		 * @return The value of the property mapped with the ID.		 */		public function getValue(id:int):*		{			var n:Node = _map[id];			if (n) return n.value;			return null;		}						/**		 * Returns an associative Array that contains all id-value pairs of the map.		 * The resulting array contains keys named 'id' and 'value'.		 */		public function toArray():Array		{			var a:Array = new Array(_size);			var i:int = 0;			for each (var n:Node in _map)				a[i++] = {id: n.id, value: n.value};			return a;		}						/**		 * Returns a String Representation of the Collection Type.		 * 		 * @return A String Representation of the Collection Type.		 */		override public function toString(...args):String		{			return super.toString("size=" + size);		}						/**		 * Returns a String that contains all properties in the Map.		 */		public function dump():String		{			var s:String = toString();			for each (var n:Node in _map)				s += "\n[" + n.id + ": " + n.value + "]";			return s;		}						////////////////////////////////////////////////////////////////////////////////////////		// Modification Operations                                                            //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Puts the specified pool property into the map. The ID must be a positive number		 * and the name must not be null and may not exist in the map.		 * 		 * @param id The Property ID.		 * @param value The Property Value.		 */		public function put(...args):Boolean		{			var id:int = args[0];			var value:* = args[1];						if (id < 0) return false;			if (_map[id]) return false;						if (_size++ == _maxSize)			{				var l:int = (_maxSize += _initSize) + 1;				for (var i:int = 0; i < l; i++)				{					_last.next = new Node();					_last = _last.next;				}			}						var n:Node = _first;			_first = _first.next;			n.id = id;			n.value = value;						n.next = _node;						if (_node) _node.prev = n;			_node = n;			_map[id] = n;						return true;		}						/**		 * Removes the property from the Map that was mapped with the specified id.		 * @param id The ID that the property is mapped with.		 */		public function remove(id:int):void		{			var n:Node = _map[id];						if (n)			{				delete _map[id];								if (n.prev) n.prev.next = n.next;				if (n.next) n.next.prev = n.prev;				if (n == _node) _node = n.next;								n.prev = null;				n.next = null;				_last.next = n;				_last = n;								if (--_size <= (_maxSize - _initSize))				{					var l:int = (_maxSize -= _initSize) + 1;					for (var i:int = 0; i < l; i++)						_first = _first.next;				}			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Bulk Operations                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Clears the Map.		 */		public function clear():void		{			_map = new Dictionary(true);						var t:Node;			var n:Node = _node;						while (n)			{				t = n.next;								n.next = n.prev = null;				n.id = -1;				n.value = null;				_last.next = n;				_last = _last.next;				n = t;			}						_node = null;			_size = 0;		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * initNodes		 * @private		 */		protected function initNodes():void		{			var n:Node = new Node();			_first = _last = n;						var l:int = _initSize + 1;			for (var i:int = 0; i < l; i++)			{				n.next = new Node();				n = n.next;			}						_last = n;		}	}}// ---------------------------------------------------------------------------------------------/** * @private */internal class Node{	public var id:int;	public var value:*;	public var prev:Node;	public var next:Node;}