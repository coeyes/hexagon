/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.algo.compr{	import flash.utils.ByteArray;		/**	 * CRC32Generator Class	 * 	 * For details of CRC32 encoding, see notes in IETF RFC 1952:	 * http://www.ietf.org/rfc/rfc1952.txt	 */	public class CRC32Generator	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				private static var _crcTable:Vector.<uint>;		private static var _isTableComputed:Boolean = false;				////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Generates a CRC checksum for the specified buffer.		 */		public function generate(buffer:ByteArray):uint		{			if (!_isTableComputed)			{				computeCRCTable();			}						var result:uint = ~0;			var len:int = buffer.length;						for (var i:int = 0; i < len; i++)			{				result = _crcTable[(result ^ buffer[i]) & 0xff] ^ (result >>> 8);			}						result = ~result;			return (result & 0xffffffff);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		private static function computeCRCTable():void		{			_crcTable = new Vector.<uint>(256, true);			var val:uint;						for (var i:int = 0;i < 256; i++)			{				val = i;				for (var j:int = 0;j < 8; j++)				{					if ((val & 1) != 0)					{						val = 0xedb88320 ^ (val >>> 1);					}					else					{						val = val >>> 1;					}				}				_crcTable[i] = val;			}						_isTableComputed = true;		}	}}