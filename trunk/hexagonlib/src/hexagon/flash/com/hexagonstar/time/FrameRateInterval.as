/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.time{	import com.hexagonstar.display.StageReference;		/**	 * FrameRateInterval is a Timer that can be used to time frame animation-based	 * display objects that implement IAnimatedDisplayObject. A FrameRateInterval	 * is created with a framerate at that the IAnimatedDisplayObject should play	 * and then is provided to the animated object which uses this interval to	 * play it's frames.<p>	 * If no value is specified for the fps argument, FrameRateInterval will try	 * to use the SWF's default framerate in which case StageReference.stage	 * must be assigned to the SWF's stage before it can be used.	 * 	 * @example	 * <pre>	 *     // Create a FrameRateInterval with a framerate of 30:	 *     var interval:FrameRateInterval = new FrameRateInterval(30);	 *     var anim:AnimatedBitmap = new AnimatedBitmap(bitmap, 32, interval);	 * </pre>	 * 	 * @example	 * <pre>	 *     // Create a FrameRateInterval that uses the SWF's default framerate:	 *     StageReference.stage = stage;	 *     var interval:FrameRateInterval = new FrameRateInterval();	 *     var anim:AnimatedBitmap = new AnimatedBitmap(bitmap, 32, interval);	 * </pre>	 * 	 * @author Sascha Balkau	 * @version 1.0.0	 */	public class FrameRateInterval extends PreciseTimer	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _fps:int;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new FrameRateInterval instance. This class requires the		 * StageReference class to be initialized before it can be used.		 * 		 * @param fps The frame rate value for the FrameRateInterval. If this		 *         value is smaller than 0 the SWF's default frameRate will be used.		 */		public function FrameRateInterval(fps:int = -1)		{			_fps = (fps > -1) ? fps : StageReference.stage.frameRate;			super(Math.round(1000 / _fps), 0);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns the framerate of the FrameRateTimer.		 * 		 * @return The framerate of the FrameRateTimer.		 */		public function get frameRate():int		{			return _fps;		}	}}