/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.util{	import com.hexagonstar.geom.Radian;	import flash.geom.Point;	import flash.geom.Rectangle;		/**	 * Provides common utility methods for trigonometric operations.	 * 	 * @author Sascha Balkau	 * @version 1.0.0	 */	public class GeomUtil	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		private static const RADTODEG:Number		= 180 / Math.PI;		/** @private */		private static const DEGTORAD:Number		= Math.PI / 180;		/** @private */		private static const MATH_SQRT:Function	= Math.sqrt;		/** @private */		private static const MATH_ATAN:Function	= Math.atan;		/** @private */		private static const MATH_ATAN2:Function	= Math.atan2;		/** @private */		private static const MATH_COS:Function	= Math.cos;		/** @private */		private static const MATH_SIN:Function	= Math.sin;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Converts the specified radian value to degrees.		 * 		 * @param radians the radians value.		 * @return the degrees value.		 */		public static function radToDeg(radians:Number):Number		{			return radians * RADTODEG;		}						/**		 * Converts the specified degrees value to radians.		 * 		 * @param degrees the degrees value.		 * @return the radians value.		 */		public static function degToRad(degrees:Number):Number		{			return degrees * DEGTORAD;		}						/**		 * Returns the distance of the line between the two specified point objects		 * startPoint and endPoint.		 * 		 * @param startPoint the starting coordinate of the line which distance		 *         is to be calculated.		 * @param endPoint the end coordinate of the line which distance is to be		 *         calculated.		 * @return a number containing the calculate distance.		 */		public static function getDistance(startPoint:Point, endPoint:Point):Number		{			var x:Number = endPoint.x - startPoint.x;			var y:Number = endPoint.y - startPoint.y;			return MATH_SQRT((x * x) + (y * y));		}						/**		 * Determines the angle/degree between the first and second point.		 * 		 * @param first The first Point.		 * @param second The second Point.		 * @return The degree between the two points.		 */		public static function getAngle(first:Point, second:Point):Number		{			return MATH_ATAN((first.y - second.y) / (first.x - second.x)) / DEGTORAD;		}						/**		 * Calculates the perimeter of a rectangle.		 * 		 * @param rect Rectangle to determine the perimeter of.		 */		public static function getRectanglePerimeter(r:Rectangle):Number		{			return r.width * 2 + r.height * 2;		}						/**		 * Returns a new Radian object with the angle between the two specified		 * point objects startPoint and endPoint.		 * 		 * @param startPoint the starting coordinate of the line which angle		 *         is to be calculated.		 * @param endPoint the end coordinate of the line which angle is to be		 *         calculated.		 * @return a new Radian instance that contains the calculated angle.		 */		public static function getRadian(startPoint:Point, endPoint:Point):Radian		{			return new Radian(MATH_ATAN2(endPoint.y - startPoint.y,				endPoint.x - startPoint.x));		}						/**		 * Returns a new Point object containing the polar coordinates (or the		 * end point) of the specified startPoint, angle and distance.		 * 		 * @param startPoint the starting coordinate that is used to calculate		 *         the polar coordinate.		 * @param angle the angle in radians that is used to calculate the polar		 *         coordinate.		 * @param distance the distance value that is used to calculate the polar		 *         coordinate.		 * @return a new Point instance that contains the polar coordinates.		 */		public static function getPolar(startPoint:Point, angle:Number,			distance:Number):Point		{	        return new Point((distance * MATH_COS(angle)) + startPoint.x,	        	(distance * MATH_SIN(angle)) + startPoint.y);		}						/**		 * Rotates a Point around another Point by the specified angle.		 * 		 * @param point The Point to rotate.		 * @param centerPoint The center point to rotate the point around.		 * @param angle The angle (in degrees) to rotate this point.		 */		public static function rotatePoint(point:Point, centerPoint:Point, angle:Number):void		{			var r:Number = degToRad(angle);			var baseX:Number = point.x - centerPoint.x;			var baseY:Number = point.y - centerPoint.y;						point.x = (MATH_COS(r) * baseX) - (MATH_SIN(r) * baseY) + centerPoint.x;			point.y = (MATH_SIN(r) * baseX) + (MATH_COS(r) * baseY) + centerPoint.y;		}	}}