/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.event{	import com.hexagonstar.io.file.types.IFile;	import com.hexagonstar.io.net.HTTPStatusCodes;	import flash.events.Event;		/**	 * An event used for file operations. It defines constant event identifiers for file	 * IO events. It also stores the HTTP Status value for HTTPStatus Events so that	 * they can be traced back after the original event has already been removed.	 * 	 * @author Sascha Balkau	 * @version 1.0.0	 */	public class FileIOEvent extends Event	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * A constant for file io events which signals that a file is being opened.		 */		public static const OPEN:String					= "fileIOOpen";				/**		 * A constant for file io events which signals that a file is progressing loading.		 */		public static const PROGRESS:String				= "fileIOProgress";				/**		 * A constant for file io events which signals that a zipped file has been loaded.		 */		public static const ZIPPED_FILE_LOADED:String	= "fileIOZippedFileLoaded";				/**		 * A constant for file io events which signals that a single file has been loaded		 * completely.		 */		public static const FILE_COMPLETE:String			= "fileIOFileKomplete";				/**		 * A constant for file io events which signals that a file queue has completed		 * loading by loading it with the QueueFileLoader.		 */		public static const COMPLETE:String				= "fileIOKomplete";				/**		 * A constant for file io events which signals that a file io operation has been		 * aborted.		 */		public static const ABORT:String					= "fileIOAbort";				/**		 * A constant for file io events which signals that a file io operation has been		 * paused.		 */		public static const PAUSE:String					= "fileIOPause";				/**		 * A constant for file io events which signals that a file io operation has been		 * unpaused.		 */		public static const UNPAUSE:String				= "fileIOUnpause";				/**		 * A constant for file io events which signals a HTTP status.		 */		public static const HTTP_STATUS:String			= "fileIOHTTPStatus";				/**		 * A constant for file io events which signals that a file io error occured.		 */		public static const IO_ERROR:String				= "fileIOIOError";				/**		 * A constant for file io events which signals that a security error occured.		 */		public static const SECURITY_ERROR:String		= "fileIOSecurityError";				/**		 * A constant for file io events which signals that a zip file parsing error occured.		 */		public static const ZIP_PARSE_ERROR:String		= "fileIOZipParseError";				/**		 * A constant for file io events which signals that a file which is to be stored		 * already exists.		 */		public static const FILE_EXISTS:String			= "fileIOFileExists";				/**		 * A constant for file io events which signals that a file has been stored.		 */		public static const SAVE_COMPLETE:String			= "fileIOSaveComplete";				/**		 * A constant for file io events which signals that a file has been compressed.		 */		public static const COMPRESSION_COMPLETE:String	= "fileIOCompressionComplete";						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _file:IFile;		/** @private */		protected var _text:String;		/** @private */		protected var _httpStatus:int;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new FileIOEvent instance.		 * 		 * @param type		 * @param file		 * @param text		 * @param httpStatus		 * @param bubbles		 * @param cancelable		 */		public function FileIOEvent(type:String,									   file:IFile = null,									   text:String = "",									   httpStatus:int = 0,									   bubbles:Boolean = false,									   cancelable:Boolean = false)		{			super(type, bubbles, cancelable);			_file = file;			_text = text;			_httpStatus = httpStatus;		}						/**		 * Clones the event.		 */		override public function clone():Event		{			return new FileIOEvent(type,									_file,									_text,									_httpStatus,									bubbles,									cancelable);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * A reference to the last loaded file.		 */		public function get file():IFile		{			return _file;		}						/**		 * The text of the FileIOEvent. In case of an error event this contains the error		 * status message.		 */		public function get text():String		{			return _text;		}						/**		 * The HTTP status value for HTTPStatus events.		 */		public function get httpStatus():int		{			return _httpStatus;		}		public function set httpStatus(v:int):void		{			_httpStatus = v;		}						/**		 * A more verbose HTTPStatus info if available.		 */		public function get httpStatusInfo():String		{			var s:String = HTTPStatusCodes.getStatusCode(_httpStatus);			if (!s) return _httpStatus + "";			return _httpStatus + " " + s;		}	}}