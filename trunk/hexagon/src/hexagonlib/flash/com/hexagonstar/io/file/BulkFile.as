/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file{	import com.hexagonstar.event.FileIOEvent;	import com.hexagonstar.io.file.loaders.FileTypeLoaderFactory;	import com.hexagonstar.io.file.loaders.IFileTypeLoader;	import com.hexagonstar.io.file.types.IFile;	import flash.events.EventDispatcher;		/**	 * A BulkFile is, unlike the File classes in com.hexagonstar.io.file.types, not a	 * file for a specific data format but a loader class that wraps the various files	 * to be loaded for use with the BulkLoader. You don't use this class direclty, the	 * BulkLoader creates BulkFiles automatically so it can create several load	 * connections which are then processed at the same time.	 */	public class BulkFile extends EventDispatcher	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Indicates that the bulkfile is fresh and has not yet commenced loading.		 */		public static const STATUS_INITIALIZED:String = "statusInitialized";				/**		 * Indicates that the bulkfile is in the process of being loaded.		 */		public static const STATUS_PROGRESSING:String = "statusProgressing";				/**		 * Indicates that the bulkfile has been aborted being loaded.		 */		public static const STATUS_ABORTED:String = "statusAborted";				/**		 * Indicates that the bulkfile has completed loading and is ready to be used.		 */		public static const STATUS_LOADED:String = "statusLoaded";				/**		 * Indicates that an error occured while trying to load the bulkfile		 * and hence it is not ready to be used.		 */		public static const STATUS_ERROR:String = "statusError";						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _wrappedFile:IFile;		/** @private */		protected var _loader:IFileTypeLoader;		/** @private */		protected var _status:String;		/** @private */		protected var _retryCount:int;		/** @private */		protected var _loading:Boolean;		/** @private */		protected var _priority:int;		/** @private */		protected var _weight:int;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new BulkFile instance.		 */		public function BulkFile(wrappedFile:IFile, priority:int = 0, weight:int = 1)		{			_wrappedFile = wrappedFile;			_priority = priority;			this.weight = weight;						_status = STATUS_INITIALIZED;			_retryCount = 0;		}						/**		 * load		 */		public function load():void		{			if (_loading) return;						_loading = true;			_status = STATUS_PROGRESSING;						_loader = FileTypeLoaderFactory.create(_wrappedFile);			addLoaderListeners();						try			{				_loader.load(_wrappedFile.path);			}			catch (e:Error)			{				onSecurityError(new FileIOEvent(FileIOEvent.SECURITY_ERROR, _wrappedFile,					e.message));			}		}						/**		 * abort		 */		public function abort():void		{			_loader.abort();		}						/**		 * Disposes BulkFile.		 */		public function dispose():void		{			abort();			removeLoaderListeners();		}						/**		 * Returns a String Representation of BulkFile.		 * 		 * @return A String Representation of BulkFile.		 */		override public function toString():String		{			return "[BulkFile, path=" + _wrappedFile.path + "]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get loading():Boolean		{			return _loading;		}						public function get status():String		{			return _status;		}		public function set status(v:String):void		{			_status = v;		}						/**		 * How many times the bulkfile has been tried to be reloaded after it failed		 * to load due to an error.		 */		public function get retryCount():int		{			return _retryCount;		}		public function set retryCount(v:int):void		{			_retryCount = v;		}						/**		 * A relative unit of size, so that preloaders can show relative 		 * progress before all connections have started.		 */		public function get weight():int		{			return _weight;		}		public function set weight(v:int):void		{			if (v < 1) v = 1;			else if (v > int.MAX_VALUE) v = int.MAX_VALUE;			_weight = v;		}						/**		 * The file that the BulkFile wraps.		 */		public function get file():IFile		{			return _wrappedFile;		}						public function get bytesLoaded():int		{			return _loader.bytesLoaded.byte;		}						public function get bytesTotal():int		{			return _loader.bytesTotal.byte;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onOpen(e:FileIOEvent):void		{			relayEvent(e);		}						/**		 * @private		 */		protected function onProgress(e:FileIOEvent):void		{			relayEvent(e);		}						/**		 * @private		 */		protected function onFileComplete(e:FileIOEvent):void		{			_status = STATUS_LOADED;			finish(e);		}						/**		 * @private		 */		protected function onAbort(e:FileIOEvent):void		{			_status = STATUS_ABORTED;			finish(e);		}						/**		 * @private		 */		protected function onHTTPStatus(e:FileIOEvent):void		{			relayEvent(e);		}						/**		 * @private		 */		protected function onIOError(e:FileIOEvent):void		{			_status = STATUS_ERROR;			finish(e);		}						/**		 * @private		 */		protected function onSecurityError(e:FileIOEvent):void		{			_status = STATUS_ERROR;			finish(e);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * addLoaderListeners		 * @private		 */		protected function addLoaderListeners():void		{			_loader.addEventListener(FileIOEvent.OPEN, onOpen);			_loader.addEventListener(FileIOEvent.PROGRESS, onProgress);			_loader.addEventListener(FileIOEvent.FILE_COMPLETE, onFileComplete);			_loader.addEventListener(FileIOEvent.ABORT, onAbort);			_loader.addEventListener(FileIOEvent.HTTP_STATUS, onHTTPStatus);			_loader.addEventListener(FileIOEvent.IO_ERROR, onIOError);			_loader.addEventListener(FileIOEvent.SECURITY_ERROR, onSecurityError);		}						/**		 * removeLoaderListeners		 * @private		 */		protected function removeLoaderListeners():void		{			_loader.removeEventListener(FileIOEvent.OPEN, onOpen);			_loader.removeEventListener(FileIOEvent.PROGRESS, onProgress);			_loader.removeEventListener(FileIOEvent.FILE_COMPLETE, onFileComplete);			_loader.removeEventListener(FileIOEvent.ABORT, onAbort);			_loader.removeEventListener(FileIOEvent.HTTP_STATUS, onHTTPStatus);			_loader.removeEventListener(FileIOEvent.IO_ERROR, onIOError);			_loader.removeEventListener(FileIOEvent.SECURITY_ERROR, onSecurityError);		}						/**		 * finish		 * @private		 */		protected function finish(e:FileIOEvent):void		{			removeLoaderListeners();			_loading = false;			relayEvent(e);		}						/**		 * @private		 */		protected function relayEvent(e:FileIOEvent):void		{			e.bulkFile = this;			dispatchEvent(e);		}	}}