/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.resource.provider{	import com.hexagonstar.event.FileIOEvent;	import com.hexagonstar.io.file.BulkLoader;	import com.hexagonstar.io.resource.ResourceManager;	import com.hexagonstar.io.resource.types.Resource;		/**	 * LoadedResourceProvider Class	 * @author Sascha Balkau	 */	public class LoadedResourceProvider extends AbstractResourceProvider	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _loader:BulkLoader;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new LoadedResourceProvider instance.		 */		public function LoadedResourceProvider(registerAsProvider:Boolean = true)		{			super(registerAsProvider);						_loader = new BulkLoader();			_loader.addEventListener(FileIOEvent.FILE_COMPLETE, onFileComplete);			_loader.addEventListener(FileIOEvent.IO_ERROR, onFileError);			_loader.addEventListener(FileIOEvent.SECURITY_ERROR, onFileError);		}						/**		 * @inheritDoc		 */		override public function getResource(path:String,												  type:Class,												  forceReload:Boolean = false):Resource		{			var identifier:String = ResourceManager.createIdentifier(path, type);						/* if resource is known return it. */			if (_resources[identifier] != null && !forceReload)			{				return _resources[identifier];			}						if (_resources[identifier] == null)			{				/* create resource and provide it to the ResourceManager */				var resource:Resource = new type();				resource.setup(path, identifier);				_resources[identifier] = resource;								_loader.addFile(resource.file);				_loader.load();			}			else			{				resource = _resources[identifier];			}						return resource;		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onOpen(e:FileIOEvent):void		{		}						/**		 * @private		 */		protected function onProgress(e:FileIOEvent):void		{		}						/**		 * @private		 */		protected function onFileComplete(e:FileIOEvent):void		{			var resource:Resource = _resources[e.file.id];			resource.initialize(null);		}						/**		 * @private		 */		protected function onAbort(e:FileIOEvent):void		{		}						/**		 * @private		 */		protected function onHTTPStatus(e:FileIOEvent):void		{		}						/**		 * @private		 */		protected function onFileError(e:FileIOEvent):void		{		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////			}}