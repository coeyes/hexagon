/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.event{	import com.hexagonstar.io.resource.types.Resource;	import flash.events.Event;		/**	 * A ResourceEvent is an Event used by a Resource to dispatch load status information. In	 * common use, this event never needs to be used as the ResourceManager wraps its	 * functionality.	 * 	 * @see ResourceManager	 * @see Resource 	 * @author Sascha Balkau	 */	public class ResourceEvent extends Event	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * This event is dispatched by a resource upon successful load of the resource's		 * data.		 * 		 * @eventType LOADED		 */		public static const LOADED:String = "resourceLoaded";				/**		 * This event is dispatched by a resource when loading of the resource's		 * data fails.		 * 		 * @eventType FAILED		 */		public static const FAILED:String = "resourceFailed";						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected var _resource:Resource;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new ResourceEvent instance.		 */		public function ResourceEvent(type:String,										 resource:Resource,										 bubbles:Boolean = false,										 cancelable:Boolean = false)		{			_resource = resource;			super(type, bubbles, cancelable);		}						/**		 * Clones the event.		 */		override public function clone():Event		{			return new ResourceEvent(type, _resource, bubbles, cancelable);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * The Resource associated with the event.		 */		public function get resource():Resource		{			return _resource;		}	}}