/* * tetragonlib - ActionScript 3 Game Library. *    ____ *   /    / TETRAGON *  /____/  LIBRARY *  * Licensed under the MIT License *  * Copyright (c) 2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.game.tile{	import flash.display.Bitmap;	import flash.display.BitmapData;		/**	 * AnimTile Class	 */	public class AnimTile extends Tile implements ITile	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				public var totalFrames:int = 0;				/**		 * Used to keep tracks of how many times the tile animation looped already.		 * This is used by the tile layer to remove expired anim tiles.		 * @private		 */		public var loops:int = 0;				protected var _currentFrame:int;		protected var _frames:Vector.<BitmapData>;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AnimTile instance.		 */		public function AnimTile(id:int, copyOf:int = 0, frames:Vector.<BitmapData> = null)		{			super(id, copyOf);						if (frames)			{				_frames = frames;				totalFrames = _frames.length;				_currentFrame = totalFrames - 1;				bitmapData = _frames[0];			}		}						/**		 * nextFrame		 */		public function nextFrame():void		{			if (_currentFrame == 0)			{				_currentFrame = totalFrames - 1;			}			else			{				_currentFrame--;			}						bitmapData = _frames[_currentFrame];		}						/**		 * Returns a clone of the tile.		 */		override public function clone():ITile		{			return new AnimTile(_id, _copyOf, _frames);		}						/**		 * Obsolete!		 */		override public function cloneBufferTo(target:Bitmap):void		{		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get frames():Vector.<BitmapData>		{			return _frames;		}		public function set frames(v:Vector.<BitmapData>):void		{			_frames = v;			bitmapData = _frames[0];		}						public function get currentFrame():int		{			return _currentFrame;		}		public function set currentFrame(v:int):void		{			_currentFrame = v;			bitmapData = _frames[_currentFrame];		}	}}