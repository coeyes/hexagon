/* * tetragonlib - ActionScript 3 Game Library. *    ____ *   /    / TETRAGON *  /____/  LIBRARY *  * Licensed under the MIT License *  * Copyright (c) 2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.game.tile.ort{	import com.hexagonstar.data.structures.grids.Grid2D;	import com.hexagonstar.game.tile.AnimTile;	import com.hexagonstar.game.tile.ITile;	import com.hexagonstar.game.tile.ITileLayer;	import com.hexagonstar.game.tile.Tile;	import com.hexagonstar.game.tile.TileSet;	import com.hexagonstar.game.tile.ds.PropertyMap;	import com.hexagonstar.time.PreciseTimer;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.PixelSnapping;	import flash.display.Sprite;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.geom.Rectangle;		/**	 * TileLayer Class	 */	public class TileLayer extends Sprite implements ITileLayer	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _index:int;		protected var _name:String;		protected var _tileSetID:String;		protected var _tileAnimFPS:int;		protected var _tileAnimRenderCount:int;		protected var _tileAnimTimer:PreciseTimer;		protected var _transparent:Boolean;		protected var _fillColor:uint;				protected var _properties:PropertyMap;				protected var _grid:Grid2D;		protected var _tileSet:TileSet;		protected var _buffer:BitmapData;		protected var _canvas:BitmapData;				protected var _viewWidth:int;		protected var _viewHeight:int;		protected var _viewCols:int;		protected var _viewRows:int;				protected var _tileWidth:int;		protected var _tileHeight:int;				protected var _bufferWidth:int;		protected var _bufferHeight:int;				protected var _oldXPos:int;		protected var _oldYPos:int;				/**		 * Rectangle and Point that are used to copy/position tiles.		 * @private		 */		protected var _rectangle:Rectangle;		protected var _point:Point;				/**		 * Rectangle and Point that are used to copy an area from the buffer to the canvas.		 * @private		 */		protected var _copyRectangle:Rectangle;		protected var _copyPoint:Point;				/**		 * Rectangle used to clear (flood fill) the buffer.		 * @private		 */		protected var _bufferRectangle:Rectangle;				/**		 * If false also renders the buffer to the screen. Only used for debugging.		 * @private		 */		protected var _masked:Boolean = true;						/**		 * Used to store references to all anim tiles that are currently being rendered.		 * @private		 */		protected var _animTiles:Object;				/**		 * Stores the current frame number for all animtiles of the same id. Used for		 * sync animtile looping.		 * @private		 */		protected var _animTileFrameCounts:Object;				protected var _hasAnimTiles:Boolean = false;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new TileLayer instance.		 * 		 * @param width Width of the layer, measured in tiles.		 * @param height Height of the layer, measured in tiles.		 */		public function TileLayer(width:int = 0, height:int = 0)		{			_properties = new PropertyMap(10);			_grid = new Grid2D(width, height);		}				/**		 * Adds a new Layer Property to the Layer.		 * 		 * @param id The property ID.		 * @param value The value of the property.		 */		public function addProperty(id:String, value:*):void		{			_properties.put(id, value);		}						/**		 * Sets the Grid data that is used by the layer. This must be set before		 * the layer can be used.		 * 		 * @param array A 2D Array whose values must be integers and will		 * be used to populate the layers' grid. The Grid will automatically		 * receive the width and height from the 2D array.		 */		public function setGridData(array:Array):void		{			_grid.fromArray(array);		}						/**		 * Initializes TileLayer.		 */		public function init(tileSetsMap:PropertyMap, viewWidth:int, viewHeight:int):void		{			_tileSet = tileSetsMap.getValue(_tileSetID);			_tileWidth = _tileSet.tileWidth;			_tileHeight = _tileSet.tileHeight;						_viewWidth = viewWidth;			_viewHeight = viewHeight;			_viewCols = (_viewWidth / _tileWidth);			_viewRows = (_viewHeight / _tileHeight);						_oldXPos = -1;			_oldYPos = -1;						//Debug.trace("viewCols: " + _viewCols + "  viewRows: " + _viewRows);						/* Calculate buffer width and height */			_bufferWidth = _viewWidth + _tileWidth;			_bufferHeight = _viewHeight + _tileHeight;						_point = new Point(0, 0);			_copyPoint = new Point(0, 0);			_copyRectangle = new Rectangle(0, 0, _viewWidth, _viewHeight);			_rectangle = new Rectangle(0, 0, _tileWidth, _tileHeight);						_buffer = new BitmapData(_bufferWidth, _bufferHeight, _transparent, _fillColor);			_bufferRectangle = new Rectangle(0, 0, _bufferWidth, _bufferHeight);						if (!_masked)			{				var bufferBitmap:Bitmap = new Bitmap(_buffer);				bufferBitmap.alpha = 0.4;				addChild(bufferBitmap);			}						_canvas = new BitmapData(_viewWidth, _viewHeight, _transparent, _fillColor);			addChild(new Bitmap(_canvas, PixelSnapping.ALWAYS, false));						if (_tileSet.animTileCount > 0)			{				_animTiles = {};				_animTileFrameCounts = {};				_tileAnimRenderCount = 0;				_hasAnimTiles = false;				_tileAnimTimer = new PreciseTimer(Math.round(1000 / _tileAnimFPS), 0);				_tileAnimTimer.addEventListener(TimerEvent.TIMER, onTileAnimTimer);				_tileAnimTimer.start();			}		}						/**		 * Draws the layer.		 * 		 * @private		 * @param xPos The current x position, in pixels.		 * @param yPos The current y position, in pixels.		 */		public function draw(xPos:int, yPos:int):void		{			/* If the position hasn't changed and there are no anim tiles to render			 * we don't need to update the layer at all and can safe cpu cycles. */			if (!_hasAnimTiles && xPos == _oldXPos && yPos == _oldYPos)			{				return;			}						var rx:int = (xPos % _tileWidth);			var ry:int = (yPos % _tileHeight);						/* Clear the buffer */			_buffer.fillRect(_bufferRectangle, _fillColor);						for (var y:int = 0; y <= _viewRows; y++)			{				for (var x:int = 0; x <= _viewCols; x++)				{					/* Calculate tile coord in the grid. */					var gridX:int = x + (xPos / _tileWidth);					var gridY:int = y + (yPos / _tileHeight);					var tileID:int = _grid.getCell(gridX, gridY);										/* Don't draw areas that are empty. */					if (tileID > 0)					{						var tile:ITile = _tileSet.getTile(tileID);						_point.x = x * _tileWidth;						_point.y = y * _tileHeight;												/* If anim tile, it needs special treatment. */						if (tile is AnimTile)						{							/* Create a key to store the animtile under. */							var key:String = gridX + "_" + gridY;														/* If anim tile is already on view, just pick it from the list ... */							if (_animTiles[key])							{								tile = _animTiles[key];							}							/* ... otherwise create it and store it in the list. */							else							{								tile = tile.clone();								_animTiles[key] = tile;								_animTileFrameCounts[tile.id] = (tile as AnimTile).totalFrames - 1;								_tileAnimRenderCount++;							}						}												_buffer.copyPixels((tile as Tile).bitmapData, _rectangle, _point);					}				}			}						/* Calculate offset position to copy view rect from the buffer. */			_copyRectangle.x = rx;			_copyRectangle.y = ry;			_canvas.copyPixels(_buffer, _copyRectangle, _copyPoint);						_oldXPos = xPos;			_oldYPos = yPos;						_hasAnimTiles = (_tileAnimRenderCount > 0);		}				/**		 * Draws the layer.		 * 		 * @private		 * @param xPos The current x position, in pixels.		 * @param yPos The current y position, in pixels.		 *///		public function drawOld(xPos:int, yPos:int):void//		{//			// TODO Add support for scroll speed that is larger than tile size!//			//			//Debug.trace("xPos: " + xPos);//			//			/* Calculate tile size remainders *///			var rx:int = xPos % _tileWidth;//			var ry:int = yPos % _tileHeight;//			//			/* Clear the buffer *///			_buffer.fillRect(_bufferRectangle, _fillColor);//			//			/* We loop from -1 because anim tile coords can be lower than left/top//			 * border of the view to remove them successfully. *///			for (var y:int = -1; y <= _viewRows; y++)//			{//				for (var x:int = -1; x <= _viewCols; x++)//				{//					/* coords used for bitmap tiles should be no-minus though. *///					var by:int = y + 1;//					var bx:int = x + 1;//					//					/* Calculate tile coord in the grid. *///					var gridX:int = bx + (xPos / _tileWidth);//					var gridY:int = by + (yPos / _tileHeight);//					var tileID:int = 0;//					//					/* TODO Currently because of the loops starting from -1, the grid//					 * coords for the right/bottom-most column/row are invalid so check//					 * that we are in the valid range. Needs to be improved! *///					if (gridX < _grid.width && gridY < _grid.height)//					{//						tileID = _grid.getCell(gridX, gridY);//					}//					//					/* Don't draw areas that are empty. *///					if (tileID > 0)//					{//						var tile:ITile = _tileSet.getTile(tileID);//						_point.x = bx * _tileWidth;//						_point.y = by * _tileHeight;//						//						/* If anim tile, it needs special treatment. *///						if (tile is AnimTile)//						{//							var uid:String = gridX + "_" + gridY;//							//							/* If anim tile is not in the list, add it ... *///							if (!_animTiles[uid])//							{//								tile = _tileSet.duplicateTile(tile);//								tile.x = _point.x - rx;//								tile.y = _point.y - ry;//								_animTiles[uid] = tile;//								//_animTileContainer.addChild(tile as DisplayObject);//							}//							/* ... otherwise just update it's position. *///							else//							{//								var t:AnimTile = _animTiles[uid];//								t.x = _point.x - rx;//								t.y = _point.y - ry;//								//								if (uid == "4_4")//								{//									Debug.trace(x);//								}//							}//						}//						/* If static bitmap tile, simply copy it onto the buffer. *///						else//						{//							_buffer.copyPixels((tile as Tile).bitmapData, _rectangle, _point);//						}//					}//				}//			}//			//			/* Calculate offset position to copy view rect from the buffer. *///			_copyRectangle.x = rx;//			_copyRectangle.y = ry;//			_canvas.copyPixels(_buffer, _copyRectangle, _copyPoint);//			//			/* Remove any anim tiles that are not in the view area.//			 * TODO add check value to only remove anim tiles every x loops. *///			for (var k:String in _animTiles)//			{//				var at:AnimTile = _animTiles[k];//				if (at)//				{//					if (at.y <= -(ry + 1) || at.y > _viewHeight//						|| at.x <= -(rx + 1) || at.x > _viewWidth)//					{//						//_animTileContainer.removeChild(at);//						_animTiles[k] = null;//					}//				}//			}			//			for (var y:int = 0; y <= _viewRows; y++)//			{//				for (var x:int = 0; x <= _viewCols; x++)//				{//					//					tileID = _grid.getCell(x + tileX, y + tileY);//			        //					_point.x = x * _tileWidth;//					_point.y = y * _tileHeight;//					//					if (tileID > 0)//					{//						tile = _tileSet.getTile(tileID);//						//						var spr:Sprite = new Sprite();//						var rct:RectangleShape = new RectangleShape(_tileWidth, _tileHeight, 0, 0.0, 1, 0xFF00FF, 1.0);//						var qtf:QuickTextField = new QuickTextField((x + tileX).toString(), 0, 0, null, 11, 0xFFFFFF);//						spr.addChild(rct);//						spr.addChild(qtf);//						//						var bmd:BitmapData = new BitmapData(_tileWidth, _tileHeight, true, 0x00000000);//						bmd.draw((tile as Tile).bitmapData);//						bmd.draw(spr);//						//						_buffer.copyPixels(bmd, _rectangle, _point);//					}//					else//					{//						_buffer.copyPixels(_emptyTile, _rectangle, _point);//					}//				}//			}					//var gridX:int = (x < _viewCols ? x : x - 1) + (xPos / _tileWidth);					//var gridY:int = (y < _viewRows ? y : y - 1) + (yPos / _tileHeight);//					var tileID:int = 0;//					var gridX:int = x + (xPos / _tileWidth);//					var gridY:int = y + (yPos / _tileHeight);//					if (gridX < _grid.width && gridY < _grid.height)//					{//						tileID = _grid.getCell(gridX, gridY);//					}//		}				/**		 * Returns a String Representation of TileLayer.		 * @return A String Representation of TileLayer.		 */		override public function toString():String		{			return "[TileLayer, index=" + _index + ", layerName=" + _name + "]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get index():int		{			return _index;		}		public function set index(v:int):void		{			_index = v;		}						public function get layerName():String		{			return _name;		}		public function set layerName(v:String):void		{			_name = v;		}						public function get tileSetID():String		{			return _tileSetID;		}		public function set tileSetID(v:String):void		{			_tileSetID = v;		}						public function get tileSet():TileSet		{			return _tileSet;		}		public function set tileSet(v:TileSet):void		{			_tileSet = v;		}						public function get tileAnimFPS():int		{			return _tileAnimFPS;		}		public function set tileAnimFPS(v:int):void		{			_tileAnimFPS = v;		}						public function get transparent():Boolean		{			return _transparent;		}		public function set transparent(v:Boolean):void		{			_transparent = v;		}						public function get fillColor():uint		{			return _fillColor;		}		public function set fillColor(v:uint):void		{			_fillColor = v;		}						public function get grid():Grid2D		{			return _grid;		}						public function get properties():PropertyMap		{			return _properties;		}						public function get masked():Boolean		{			return _masked;		}		public function set masked(v:Boolean):void		{			_masked = v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onTileAnimTimer(e:TimerEvent):void		{			/* Update the synced frame count of every anim tile with the same id. */			for (var id:String in _animTileFrameCounts)			{				var fc:int = _animTileFrameCounts[id];				var ft:int = _tileSet.animTileFrameTotals[id];				if (fc < 1) fc = ft - 1;				else fc--;				_animTileFrameCounts[id] = fc;			}						/* Loop through all anim tiles that are currently rendered. */			for (var key:String in _animTiles)			{				var t:AnimTile = _animTiles[key];								if (t)				{					t.currentFrame = _animTileFrameCounts[t.id];										if (t.currentFrame < 1)					{						if (t.loops > 9)						{							_animTiles[key] = null;							_tileAnimRenderCount--;							//Debug.trace("REMOVED: " + key + " (" + _tileAnimVisibleCount + " left)");							if (_tileAnimRenderCount < 1)							{								//Debug.trace("ALL REMOVED! " + _tileAnimRenderCount);								_animTiles = {};							}						}						else						{							t.loops++;							//Debug.trace("TILE AT 0: " + key + "  " + t.loops);						}					}					//					if (_tileAnimLoopCount == 10)//					{//						_tileAnimLoopCount = 0;////						Debug.trace("VISIBLE TILES: " + _tileAnimVisibleCount);//					}					//					if (t.currentFrame == 0)//					{//						if (_animTilesExpired[key])//						{//							_animTiles[key] = _animTilesExpired[key] = null;//							_tileAnimVisibleCount--;//							Debug.trace("REMOVED: " + key + " (" + _tileAnimVisibleCount + " left)");//							//							if (_tileAnimVisibleCount < 1)//							{//								Debug.trace("ALL REMOVED! " + _tileAnimVisibleCount);//								Debug.traceObj(_animTiles);//								_animTiles = {};//							}//						}//					}				}//				else//				{//					//Debug.trace("not found: " + key);//				}																			//Debug.trace(key);//					if (t && _animTileFrameCounts[t.id] == 0)//					{//					}										//if (key == "4_4") Debug.trace(t.currentFrame);//					if (t && t.currentFrame == 0)//					{//						_animTiles[key] = null;//						_tileAnimVisibleCount--;//						Debug.trace("1 REMOVED. " + _tileAnimVisibleCount + " left.");//						//						if (_tileAnimVisibleCount < 1)//						{//							Debug.trace("ALL REMOVED! " + _tileAnimVisibleCount);//							Debug.traceObj(_animTiles);//							_animTiles = {};//						}//					}							}		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * calculateBufferSize		 * @private		 */		protected function calculateBufferSize():void		{//			var gridW:int = _grid.width * _tileWidth;//			var gridH:int = _grid.height * _tileHeight;//			//			/* If the grid is smaller (or equal) to the window size, the buffer size//			 * can be the same as the grid size since no scrolling is necessary but if//			 * the grid is larger, the buffer needs to be the view size + one column//			 * and row of a tile width/height *///			if (gridW <= _viewWidth)//			{//				_bufferWidth = gridW;//			}//			else//			{//				_bufferWidth = _viewWidth - (_viewWidth % _tileWidth) + _tileWidth;//			}//			//			if (gridH <= _viewHeight)//			{//				_bufferHeight = gridH;//			}//			else//			{//				_bufferHeight = _viewHeight - (_viewHeight % _tileHeight) + _tileHeight;//			}//			//			_bufferWidthTiles = _bufferWidth / _tileWidth;//			_bufferHeightTiles = _bufferHeight / _tileHeight;//			//			//Debug.trace("gridW=" + gridW, Debug.LEVEL_DEBUG);//			//Debug.trace("gridH=" + gridH, Debug.LEVEL_DEBUG);//			//Debug.trace("bufferWidth=" + _bufferWidth, Debug.LEVEL_DEBUG);//			//Debug.trace("bufferHeight=" + _bufferHeight, Debug.LEVEL_DEBUG);//			//Debug.trace("bufferWidthTiles=" + _bufferWidthTiles, Debug.LEVEL_DEBUG);//			//Debug.trace("bufferHeightTiles=" + _bufferHeightTiles, Debug.LEVEL_DEBUG);		}	}}