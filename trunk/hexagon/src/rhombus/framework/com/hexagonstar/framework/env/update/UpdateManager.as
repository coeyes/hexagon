/* * rhombus - Application framework for web/desktop-based Flash & Flex projects. *  *  /\ RHOMBUS *  \/ FRAMEWORK *  * Licensed under the MIT License * Copyright (c) 2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.framework.env.update{	import air.update.ApplicationUpdaterUI;	import air.update.events.StatusUpdateErrorEvent;	import air.update.events.UpdateEvent;	import com.hexagonstar.core.BasicClass;	import com.hexagonstar.exception.SingletonException;	import com.hexagonstar.framework.util.Log;	import flash.events.ErrorEvent;		/**	 * Handles updates for AIR applications.	 * 	 * @author Sascha Balkau	 * @version 1.0.0	 */	public class UpdateManager extends BasicClass	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		private static var _instance:UpdateManager;		/** @private */		private static var _singletonLock:Boolean = false;		/** @private */		private var _updater:ApplicationUpdaterUI;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new instance of the class.		 */		public function UpdateManager()		{			if (!_singletonLock) throw new SingletonException(this);			setup();		}						/**		 * initialize		 */		public function initialize():void		{			_updater.initialize();		}						/**		 * checkForUpdate		 */		public function checkForUpdate():void		{			_updater.isCheckForUpdateVisible = true;			_updater.checkNow();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns the singleton instance of UpdateManager.		 */		public static function get instance():UpdateManager		{			if (_instance == null)			{				_singletonLock = true;				_instance = new UpdateManager();				_singletonLock = false;			}			return _instance;		}						public function get applicationUpdater():ApplicationUpdaterUI		{			return _updater;						}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		private function onInitialized(e:UpdateEvent):void 		{			Log.debug(toString() + " Initialized. (currentVersion: "				+ _updater.currentVersion + ").");		}				/**		 * @private		 */		private function onUpdateError(e:StatusUpdateErrorEvent):void 		{			Log.warn(toString() + " Update Error: " + e.text				+ " (errorID: " + e.errorID + ", subErrorID: " + e.subErrorID + ").");		}						/**		 * @private		 */		private function onError(e:ErrorEvent):void		{			Log.warn(toString() + " Update Error: " + e.text);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		private function setup():void		{			_updater = new ApplicationUpdaterUI();			_updater.updateURL = Main.config.updateURL;			_updater.delay = Main.config.updateCheckInterval;			_updater.isCheckForUpdateVisible = Main.config.updateCheckVisible;			_updater.isDownloadProgressVisible = Main.config.updateDownloadProgressVisible;			_updater.isDownloadUpdateVisible = Main.config.updateDownloadUpdateVisible;			_updater.isFileUpdateVisible = Main.config.updateFileUpdateVisible;						/* Custom comparison function that takes build nr. into account.			 * Version string structure is major.minor.maintenance.build.			 * Only numbers are allowed. */			_updater.isNewerVersionFunction = function(cv:String, nv:String):Boolean			{				var c:Array = cv.split(".");				var n:Array = nv.split(".");				if (int(n[0]) > int(c[0])) return true;				if (int(n[1]) > int(c[1])) return true;				if (int(n[2]) > int(c[2])) return true;				if (int(n[3]) > int(c[3])) return true;				return false;			};						_updater.addEventListener(UpdateEvent.INITIALIZED, onInitialized);			_updater.addEventListener(StatusUpdateErrorEvent.UPDATE_ERROR, onUpdateError);			_updater.addEventListener(ErrorEvent.ERROR, onError);		}	}}