/* * rhombus - Application framework for web/desktop-based Flash & Flex projects. *  *  /\ RHOMBUS *  \/ FRAMEWORK *  * Licensed under the MIT License * Copyright (c) 2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.framework.io.resource{	import com.hexagonstar.exception.NullReferenceException;	import com.hexagonstar.framework.event.ResourceEvent;	import com.hexagonstar.framework.io.resource.provider.FallbackResourceProvider;	import com.hexagonstar.framework.io.resource.provider.IResourceProvider;	import com.hexagonstar.framework.util.Log;	import flash.events.Event;	import flash.utils.Dictionary;	import flash.utils.setTimeout;		/**	 * ResourceManager	 * @author Sascha Balkau	 */	public class ResourceManager	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		private static var _instance:ResourceManager;		/** @private */		private static var _singletonLock:Boolean = false;		        /**         * Dictionary of loaded resources indexed by resource name and type.         * @private         */        private var _resources:Dictionary;        		/**		 * List of resource providers used to get resources.          * @private		 */        		private var _providers:Vector.<IResourceProvider>;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new instance of the class.		 */		public function ResourceManager()		{			if (!_singletonLock)			{				throw new Error("Tried to instantiate ResourceManager through it's constructor."					+ " Use the instance property instead.");			}						_resources = new Dictionary();			_providers = new Vector.<IResourceProvider>();		}						/**		 * load		 * 		 * @param path The file path to the resource.		 * @param type The resource type ID.         * @param forceReload Determines if the resource should be reloaded, even if         *         it has already been loaded.		 */		public function load(path:String,								type:Class,								loadedHandler:Function = null,								failedHandler:Function = null,								forceReload:Boolean = false):void		{			var identifier:String = path + "_" + type;			var resource:Resource = _resources[identifier];						/* If resource was loaded and we want to force a reload, do that. */			if (resource && forceReload)			{				_resources[identifier] = null;				delete _resources[identifier];				resource = null;			}						if (!resource)			{				/* Check available resource providers and request the resource if it is known. */				for (var i:int = 0; i < _providers.length; i++)				{					if (_providers[i].isResourceKnown(path, type))					{						resource  = _providers[i].getResource(path, type, forceReload);					}				}								if (!resource)				{					resource = FallbackResourceProvider.instance.getResource(path, type, forceReload);				}								_resources[identifier] = resource;			}			else if (!(resource is type))			{				fail(resource, failedHandler, "The resource <" + path					+ "> is already loaded, but is not of type " + type + ".");				return;			}						if (resource.failed)			{				fail(resource, failedHandler, "The resource <" + path					+ "> has previously failed to load.");			}			else if (resource.loaded)			{				if (loadedHandler != null)				{					setTimeout(loadedHandler, 1, resource);				}			}			else			{				/* Still in process, so just hook up to its events. */				if (loadedHandler != null)				{					resource.addEventListener(ResourceEvent.LOADED,						function (e:Event):void {loadedHandler(resource);}, false, 0, true);				}				if (failedHandler != null)				{					resource.addEventListener(ResourceEvent.FAILED,						function (e:Event):void {failedHandler(resource);}, false, 0, true);				}			}						resource.incrementReferenceCount();		}						/**		 * unload		 */		public function unload():void		{					}						/**		 * Properly marks a resource as failed-to-load.		 */		private function fail(resource:Resource, failedHandler:Function, message:String):void		{			if (!resource)			{				throw new NullReferenceException("Tried to fail a resource that is null.");			}						Log.error(toString() + " " + message);						if (failedHandler != null)			{				setTimeout(failedHandler, 1, resource);			}		}		        		/**		 * Returns a String Representation of ResourceManager.		 * 		 * @return A String Representation of ResourceManager.		 */		public function toString():String		{			return "[ResourceManager]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns the singleton instance of ResourceManager.		 */		public static function get instance():ResourceManager		{			if (_instance == null)			{				_singletonLock = true;				_instance = new ResourceManager();				_singletonLock = false;			}			return _instance;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////			}}