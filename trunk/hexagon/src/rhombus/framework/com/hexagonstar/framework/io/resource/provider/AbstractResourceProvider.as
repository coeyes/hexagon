/* * rhombus - Application framework for web/desktop-based Flash & Flex projects. *  *  /\ RHOMBUS *  \/ FRAMEWORK *  * Licensed under the MIT License * Copyright (c) 2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.framework.io.resource.provider{	import com.hexagonstar.framework.io.resource.Resource;	import com.hexagonstar.framework.io.resource.ResourceManager;	import flash.utils.Dictionary;		/**	 * The AbstractResourceProvider class can be extended to create a ResourceProvider	 * that will auto register with the ResourceManager.	 * 	 * @author Sascha Balkau	 */	public class AbstractResourceProvider implements IResourceProvider	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _resources:Dictionary;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AbstractResourceProvider instance.		 */		public function AbstractResourceProvider(registerProvider:Boolean = true)		{			/* Register this ResourceProvider with the ResourceManager. */			if (registerProvider)			{                ResourceManager.instance.registerResourceProvider(this);			}						/* Create the Dictionary object that will keep all resources. */			_resources = new Dictionary();		}						/**		 * @inheritDoc		 */		public function isResourceKnown(path:String, type:Class):Boolean		{			return (_resources[ResourceManager.createIdentifier(path, type)] != null);		}						/**		 * @inheritDoc		 */		public function getResource(path:String, type:Class,			forceReload:Boolean = false):Resource		{			return _resources[ResourceManager.createIdentifier(path, type)];		}						/**		 * This method will add a resource to the resources Dictionary.		 * 		 * @param path		 * @param type		 * @param resource		 */		protected function addResource(path:String, type:Class, resource:Resource):void		{			_resources[ResourceManager.createIdentifier(path, type)] = resource;		}	}}