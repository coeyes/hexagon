/* * tetragonlib - ActionScript 3 Game Library. *    ____ *   /    / TETRAGON *  /____/  LIBRARY *  * Licensed under the MIT License *  * Copyright (c) 2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.game.tile{	import com.hexagonstar.core.BasicClass;	import com.hexagonstar.data.types.MetaData;	import com.hexagonstar.game.tile.ds.PropertyMap;	import com.hexagonstar.game.tile.ds.PropertyPoolMap;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Rectangle;			/**	 * TileSet represents a set of tiles for the TileScroller.	 * The TileSet takes a data array which contains tile IDs and properties	 * and a bitmap that contains the graphic tiles and processes these	 * assets into single tile objects that can be used with the TileEngine.	 */	public class TileSet extends BasicClass	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _id:String;		protected var _tileWidth:int;		protected var _tileHeight:int;		protected var _tileGap:int;		protected var _tileCount:int;		protected var _realTileCount:int;		protected var _tileImageFilePath:String;		protected var _bgColor:uint;		protected var _isTransparent:Boolean;				protected var _metaData:MetaData;				protected var _tiles:Vector.<ITile>;				protected var _propertyPool:PropertyPoolMap;		protected var _globalProperties:PropertyMap;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new TileSet instance.		 */		public function TileSet()		{			_metaData = new MetaData();			_tiles = new Vector.<ITile>();			_propertyPool = new PropertyPoolMap(100);			_globalProperties = new PropertyMap(20);		}						////////////////////////////////////////////////////////////////////////////////////////		// Tile Operations                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Adds the specified Tile to the TileSet.		 * 		 * @param tile The Tile to add to the TileSet.		 */		public function addTile(tile:ITile):void		{			_tiles.push(tile);		}						/**		 * Returns the Tile with the specified ID.		 * 		 * @param tileID ID of the tile to return.		 * @return The Tile with the specified ID.		 */		public function getTile(tileID:int):ITile		{			/* tileID needs to be - 1 because the tileArray starts at 0,			 * while the assigned tile IDs start at 1. */			return _tiles[tileID - 1];		}						/**		 * Replaces the Tile with the specified ID with the specified Tile.		 * 		 * @param tileID The ID of the Tile that is to be replaced.		 * @param tile The replacing Tile.		 */		public function replaceTile(tileID:int, tile:ITile):void		{			_tiles.splice(tileID - 1, 1, tile);		}						/**		 * Duplicates a specified Tile with all its attributes and properties		 * to a new instance of its type. This is used by the TileEngine to		 * populate the screen with several animated tiles of the same tile ID.		 * 		 * @param tile The Tile to duplicate.		 * @return The duplicated Tile.		 */		public function duplicateTile(tile:ITile):ITile		{			if (tile is AnimTile)			{				var d1:AnimTile = new AnimTile(tile.id);				var t:AnimTile = tile as AnimTile;				var subFrameCount:int = t.subFrameCount;				var tileWidth:int = _tileWidth * (subFrameCount + 1);								d1.bitmapData = new BitmapData(tileWidth, _tileHeight, _isTransparent, _bgColor);				t.cloneBufferTo(d1);				d1.scrollRect = new Rectangle(0, 0, _tileWidth, _tileHeight);				d1.subFrameCount = subFrameCount;				return d1;			}			else			{				var d2:Tile = new Tile(tile.id);				d2.bitmapData = new BitmapData(_tileWidth, _tileHeight, _isTransparent, _bgColor);				(tile as Tile).cloneBufferTo(d2);				return d2;			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Property Pool Operations                                                           //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Adds a new Pool Property with the specified name and defaultValue to		 * the Tileset. If any ID was provided it is used as the ID to identify		 * the property otherwise the Tileset will use a unique upcounting ID for		 * every added property.		 * 		 * @param id An integer that is used as the property's ID.		 * @param name The name of the new Pool Property.		 * @param defaultValue A default value with that the property is stored.		 */		public function addPoolProperty(id:int, name:String, defaultValue:* = null):void		{			_propertyPool.put(id, name, defaultValue);		}						/**		 * Removes a Pool Property from the Tileset.		 * @param id the ID of the property which should be removed.		 */		public function removePoolProperty(id:int):void		{			_propertyPool.remove("" + id);		}						/**		 * Returns the name of the pool property that is mapped with the		 * specified ID.		 * 		 * @param id The Pool Property's ID.		 * @return The name of the Pool Property.		 */		public function getPoolPropertyName(id:int):String		{			return _propertyPool.getPropertyName(id);		}						/**		 * Returns the default value of the pool property that is mapped		 * with the specified ID.		 * 		 * @param id The Pool Property's ID.		 * @return The default value of the Pool Property.		 */		public function getPoolPropertyDefaultValue(id:int):*		{			return _propertyPool.getDefaultValue(id);		}						////////////////////////////////////////////////////////////////////////////////////////		// Global Property Operations                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Adds a new Global Property to the TileSet.		 * 		 * @param id The property ID.		 * @param value The property value.		 */		public function addGlobalProperty(id:String, value:*):void		{			_globalProperties.put(id, value);		}						/**		 * Checks if the TileSet contains a Global Property with the specified		 * ID and returns true if one is found.		 * 		 * @param id The property ID to check for.		 * @return true if the global property exists.		 */		public function containsGlobalProperty(id:String):Boolean		{			return _globalProperties.containsID(id);		}				/**		 * Removes the global property with the specified ID from the TileSet.		 * @param id The ID of the global property to be removed.		 */		public function removeGlobalProperty(id:String):void		{			_globalProperties.remove(id);		}						/**		 * Returns the value of the specified TileSet's global property.		 * @return The value of the specified TileSet's global property.		 */		public function getGlobalPropertyValue(id:String):*		{			return _globalProperties.getValue(id);		}						////////////////////////////////////////////////////////////////////////////////////////		// Query Operations                                                                   //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns a new Array that contains all Tiles of the TileSet.		 * @return A new Array that contains all Tiles of the TileSet.		 */		public function toArray():Array		{			// TODO			//return getTiles();			return null;		}						/**		 * Returns a String that contains informative data about the TileSet.		 */		public function dump():String		{			var s:String = toString();			for each (var t:ITile in _tiles)			{				s += "\n[Tile, id=" + t.id					+ ", copyOf=" + t.copyOf					+ ", properties=" + t.properties.size;								if (t is AnimTile) s += ", subFrameCount=" + (t as AnimTile).subFrameCount;				s += "]";			}			return s;		}						/**		 * Returns a String representation of the TileSet Object.		 * @return A String representation of the TileSet Object.		 */		override public function toString(...args):String		{			return super.toString("id=" + id, "tileCount=" + tileCount);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns the ID String of the TileSet.		 */		public function get id():String		{			return _id;		}		public function set id(v:String):void		{			_id = v;		}						/**		 * Returns the Tile width of the Tiles in the TileSet.		 */		public function get tileWidth():int		{			return _tileWidth;		}		public function set tileWidth(v:int):void		{			_tileWidth = v;		}						/**		 * Returns the Tile height of the Tiles in the TileSet.		 */		public function get tileHeight():int		{			return _tileHeight;		}		public function set tileHeight(v:int):void		{			_tileHeight = v;		}						/**		 * Returns true if the TileSet uses Alpha Transparency.		 */		public function get isTransparent():Boolean		{			return _isTransparent;		}		public function set isTransparent(v:Boolean):void		{			_isTransparent = v;		}						/**		 * Returns the background (index) color of the TileSet.		 */		public function get backgroundColor():uint		{			return _bgColor;		}		public function set backgroundColor(v:uint):void		{			_bgColor = v;		}						/**		 * Returns the Image file path of the image used for Tiles.		 */		public function get tileImageFilePath():String		{			return _tileImageFilePath;		}		public function set tileImageFilePath(v:String):void		{			_tileImageFilePath = v;		}						/**		 * Returns the pixel gap size that the tiles have on the image.		 */		public function get tileGap():int		{			return _tileGap;		}		public function set tileGap(v:int):void		{			_tileGap = v;		}						/**		 * Returns the amount of properties mapped in the poolProperties.		 */		public function get propertyPoolSize():int		{			return _propertyPool.size;		}						/**		 * Returns a map of the TileSet's Pool Properties.		 */		public function get propertyPool():PropertyPoolMap		{			return _propertyPool;		}						/**		 * Returns a new associative Array that contains all property/value		 * pairs from the TileSet's global Properties. The resulting array		 * contains objects with the fields 'property' and 'value'.		 * 		 * @return A new associative Array that contains all property/value		 * pairs from the TileSet's global Properties.		 */		public function get globalProperties():PropertyMap		{			return _globalProperties;		}						/**		 * Returns a new Vector that contains all Tiles of the TileSet.		 */		public function get tiles():Vector.<ITile>		{			return _tiles.concat();		}						/**		 * Returns the amount of Tiles that the TileSet contains.		 */		public function get tileCount():int		{			return _tiles.length;		}						public function set tileSetBitmap(v:Bitmap):void		{			// TODO		}						public function set tileSetData(v:Array):void		{			// TODO		}						/**		 * Returns the meta data object of the TileSet.		 */		public function get metaData():MetaData		{			return _metaData;		}	}}