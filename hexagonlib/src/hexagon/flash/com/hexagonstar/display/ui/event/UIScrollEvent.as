/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.display.ui.event{	import flash.events.Event;		/**	 * The ScrollEvent class defines the scroll event that is associated with	 * the ScrollBar component.	 */	public class UIScrollEvent extends Event	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Defines the value of the <code>type</code> property of a <code>scroll</code>		 * event object. <p>This event has the following properties:</p> <table		 * class="innertable" width="100%"> <tr><th>Property</th><th>Value</th></tr>		 * <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>		 * <tr><td><code>cancelable</code></td><td><code>false</code>; there is no default		 * behavior to cancel.</td></tr> <tr><td><code>currentTarget</code></td><td>The		 * object that is actively processing the event object with an event		 * listener.</td></tr> <tr><td><code>delta</code></td><td><code>1</code>; a value		 * that indicates how much scrolling was done. </td></tr>		 * <tr><td><code>direction</code></td><td><code>vertical</code>; the direction of		 * the ScrollBar.</td></tr> <tr><td><code>position</code></td><td><code>0</code>;		 * the position of the Scrollbar thumb after it was moved. </td></tr>		 * <tr><td><code>target</code></td><td>The object that dispatched the event. The		 * target is not always the object listening for the event. Use the		 * <code>currentTarget</code> property to access the object that is listening for		 * the event.</td></tr> </table>		 * 		 * @eventType scroll		 */		public static const SCROLL:String = "scroll";						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				private var _direction:String;		private var _delta:Number;		private var _position:Number;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new ScrollEvent object with the specified parameters.		 * 		 * @param direction The direction of movement associated with the event. A value of		 *            <code>ScrollBarDirection.HORIZONTAL</code> indicates horizontal		 *            movement; a value of <code>ScrollBarDirection.VERTICAL</code>		 *            indicates vertical movement.		 * @param delta The change in scroll position, in pixels. A positive value indicates		 *            that the direction of the scroll was down or to the right. A negative		 *            value indicates that the direction of the scroll was up or to the		 *            left.		 * @param position The current scroll position.		 */		public function UIScrollEvent(direction:String, delta:Number, position:Number)		{			super(UIScrollEvent.SCROLL, false, false);						_direction = direction;			_delta = delta;			_position = position;		}						/**		 * Returns a string that contains all the properties of the ScrollEvent object. The		 * string has the following format: <p>[<code>ScrollEvent type=<em>value</em>		 * bubbles=<em>value</em> cancelable=<em>value</em> direction=<em>value</em>		 * delta=<em>value</em> position=<em>value</em></code>]</p>		 * 		 * @return A string representation of the ScrollEvent object.		 */		override public function toString():String		{			return formatToString("ScrollEvent", "type", "bubbles", "cancelable",				"direction", "delta", "position");		}						/**		 * Creates a copy of the ScrollEvent object and sets the value of each parameter to 		 * match the original.		 *		 * @return A new ScrollEvent object with parameter values that match the original.		 */		override public function clone():Event		{			return new UIScrollEvent(_direction, _delta, _position);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Gets a constant value that indicates the direction of movement associated with		 * the event. A value of <code>ScrollBarDirection.HORIZONTAL</code> indicates		 * horizontal movement; a value of <code>ScrollBarDirection.VERTICAL</code> indicates		 * vertical movement.		 *		 * @see fl.controls.ScrollBarDirection		 */		public function get direction():String		{			return _direction;		}				/**		 * Gets the size of the change in scroll position, in pixels. A positive value 		 * indicates that the direction of the scroll was down or to the right. A negative		 * value indicates that the direction of the scroll was up or to the left.		 */		public function get delta():Number		{			return _delta;		}				/**		 * Gets the current scroll position, in pixels.		 */		public function get position():Number		{			return _position;		}	}}