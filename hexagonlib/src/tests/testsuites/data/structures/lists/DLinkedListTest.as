/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package testsuites.data.structures.lists{	import flexunit.framework.*;		import com.hexagonstar.data.structures.lists.DLinkedList;	import com.hexagonstar.util.debug.Debug;			public class DLinkedListTest extends TestCase	{		private var _collection:DLinkedList;		//--------------------------------------------------------------------------------------				public function DLinkedListTest(name:String = null)		{			super(name);		}						override public function setUp():void		{			Assert.resetAssertionsMade();		}            		//--------------------------------------------------------------------------------------      		public function testAll():void		{			Debug.trace("\n\n*******************************************************\n"				+ "DLinkedListTest Tests"				+ "\n*******************************************************");						createEmpty();			create();						append();			add();			prepend();			insert();			replace();			removeByIndex();			removeFirst();			removeLast();			remove();						getElementAt();			contains();			indexOf();			join();			clone();			toArray();						addAll();			insertAll();			replaceAll();			containsAll();			removeAll();			retainAll();			clear();		}						private function log(title:String = ""):void		{			if (title.length > 0)			{				logTitle(title);			}			else			{				Debug.delimiter();			}						Debug.trace(_collection.dump());		}				private function logTitle(title:String = ""):void		{			Debug.trace("\n\n========================================\n"				+ "DLinkedListTest " + title				+ "\n========================================");		}						//--------------------------------------------------------------------------------------				private function createEmpty():void		{			_collection = new DLinkedList();			assertStrictlyEquals(_collection, _collection);			assertEquals(_collection.size, 0);			assertTrue(_collection.isEmpty);			log("create (empty)");		}				private function create():void		{			_collection = new DLinkedList("Jenn", "Cami", "Abby");			assertStrictlyEquals(_collection, _collection);			assertEquals(_collection.size, 3);			assertFalse(_collection.isEmpty);			log("create");		}						//--------------------------------------------------------------------------------------				private function append():void		{			assertTrue(_collection.append("Bess"));			assertTrue(_collection.append("Lola"));			assertTrue(_collection.append("Anna", "Cari", "Cena"));			assertTrue(_collection.append("Dana"));			assertFalse(_collection.append());			assertEquals(_collection.size, 9);			assertFalse(_collection.isEmpty);			log("append");		}				private function add():void		{			assertTrue(_collection.add("Suzi"));			assertTrue(_collection.add("Taki"));			assertEquals(_collection.size, 11);			assertFalse(_collection.isEmpty);			log("add");		}				private function prepend():void		{			assertTrue(_collection.prepend("Beth"));			assertTrue(_collection.prepend("Yoko", "Lucy", "Elsa"));			assertTrue(_collection.prepend("Faye"));			assertFalse(_collection.prepend());			assertEquals(_collection.size, 16);			assertFalse(_collection.isEmpty);			log("prepend");		}				private function insert():void		{			assertTrue(_collection.insert(-111, "-111"));			assertTrue(_collection.insert(0, "0000"));			assertTrue(_collection.insert(1, "1111"));			assertTrue(_collection.insert(3, "3333"));			assertTrue(_collection.insert(7, "7777"));			assertTrue(_collection.insert(15, "1515"));			assertTrue(_collection.insert(21, "2121"));			assertTrue(_collection.insert(9999, "9999"));			assertEquals(_collection.size, 24);			log("insert");		}				private function replace():void		{			assertEquals(_collection.replace(6, "Kacy"), "Lucy");			assertEquals(_collection.replace(0, "Judy"), "0000");			assertEquals(_collection.replace(23, "Tasa"), "9999");			assertEquals(_collection.replace(21, "Lexi"), "2121");			assertEquals(_collection.size, 24);			log("replace");		}				private function removeByIndex():void		{			assertEquals(_collection.removeByIndex(3), "3333");			assertEquals(_collection.removeByIndex(14), "1515");			assertEquals(_collection.size, 22);			log("removeByIndex");		}				private function removeFirst():void		{			assertEquals(_collection.removeFirst(), "Judy");			assertEquals(_collection.removeFirst(), "1111");			assertEquals(_collection.size, 20);			log("removeFirst");		}				private function removeLast():void		{			assertEquals(_collection.removeLast(), "Tasa");			assertEquals(_collection.removeLast(), "Taki");			assertEquals(_collection.size, 18);			log("removeLast");		}				private function remove():void		{			assertEquals(_collection.remove("-111"), "-111");			assertEquals(_collection.remove("Lexi"), "Lexi");			assertEquals(_collection.remove("Jenn"), "Jenn");			assertEquals(_collection.remove("Dana"), "Dana");			assertUndefined(_collection.remove("XXXX"));						assertTrue(_collection.insert(3, "Mira"));			log("remove");						assertEquals(_collection.remove("Mira"), "Mira");			assertEquals(_collection.size, 14);			log();		}						//--------------------------------------------------------------------------------------				private function getElementAt():void		{			assertEquals(_collection.getElementAt(0), "Faye");			assertEquals(_collection.getElementAt(1), "Yoko");			assertEquals(_collection.getElementAt(5), "Beth");			assertEquals(_collection.getElementAt(10), "Anna");			assertEquals(_collection.getElementAt(12), "Cena");			assertEquals(_collection.getElementAt(13), "Suzi");			assertEquals(_collection.size, 14);			log("getElementAt");		}				private function contains():void		{			assertTrue(_collection.contains("Faye"));			assertTrue(_collection.contains("Yoko"));			assertTrue(_collection.contains("Bess"));			assertTrue(_collection.contains("Cena"));			assertTrue(_collection.contains("Suzi"));			assertFalse(_collection.contains("XXXX"));			assertFalse(_collection.contains(8888));			assertFalse(_collection.contains(null));			assertFalse(_collection.contains(undefined));			assertEquals(_collection.size, 14);			log("contains");		}				private function indexOf():void		{			assertEquals(_collection.indexOf("Faye"), 0);			assertEquals(_collection.indexOf("Yoko"), 1);			assertEquals(_collection.indexOf("Kacy"), 2);			assertEquals(_collection.indexOf("Abby"), 7);			assertEquals(_collection.indexOf("Cari"), 11);			assertEquals(_collection.indexOf("Cena"), 12);			assertEquals(_collection.indexOf("Suzi"), 13);			assertEquals(_collection.indexOf("XXXX"), -1);			assertEquals(_collection.indexOf(null), -1);			assertEquals(_collection.indexOf(undefined), -1);			assertEquals(_collection.size, 14);			log("indexOf");		}				private function join():void		{			Debug.trace("\n\n" + _collection.join());		}				private function clone():void		{			var clone:DLinkedList = _collection.clone();			logTitle("clone");			Debug.trace("Clone:\n" + clone.dump());			assertEquals(clone.size, 14);			assertTrue(_collection.equals(clone));						assertEquals(clone.replace(6, "Tari"), "Cami");			assertFalse(_collection.equals(clone));		}				private function toArray():void		{			var array:Array = _collection.toArray();			logTitle("toArray");			Debug.trace(array);			assertEquals(array.length, 14);		}						//--------------------------------------------------------------------------------------			private function addAll():void		{			var list2:DLinkedList = new DLinkedList("Nell", "Nova", "Nyla");			assertTrue(_collection.addAll(list2));						var emptyList:DLinkedList = new DLinkedList();			assertFalse(_collection.addAll(emptyList));						assertEquals(_collection.size, 17);			log("addAll");		}				private function insertAll():void		{			var list3:DLinkedList = new DLinkedList("Rena", "Rose", "Ruby");			assertTrue(_collection.insertAll(4, list3));						var emptyList:DLinkedList = new DLinkedList();			assertFalse(_collection.insertAll(4, emptyList));						assertEquals(_collection.size, 20);			log();						var list4:DLinkedList = new DLinkedList("Sena", "Sula");			assertTrue(_collection.insertAll(20, list4));						assertEquals(_collection.size, 22);			log("insertAll");		}				private function replaceAll():void		{			var list5:DLinkedList = new DLinkedList("Tori", "Tula", "Tisa");			assertTrue(_collection.replaceAll(2, list5));						var emptyList:DLinkedList = new DLinkedList();			assertFalse(_collection.replaceAll(2, emptyList));						assertEquals(_collection.size, 22);			log("replaceAll");		}				private function containsAll():void		{			var list6:DLinkedList = new DLinkedList("Cami", "Faye", "Yoko", "Sula");			assertTrue(_collection.containsAll(list6));						var list7:DLinkedList = new DLinkedList("Cami", "Faye", "Sena", "Raoul");			assertFalse(_collection.containsAll(list7));						assertEquals(_collection.size, 22);			log("containsAll");		}				private function removeAll():void		{			var list8:DLinkedList = new DLinkedList("Raoul", "Jones", "Cari");			assertTrue(_collection.removeAll(list8));						var list9:DLinkedList = new DLinkedList("James", "Todd", "Sula");			assertTrue(_collection.removeAll(list9));						var list10:DLinkedList = new DLinkedList("Cora", "Todd", "Terry");			assertFalse(_collection.removeAll(list10));						assertEquals(_collection.size, 20);			log("removeAll");		}				private function retainAll():void		{			var list11:DLinkedList = new DLinkedList();			list11.append("Faye", "Tori", "Yoko", "Sena", "Elsa", "Nell", "Raoul");			assertTrue(_collection.retainAll(list11));			assertEquals(_collection.size, 6);						var list12:DLinkedList = new DLinkedList();			list12.append("Faye", "Tori", "Yoko", "Sena", "Elsa", "Nell", "Raoul");			assertFalse(_collection.retainAll(list12));			assertEquals(_collection.size, 6);						var list13:DLinkedList = new DLinkedList("Anabel", "Raoul", "Bill");			assertTrue(_collection.retainAll(list13));			assertEquals(_collection.size, 0);			assertTrue(_collection.isEmpty);						log("retainAll");		}				private function clear():void		{			_collection.append("Zita", "Zeta", "Zoey");			assertEquals(_collection.size, 3);			assertFalse(_collection.isEmpty);			log("clear");						_collection.clear();			assertEquals(_collection.size, 0);			assertTrue(_collection.isEmpty);			log();		}	}}