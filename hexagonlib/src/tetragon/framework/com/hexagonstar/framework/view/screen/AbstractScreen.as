package com.hexagonstar.framework.view.screen{	import com.hexagonstar.display.StageReference;	import com.hexagonstar.event.CommandEvent;	import com.hexagonstar.framework.event.ScreenEvent;	import com.hexagonstar.framework.util.Log;	import com.hexagonstar.framework.view.display.AbstractDisplay;	import flash.display.DisplayObject;	import flash.display.Stage;		/**	 * AbstractScreen Class	 * @author Sascha Balkau <sascha@hexagonstar.com>	 */	public class AbstractScreen extends AbstractDisplay implements IScreen	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected static var _stage:Stage;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AbstractScreen instance.		 */		public function AbstractScreen()		{			super();			_stage = StageReference.stage;		}						/**		 * load		 */		public function load():void		{			onScreenAssetsLoadComplete(null);		}						/**		 * dispose		 */		override public function dispose():void		{			super.dispose();			unload();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onScreenAssetsLoadComplete(e:CommandEvent):void		{			setup();		}						/**		 * @private		 */		protected function onScreenAssetsLoadError(e:CommandEvent):void		{			/* Only log error message (If we'd call setup here too, shit would			 * start to hit the fan!) */			Log.error(toString() + " Error loading screen assets: " + e.message);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		override protected function setup():void		{			super.setup();			dispatchEvent(new ScreenEvent(ScreenEvent.CREATED, this));		}						/**		 * unload		 * @private		 */		protected function unload():void		{			/* Abstract method! */		}						/**		 * Calculates and returns the horizontal center of the specified display		 * object in regard to the application stage.		 * @private		 * 		 * @param d The display object for which to calculate the horizontal center.		 * @return The horizontal center of d.		 */		protected static function horizontalCenter(d:DisplayObject):Number		{			return Math.round((_stage.stageWidth / 2) - (d.width / 2));		}						/**		 * Calculates and returns the vertical center of the specified display		 * object in regard to the application stage.		 * @private		 * 		 * @param d The display object for which to calculate the vertical center.		 * @return The vertical center of d.		 */		protected static function verticalCenter(d:DisplayObject):Number		{			return Math.round((_stage.stageHeight / 2) - (d.height / 2));		}	}}