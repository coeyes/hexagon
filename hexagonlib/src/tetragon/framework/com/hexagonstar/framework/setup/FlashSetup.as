package com.hexagonstar.framework.setup{	import com.hexagonstar.framework.Main;	import com.hexagonstar.framework.command.CommandInvoker;	import com.hexagonstar.framework.model.Config;	import com.hexagonstar.framework.view.console.Console;	import com.hexagonstar.framework.view.console.FPSMonitor;	import flash.display.Sprite;		/**	 * FlashSetup Class	 * @author Sascha Balkau <sascha@hexagonstar.com>	 */	public class FlashSetup implements ISetup	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		private var _app:Sprite;		/** @private */		private var _config:Config;				private var _console:Console;		private var _fpsMonitor:FPSMonitor;		private var _commandInvoker:CommandInvoker;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Constructs a new FlashSetup instance.		 */		public function FlashSetup()		{			_app = Main.app;			_config = Main.config;		}						/**		 * Executes setup tasks that need to be done before the application UI is created.		 */		public function preUISetup():void		{		}						/**		 * Executes setup tasks that need to be done after the application UI is created.		 */		public function postUISetup():void		{		}						/**		 * Executes setup tasks that need to be done after the application init process		 * has been initiated and right after the application config was loaded.		 */		public function intermediateSetup():void		{			/* We make the console available to the user right after the config file			 * was loaded in case data file loading takes long (e.g. on the web) or			 * in case an error happens during initialization. */			createFPSMonitor();			createConsole();		}						/**		 * Executes setup tasks that need to be done after the application init process		 * has finished but before the application grants user interaction or executes		 * any further things that happen after the app initialization.		 */		public function finalSetup():void		{		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get console():Console		{			return _console;		}				public function get commandInvoker():CommandInvoker		{			return _commandInvoker;		}				////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		private function createFPSMonitor():void		{			if (!_fpsMonitor && _config.fpsMonitorEnabled)			{				_fpsMonitor = FPSMonitor.instance;				_fpsMonitor.pollInterval = _config.fpsMonitorPollInterval;				_app.addChild(_fpsMonitor);			}		}						/**		 * @private		 */		private function createConsole():void		{			if (!_console && _config.consoleEnabled)			{				_commandInvoker = new CommandInvoker();								_console = Console.instance;				_console.cliCommandInvoker = _commandInvoker;				_console.consoleEnabled = _config.consoleEnabled;				_console.transparency = _config.consoleTransparency;				_console.maxBufferSize = _config.consoleMaxBufferSize;				_app.addChild(_console);								if (_config.consoleEnabled && _config.consoleAutoOpen)				{					_console.toggle();				}			}		}	}}