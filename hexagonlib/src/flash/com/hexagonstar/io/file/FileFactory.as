/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file{	import com.hexagonstar.env.exception.IllegalArgumentException;	import com.hexagonstar.io.file.types.*;		/**	 * FileFactory creates Files.	 */	public class FileFactory	{		////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new FileFactory instance.		 */		public function FileFactory()		{		}						/**		 * Creates a new File which type depends on the specified ID. Use the		 * IDs specified in com.hexagonstar.io.file.types.FileTypeIndex to		 * determine the file ID.		 *		 * @param id the ID of the file type.		 * @return A new file instance specific to the passed-in ID.		 * 		 * @throws com.hexagonstar.env.exception.IllegalArgumentException if		 *         the specified ID is not known to the FileFactory.		 */		public function create(id:int):IFile		{			var file:IFile = null;						switch (id)			{				case FileTypeIndex.BINARY_FILE_ID:					file = new BinaryFile();					break;				case FileTypeIndex.TEXT_FILE_ID:					file = new TextFile();					break;				case FileTypeIndex.XML_FILE_ID:					file = new XMLFile();					break;				case FileTypeIndex.CSS_FILE_ID:					file = new CSSFile();					break;				case FileTypeIndex.MEDIA_FILE_ID:					file = new MediaFile();					break;				case FileTypeIndex.IMAGE_FILE_ID:					file = new ImageFile();					break;				case FileTypeIndex.SWF_FILE_ID:					file = new SWFFile();					break;				case FileTypeIndex.VIDEO_FILE_ID:					file = new VideoFile();					break;				case FileTypeIndex.SOUND_FILE_ID:					file = new SoundFile();					break;				case FileTypeIndex.TILESET_FILE_ID:					file = new TileSetFile();					break;				case FileTypeIndex.ZIP_FILE_ID:					file = new ZIPFile();					break;				default:					throw new IllegalArgumentException("A filetype with the ID " + id						+ " has not been specified in the FileType Index!");			}						return file;		}	}}