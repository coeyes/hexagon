/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file{	import com.hexagonstar.data.structures.queues.Queue;	import com.hexagonstar.data.types.Byte;	import com.hexagonstar.env.event.FileIOEvent;	import com.hexagonstar.env.exception.DataStructureException;	import com.hexagonstar.env.exception.EmptyDataStructureException;	import com.hexagonstar.io.file.loaders.FileTypeLoaderFactory;	import com.hexagonstar.io.file.loaders.IFileTypeLoader;	import com.hexagonstar.io.file.types.IFile;	import flash.events.EventDispatcher;		/**	 * QueueFileReader Class	 */	public class QueueFileReader extends EventDispatcher implements IFileReader	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _file:IFile;		protected var _fileLoaderFactory:FileTypeLoaderFactory;		protected var _fileLoader:IFileTypeLoader;				protected var _fileQueue:Queue;		protected var _tempQueue:Queue;				protected var _currentFilePath:String;		protected var _currentIndex:int;		protected var _fileCount:int;				protected var _filePercentage:Number;		protected var _bytesLoaded:int;		protected var _totalPercentage:Number;		protected var _totalBytesLoaded:Byte;				protected var _isAborted:Boolean;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new QueueFileReader instance.		 */		public function QueueFileReader()		{			super();			reset();		}						/**		 * reset		 */		public function reset():void		{			_fileLoaderFactory = new FileTypeLoaderFactory();						_fileQueue = new Queue();			_tempQueue = new Queue();						_currentFilePath = null;			_currentIndex = -1;			_fileCount = 0;						_filePercentage = 0;			_bytesLoaded = 0;			_totalPercentage = 0;			_totalBytesLoaded = new Byte(0);						_isAborted = false;		}						/**		 * Adds a new file to the file reader's file queue.		 * 		 * @param file a File that is to be loaded.		 */		public function addFile(file:IFile):void		{			if (!_fileQueue)			{				_fileQueue = new Queue();			}						_fileQueue.enqueue(file);			_fileCount = _fileQueue.size;		}						/**		 * load		 */		public function load():void		{			if (_fileQueue.isEmpty)			{				throw new EmptyDataStructureException(toString()					+ " Tried to load files from an empty file queue.");				return;			}						_file = _fileQueue.dequeue();						if (_file is IFile)			{				_currentFilePath = _file.path;				_currentIndex++;				_fileLoader = _fileLoaderFactory.create(_file);				addLoaderEventListeners();								/* Catch security exception here in case the application tries				 * to locally load a resource from a non-trusted location */				try				{					_fileLoader.load(_currentFilePath);				}				catch (e:Error)				{					onSecurityError(new FileIOEvent(FileIOEvent.SECURITY_ERROR,					_file, e.message					+ " (Probably tried to load a local resource from a non-trusted location)."));				}			}			else			{				throw new DataStructureException(toString()					+ " Tried to use a queue that contains objects which are not of type IFile.");				return;			}		}						/**		 * pause		 */		public function pause():void		{			// TODO		}						/**		 * abort		 */		public function abort():void		{			_isAborted = true;			if (isLoading) _fileLoader.abort();			onAbort(new FileIOEvent(FileIOEvent.ABORT, _file));		}						/**		 * Disposes QueueFileReader.		 */		public function dispose():void		{			_fileLoader.dispose();			_fileLoader = null;			_fileLoaderFactory = null;			_fileQueue = null;			_tempQueue = null;		}				/**		 * Can be used to add all event listeners for the specific class. the		 * class must implement the IFileIOEventListener interface.		 * 		 * @param listener The class for which events should be listened.		 */		public function addEventListenersFor(listener:IFileIOEventListener):void		{			addEventListener(FileIOEvent.OPEN, listener.onOpen);			addEventListener(FileIOEvent.PROGRESS, listener.onProgress);			addEventListener(FileIOEvent.COMPLETE, listener.onComplete);			addEventListener(FileIOEvent.ALL_COMPLETE, listener.onAllComplete);			addEventListener(FileIOEvent.ABORT, listener.onAbort);			addEventListener(FileIOEvent.HTTP_STATUS, listener.onHTTPStatus);			addEventListener(FileIOEvent.IO_ERROR, listener.onIOError);			addEventListener(FileIOEvent.SECURITY_ERROR, listener.onSecurityError);		}						/**		 * removeEventListenersFor		 */		public function removeEventListenersFor(listener:IFileIOEventListener):void		{			removeEventListener(FileIOEvent.OPEN, listener.onOpen);			removeEventListener(FileIOEvent.PROGRESS, listener.onProgress);			removeEventListener(FileIOEvent.COMPLETE, listener.onComplete);			removeEventListener(FileIOEvent.ALL_COMPLETE, listener.onAllComplete);			removeEventListener(FileIOEvent.ABORT, listener.onAbort);			removeEventListener(FileIOEvent.HTTP_STATUS, listener.onHTTPStatus);			removeEventListener(FileIOEvent.IO_ERROR, listener.onIOError);			removeEventListener(FileIOEvent.SECURITY_ERROR, listener.onSecurityError);		}						/**		 * Returns a String Representation of QueueFileReader.		 * @return A String Representation of QueueFileReader.		 */		override public function toString():String		{			return "[QueueFileReader]";		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get fileQueue():Queue		{			return _fileQueue;		}		public function set fileQueue(v:Queue):void		{			_fileQueue = v;			_fileCount = _fileQueue.size;			_tempQueue = new Queue();		}				public function get bytesLoaded():Byte		{			return new Byte(_bytesLoaded);		}				public function get percentage():int		{			return Math.floor(_totalPercentage);		}				public function get currentFilePath():String		{			return _currentFilePath;		}				public function get currentIndex():int		{			return _currentIndex;		}				public function get isLoading():Boolean		{			if (_fileLoader) return _fileLoader.isLoading;			return false;		}				public function get isAborted():Boolean		{			if (_fileLoader) return _fileLoader.isAborted;			return false;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				protected function onOpen(e:FileIOEvent):void		{			updateTotalProgress();			relayEvent(e);		}						protected function onProgress(e:FileIOEvent):void		{			updateTotalProgress();			relayEvent(e);		}						protected function onComplete(e:FileIOEvent):void		{			_bytesLoaded += _totalBytesLoaded.bytes;			_filePercentage += (100 / _fileCount);			_tempQueue.enqueue(e.file);						relayEvent(e);			next(e);		}						protected function onAbort(e:FileIOEvent):void		{			removeLoaderEventListeners();			relayEvent(e);		}						protected function onHTTPStatus(e:FileIOEvent):void		{			relayEvent(e);		}						protected function onIOError(e:FileIOEvent):void		{			relayEvent(e);			next(e);		}						protected function onSecurityError(e:FileIOEvent):void		{			relayEvent(e);			next(e);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * addLoaderEventListeners		 * @private		 */		protected function addLoaderEventListeners():void		{			_fileLoader.addEventListener(FileIOEvent.OPEN, onOpen);			_fileLoader.addEventListener(FileIOEvent.PROGRESS, onProgress);			_fileLoader.addEventListener(FileIOEvent.COMPLETE, onComplete);			_fileLoader.addEventListener(FileIOEvent.ABORT, onAbort);			_fileLoader.addEventListener(FileIOEvent.HTTP_STATUS, onHTTPStatus);			_fileLoader.addEventListener(FileIOEvent.IO_ERROR, onIOError);			_fileLoader.addEventListener(FileIOEvent.SECURITY_ERROR, onSecurityError);		}						/**		 * removeLoaderEventListeners		 * @private		 */		protected function removeLoaderEventListeners():void		{			_fileLoader.removeEventListener(FileIOEvent.OPEN, onOpen);			_fileLoader.removeEventListener(FileIOEvent.PROGRESS, onProgress);			_fileLoader.removeEventListener(FileIOEvent.COMPLETE, onComplete);			_fileLoader.removeEventListener(FileIOEvent.ABORT, onAbort);			_fileLoader.removeEventListener(FileIOEvent.HTTP_STATUS, onHTTPStatus);			_fileLoader.removeEventListener(FileIOEvent.IO_ERROR, onIOError);			_fileLoader.removeEventListener(FileIOEvent.SECURITY_ERROR, onSecurityError);			_fileLoader.dispose();		}						/**		 * updateTotalProgress		 * @private		 */		protected function updateTotalProgress():void		{			_totalBytesLoaded = _fileLoader.bytesLoaded;			_totalPercentage = _filePercentage + (_fileLoader.percentage / _fileCount);		}						/**		 * relayEvent		 * @private		 */		protected function relayEvent(e:FileIOEvent):void		{			dispatchEvent(e);		}						/**		 * next		 * @private		 */		protected function next(e:FileIOEvent):void		{			if (!_fileQueue.isEmpty && !_isAborted)			{				load();			}			else			{				/* If we aborted loading we don't want the aborted file in the				 * resulting queue, so weclear it and only add finished files */				if (_isAborted) _fileQueue.clear();				_fileQueue.addAll(_tempQueue);								removeLoaderEventListeners();				dispatchEvent(new FileIOEvent(FileIOEvent.ALL_COMPLETE,					e.file, e.text, e.httpStatus, e.bubbles, e.cancelable));			}		}	}}