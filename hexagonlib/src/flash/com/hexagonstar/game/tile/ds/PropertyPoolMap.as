/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.game.tile.ds{	import flash.utils.Dictionary;						/**	 * A special HashMap that is used for TileSet Pool Properties.	 */	public class PropertyPoolMap extends PropertyMap	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				private var _node:Node;		private var _first:Node;		private var _last:Node;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new PropertyPoolMap instance.		 */		public function PropertyPoolMap(size:int = 100)		{			super(size);		}						////////////////////////////////////////////////////////////////////////////////////////		// Query Operations                                                                   //		////////////////////////////////////////////////////////////////////////////////////////						/**		 * Checks if the Map contains the property with the specified name.		 */		public function contains(name:String):Boolean		{			return (getPropertyID(name) != -1);		}						/**		 * Returns the ID of the property with the specified name or -1 if		 * no property with the name was found in the map.		 * 		 * @param name The name of the Pool Property.		 * @return The ID of the Pool Property or -1 if nothing was found.		 */		public function getPropertyID(name:String):int		{			for each (var n:Node in _map)			{				if (name == n.name) return n.id;			}			return -1;		}						/**		 * Returns the name of the property that is mapped with the specified ID		 * or null if there is no property mapped with the ID.		 * 		 * @param id The ID of the Pool Property.		 * @return The name of the property mapped with the ID.		 */		public function getPropertyName(id:int):String		{			var n:Node = _map[id];			if (n) return n.name;			return null;		}						/**		 * Not supported for PoolPropertyMap! Use getDefaultValue() instead!		 */		override public function getValue(id:int):*		{			return null;		}						/**		 * Returns the default value that is mapped with the specified ID		 * or null if there is no property mapped with the ID or if the property		 * has no default value.		 * 		 * @param id The ID of the Pool Property.		 * @return The default value of the property mapped with the ID.		 */		public function getDefaultValue(id:int):*		{			var n:Node = _map[id];			if (n) return n.defValue;			return null;		}						/**		 * Returns a String that contains all properties in the Map.		 */		override public function dump():String		{			var s:String = toString();			for each (var n:Node in _map)				s += "\n[" + n.id + ": " + n.name + ", defValue=" + n.defValue + "]";			return s;		}						////////////////////////////////////////////////////////////////////////////////////////		// Modification Operations                                                            //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Puts the specified pool property into the map. The ID must be a positive number		 * and the name must not be null and may not exist in the map.		 * 		 * @param id The Pool Property ID.		 * @param name The Pool Property name.		 * @param defaultValue The Pool Property default Value.		 */		override public function put(...args):Boolean		{			var id:int = args[0];			var name:String = args[1];			var defaultValue:* = (args.length > 2) ? args[2] : null;			var n:Node;						if (id < 0) return false;			if (name == null) return false;						/* If ID already exists in the map, just replace it's data */			if (_map[id])			{				n = _map[id];				n.name = name;				n.defValue = defaultValue;				return true;			}						if (_size++ == _maxSize)			{				var l:int = (_maxSize += _initSize) + 1;				for (var i:int = 0; i < l; i++)				{					_last.next = new Node();					_last = _last.next;				}			}						n = _first;			_first = _first.next;			n.id = id;			n.name = name;			n.defValue = defaultValue;						n.next = _node;						if (_node) _node.prev = n;			_node = n;			_map[id] = n;						return true;		}						////////////////////////////////////////////////////////////////////////////////////////		// Bulk Operations                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Clears the Map.		 */		override public function clear():void		{			_map = new Dictionary(true);						var t:Node;			var n:Node = _node;						while (n)			{				t = n.next;								n.next = n.prev = null;				n.id = -1;				n.name = null;				n.defValue = null;				_last.next = n;				_last = _last.next;				n = t;			}						_node = null;			_size = 0;		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * initNodes		 * @private		 */		override protected function initNodes():void		{			var n:Node = new Node();			_first = _last = n;						var l:int = _initSize + 1;			for (var i:int = 0; i < l; i++)			{				n.next = new Node();				n = n.next;			}						_last = n;		}	}}// ---------------------------------------------------------------------------------------------/** * @private */internal class Node{	public var id:int;	public var name:String;	public var defValue:*;	public var prev:Node;	public var next:Node;}