/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.game.tile{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.utils.Timer;			/**	 * AnimTile Class	 */	public class AnimTile extends Tile implements ITile	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _count:int;		protected var _isPlaying:Boolean;		protected var _subFrameCount:int;		protected var _buffer:BitmapData;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AnimTile instance.		 */		public function AnimTile(id:int, subFrameCount:int = 0, copyOf:int = 0)		{			super(id, copyOf);						// TODO			_subFrameCount = subFrameCount;			_buffer = new BitmapData(176, 16, false, 0x000000);			_isPlaying = false;		}						/**		 * Starts the playback of the tile animation.		 */		public function play():void		{			if (!_isPlaying)			{				_isPlaying = true;				var timer:Timer = new Timer(100, 0);				timer.addEventListener(TimerEvent.TIMER, onTimer);				timer.start();			}		}						/**		 * Clones the Tile's BitmapData Buffer into the passed-in Bitmap's		 * bitmapData. This is used by the TileSet's Duplicate function to		 * create duplicate tiles from existing ones.		 * 		 * @param target The bitmap object to whose bitmapdata the tile is cloned to.		 */		override public function cloneBufferTo(target:Bitmap):void		{			/* As an AnimTile, clone from its buffer to get all sub tiles. */			target.bitmapData = _buffer.clone();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * The amount of additional animation frames the tile has. Every tile, static		 * or animated, has at least one frame. the sub frames are additional frames		 * that add to the AnimTile's total frames.		 */		public function get subFrameCount():int		{			return _subFrameCount;		}				public function set subFrameCount(v:int):void		{			_subFrameCount = v;		}						/**		 * Sets the ScrollRect for the AnimTile.		 */		override public function set scrollRect(v:Rectangle):void		{			_buffer = bitmapData.clone();			super.scrollRect = v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * onTimer function that is called by the play method.		 * @private		 */		protected function onTimer(e:TimerEvent):void		{			if (_count == _subFrameCount)			{				bitmapData = _buffer.clone();				_count = 0;			}			else			{				bitmapData.scroll(-width, 0);				_count++;			}		}	}}