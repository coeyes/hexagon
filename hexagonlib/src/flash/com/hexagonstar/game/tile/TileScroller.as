/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.game.tile{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.geom.Point;	import flash.geom.Rectangle;			/**	 * TileScroller Class	 */	public class TileScroller extends Sprite	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** The window represents the visible map area */		protected var _window:BitmapData;		protected var _windowWidth:int;		protected var _windowHeight:int;				protected var _buffer:BitmapData;				protected var _tileMap:ITileMap;		protected var _tileSet:TileSet;				protected var _tileWidth:int;		protected var _tileHeight:int;				protected var _rectangle:Rectangle;		protected var _point:Point;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new TileScroller instance.		 */		public function TileScroller(width:int = 0, height:int = 0)		{			_windowWidth = width;			_windowHeight = height;		}						/**		 * Initializes TileScroller.		 */		public function init():void		{			_buffer = new BitmapData(_windowWidth + (_tileWidth * 2), _windowHeight				+ (_tileHeight * 2), false, 0x000000);						_window = new BitmapData(_windowWidth, _windowHeight, false, 0x000000);			//addChild(new Bitmap(_window));		}				/**		 * start		 */		public function start():void		{			fillBuffer();		}						/**		 * stop		 */		public function stop():void		{					}						/**		 * pause		 */		public function pause():void		{					}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get tileMap():ITileMap		{			return _tileMap;		}		public function set tileMap(v:ITileMap):void		{			_tileMap = v;		}						public function get tileSet():TileSet		{			return _tileSet;		}		public function set tileSet(v:TileSet):void		{			_tileSet = v;			_tileWidth = _tileSet.tileWidth;			_tileHeight = _tileSet.tileHeight;		}				////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * drawLayer		 * @private		 */		protected function drawLayer():void		{					}				/**		 * fillBuffer - only for testing!		 * @private		 */		private function fillBuffer():void		{			var tileCount:int = _tileSet.tileCount;			var tilesH:int = Math.ceil(_buffer.width / _tileWidth);			var tilesV:int = Math.ceil(_buffer.height / _tileHeight);						_rectangle = new Rectangle(0, 0, _tileWidth, _tileHeight);			_point = new Point(0, 0);						for (var y:int = 0; y < tilesV; y++)			{				for (var x:int = 0; x < tilesH; x++)				{					var rnd:int = (Math.random() * tileCount) + 1;					var tile:Tile = _tileSet.getTile(rnd) as Tile;										_point.x = x * _tileWidth;					_point.y = y * _tileHeight;										if (tile is AnimTile)					{						tile = _tileSet.duplicateTile(tile) as Tile;						tile.x = _point.x;						tile.y = _point.y;						// TODO Layers need to display their tiles in themselves.											}					else					{						_buffer.copyPixels(tile.bitmapData, _rectangle, _point);					}				}			}						addChild(new Bitmap(_buffer));			//_window.draw(_buffer);		}	}}