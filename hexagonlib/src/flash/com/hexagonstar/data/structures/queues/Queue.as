/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.data.structures.queues{	import com.hexagonstar.data.structures.ICollection;	import com.hexagonstar.data.structures.IIterator;	import com.hexagonstar.data.structures.ProtectedIterator;	import com.hexagonstar.data.structures.lists.ListIterator;	import com.hexagonstar.data.structures.lists.SLinkedList;			/**	 * A basic linear Queue.	 */	public class Queue extends AbstractQueue implements IQueue	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _list:SLinkedList;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Constructs a new Queue instance. If a source List is		 * specified as the argument, the Queue will step through it's		 * elements beginning at position 0 and enqueues all contained		 * elements.		 * 		 * @example		 * <p><pre>		 *    var queue:Queue = new Queue([1, 2, 3, 4]);	 	 *    while (!queue.isEmpty()) {		 * 	      trace(queue.dequeue());		 *    }		 * </pre><p>		 * The output is made in the following order: 1, 2, 3, 4.		 * 		 * @param elements A list of values to populate the Queue with.		 */		public function Queue(...elements)		{			_list = new SLinkedList();						if (elements.length > 0)			{				var l:int = elements.length;				for (var i:int = 0; i < l; i++)				{					enqueue(elements[i]);				}			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Query Operations                                                                   //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns an integer that represents the number of elements that the		 * Queue contains.		 * 		 * @return The number of elements in the Queue.		 */		override public function get size():int		{			return _list.size;		}				/**		 * Returns a Boolean that signals if the Queue is empty or not. If		 * true is returned, the Queue is empty, if false is returned, the		 * Queue contains any number of elements.		 *		 * @return true If the Queue contains no elements, otherwise false.		 */		override public function get isEmpty():Boolean		{			return (_list.size < 1);		}						/**		 * Returns the first enqueued element from the Queue without removing it.		 *		 * @return The first enqueued element or undefined if the Queue is empty.		 */		public function peek():*		{			if (_list.size > 0)				return _list.getElementAt(0);			else				return undefined;		}						/**		 * Checks if the specified element is enqueued in the Queue.		 * 		 * @return true if the Queue contains the specified element or		 *          false if not.		 */		override public function contains(element:*):Boolean		{			return _list.contains(element);		}						/**		 * Returns a clone of the Queue. The clone will be safe for use in		 * that it doesn't maintain any reference to the original Queue.		 * 		 * @return A clone of the Queue.		 */		public function clone():*		{			var queue:Queue = new Queue();			queue.addAll(this);			return queue;		}						/**		 * Returns an Iterator over the elements of the Queue. The Iterator		 * returned is a protected Itertator so that no elements from the		 * Queue can be removed with it.		 *		 * @return an Iterator over the elements in the Queue.		 */		public function iterator():IIterator		{			return (new ProtectedIterator(new ListIterator(_list)));		}						/**		 * Returns an Array that contains all of the elements that are		 * currently in the Queue. The returned Array will be safe in that		 * no references to it are maintained by the Queue.		 *		 * @return An Array containing all of the elements in the Queue.		 */		public function toArray():Array		{			return _list.toArray();		}						/**		 * Returns a String Representation of the Queue contents		 * that can be used for debugging purposes.		 * 		 * @return a String representation of the Queue contents.		 */		public function dump():String		{			var s:String = "\n" + toString();			for (var i:int = 0; i < _list.size; i++)			{				s += "\n[" + i + ": " + _list.getElementAt(i) + "]";			}			return s;		}						////////////////////////////////////////////////////////////////////////////////////////		// Modification Operations                                                            //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Enqueues the specified element to the Queue. This does the		 * same like calling enqueue() directly.		 * 		 * @param element The element to be enqueued to the Queue.		 * @return true if the element was enqueued to the Queue successfully		 *          otherwise false.		 */		public function add(element:*):Boolean		{			return enqueue(element);		}						/**		 * Enqueues the specified element to the Queue.		 * 		 * @param element The element to be enqueued to the Queue.		 * @return true if the element was enqueued to the Queue successfully		 *          otherwise false.		 */		public function enqueue(element:*):Boolean		{			return _list.append(element);		}						/**		 * Throws an unsupported Operation Exceptions as the removal of		 * elements is not allowed in this Queue.		 * 		 * @return undefined.		 * @throws com.hexagonstar.env.exception.UnsupportedOperationException		 */		public function remove(element:*):*		{			throwRemoveNotSupported();			return undefined;		}						/**		 * Returns the first enqueued element from the Queue and removes it.		 *		 * @return The first enqueued element or undefined if the Queue is empty.		 */		public function dequeue():*		{			return _list.removeFirst();		}						////////////////////////////////////////////////////////////////////////////////////////		// Bulk Operations                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Adds all of the elements in the specified Collection to the end of		 * the Queue and returns true if the elements were added successfully.		 *		 * @param collection The Collection whose elements should be added to		 *         the end of the Queue.		 * @return true if the elements of the specified Collection were added		 *          successfully.		 */		public function addAll(collection:ICollection):Boolean		{			return _list.addAll(collection);		}						/**		 * Throws an unsupported Operation Exceptions as the removal of		 * elements is not allowed in the Queue.		 * 		 * @return false.		 * 		 * @throws com.hexagonstar.env.exception.UnsupportedOperationException		 */		public function removeAll(collection:ICollection):Boolean		{			return throwRemoveNotSupported();		}						/**		 * Throws an unsupported Operation Exceptions as the removal of		 * elements is not allowed in the Queue.		 * 		 * @return false.		 * 		 * @throws com.hexagonstar.env.exception.UnsupportedOperationException		 */		public function retainAll(collection:ICollection):Boolean		{			return throwRemoveNotSupported();		}						/**		 * Clears all elements from the Queue.		 */		public function clear():void		{			_list.clear();		}	}}