/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.data.structures.maps{	import com.hexagonstar.data.structures.ICollection;	import com.hexagonstar.data.structures.IIterator;	import com.hexagonstar.exception.UnsupportedOperationException;	import flash.utils.Dictionary;		/**	 * A hash map using direct lookup (perfect hashing). Each key can only map one value	 * at a time and multiple keys can map the same value. The HashMap is preallocated	 * according to an initial size, but afterwards automatically resized if the number	 * of key-value pairs exceeds the predefined size.	 * 	 * @author Sascha Balkau	 * @version 0.9.0	 */	public class HashMap extends AbstractMap implements IMap	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _keyMap:Dictionary;		/** @private */		protected var _dupMap:Dictionary;		/** @private */		protected var _initSize:int;		/** @private */		protected var _maxSize:int;				/** @private */		protected var _node:Node;		/** @private */		protected var _first:Node;		/** @private */		protected var _last:Node;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new HashMap instance.		 * 		 * @param size The initial size of the map.		 */		public function HashMap(size:int = 100)		{			_initSize = _maxSize = Math.max(10, size);						_keyMap = new Dictionary(true);			_dupMap = new Dictionary(true);			_size = 0;						var n:Node = new Node();			_first = _last = n;						var l:int = _initSize + 1;			for (var i:int = 0; i < l; i++)			{				n.next = new Node();				n = n.next;			}						_last = n;		}						////////////////////////////////////////////////////////////////////////////////////////		// Query Operations                                                                   //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * The init size of the map. This is not the real size but the size that		 * is specified when creating a new map.		 */		public function get initSize():int		{			return _initSize;		}						/**		 * The calculated maximum size of the map.		 */		public function get maxSize():int		{			return _maxSize;		}						/**		 * Checks if the Map contains the specified value.		 * 		 * @param value The value to check for existence in the map.		 * @return true if the value was found, false if not.		 */		override public function contains(value:*):Boolean		{			return _dupMap[value] > 0;		}						/**		 * Checks if the Map contains the specified key.		 * 		 * @param key The key to check for existence in the map.		 * @return true if the key was found, false if not.		 */		public function containsKey(key:*):Boolean		{			return _keyMap[key] != null;		}						/**		 * Returns the value that is mapped with the specified key or undefined if the		 * key was not found in the map.		 * 		 * @param key The key under that the value is stored.		 * @return The value or undefined.		 */		public function getValue(key:*):*		{			var n:Node = _keyMap[key];			if (n) return n.val;			return undefined;		}						/**		 * Returns an iterator used to iterate over the values stored in the hashmap.		 * 		 * @return An iterator used to iterate over the values stored in the hashmap.		 */		public function iterator():IIterator		{			return new HashMapIterator(_node);		}						/**		 * Returns a clone of the hashmap. The clone will contain the exact same		 * key-value pairs as the original map.		 * 		 * @return A clone of the hashmap.		 */		public function clone():*		{			var a:Array = toMappedArray(false);			var l:int = a.length;			var m:HashMap = new HashMap(_initSize);						for (var i:int = 0; i < l; i++)			{				m.put(a[i]["key"], a[i]["value"]);			}						return m;		}						/**		 * Returns an array that contains all values that are mapped.		 * 		 * @return An array that contains all values that are mapped.		 */		public function toArray():Array		{			var a:Array = new Array(_size);			var i:int = 0;						for each (var n:Node in _keyMap)			{				a[i++] = n.val;			}						return a;		}						/**		 * Returns an array that contains all keys that are mapped.		 * 		 * @param sort If true the resulting array will be sorted.		 * @return An array that contains all keys that are mapped.		 */		public function toKeyArray(sort:Boolean = false):Array		{			var a:Array = new Array(_size);			var i:int = 0;						for each (var n:Node in _keyMap)			{				a[i++] = n.key;			}						if (sort) a.sort(Array.NUMERIC);			return a;		}						/**		 * Returns an associative array that contains all key-value pairs that are mapped.		 * 		 * @param sort If true the resulting array will be sorted on it's keys.		 * @return An associative array that contains all key-value pairs that are mapped.		 */		public function toMappedArray(sort:Boolean = false):Array		{			var a:Array = new Array(_size);			var i:int = 0;						for each (var n:Node in _keyMap)			{				a[i++] = {key: n.key, value: n.val};			}						if (sort) a.sortOn("key", Array.NUMERIC);			return a;		}						/**		 * Returns a formatted string that contains all key-value pairs in the Map.		 * 		 * @return A formatted string that contains all key-value pairs in the Map.		 */		public function dump():String		{			var s:String = toString();			for each (var n:Node in _keyMap)			{				s += "\n[" + n.key + ": " + n.val + "]";			}			return s;		}						////////////////////////////////////////////////////////////////////////////////////////		// Modification Operations                                                            //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * The add method is not supported by the HashMap. Use put() instead. This		 * method only exists to adhere to the Collection interface.		 */		public function add(element:*):Boolean		{			throw new UnsupportedOperationException(toString()				+ " add() is not supported in the HashMap. Use put() instead.");			return false;		}						/**		 * Puts a key-value pair into the map. The specified key must be unique		 * and not null for the value to be successfully stored.		 * 		 * @param key The key under which to store the value.		 * @param value The value to store in the map.		 * @return true if the key-value pair was successfully stored, else false.		 */		public function put(key:*, value:*):Boolean		{			if (key == null || _keyMap[key])			{				return false;			}						if (_size++ == _maxSize)			{				var l:int = (_maxSize += _initSize) + 1;				for (var i:int = 0; i < l; i++)				{					_last.next = new Node();					_last = _last.next;				}			}						var n:Node = _first;			_first = _first.next;			n.key = key;			n.val = value;						n.next = _node;						if (_node)			{				_node.prev = n;			}			_node = n;						_keyMap[key] = n;			_dupMap[value] ? _dupMap[value]++ : _dupMap[value] = 1;						return true;		}						/**		 * Removes the entry from the Map that was mapped with the specified key.		 * 		 * @param key The key that the entry is mapped with.		 * @return The value from the removed entry or undefined if no matching		 *          entry was found.		 */		public function remove(key:*):*		{			var n:Node = _keyMap[key];						if (n)			{				var v:* = n.val;				delete _keyMap[key];								if (n.prev) n.prev.next = n.next;				if (n.next) n.next.prev = n.prev;				if (n == _node) _node = n.next;								n.prev = null;				n.next = null;				_last.next = n;				_last = n;								if (--_dupMap[v] <= 0)					delete _dupMap[v];								if (--_size <= (_maxSize - _initSize))				{					var l:int = (_maxSize -= _initSize) + 1;					for (var i:int = 0; i < l; i++)						_first = _first.next;				}								return v;			}						return undefined;		}						////////////////////////////////////////////////////////////////////////////////////////		// Bulk Operations                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @throws com.hexagonstar.exception.UnsupportedOperationException as the		 *          HashMap does not support this operation.		 */		public function addAll(collection:ICollection):Boolean		{			return throwUnsupportedOperationException("addAll()");		}						/**		 * @throws com.hexagonstar.exception.UnsupportedOperationException as the		 *          HashMap does not support this operation.		 */		public function putAll(map:IMap):Boolean		{			return throwUnsupportedOperationException("putAll()");		}						/**		 * @throws com.hexagonstar.exception.UnsupportedOperationException as the		 *          HashMap does not support this operation.		 */		public function removeAll(collection:ICollection):Boolean		{			return throwUnsupportedOperationException("removeAll()");		}						/**		 * @throws com.hexagonstar.exception.UnsupportedOperationException as the		 *          HashMap does not support this operation.		 */		public function retainAll(collection:ICollection):Boolean		{			return throwUnsupportedOperationException("retainAll()");		}						/**		 * @throws com.hexagonstar.exception.UnsupportedOperationException as the		 *          HashMap does not support this operation.		 */		override public function containsAll(collection:ICollection):Boolean		{			return throwUnsupportedOperationException("containsAll()");		}						/**		 * Clears the hash map.		 */		public function clear():void		{			_keyMap = new Dictionary(true);			_dupMap = new Dictionary(true);						var t:Node;			var n:Node = _node;						while (n)			{				t = n.next;								n.next = n.prev = null;				n.key = null;				n.val = null;				_last.next = n;				_last = _last.next;				n = t;			}						_node = null;			_size = 0;		}	}}import com.hexagonstar.data.structures.IIterator;import com.hexagonstar.exception.UnsupportedOperationException;// ---------------------------------------------------------------------------------------------/** * @private */internal class Node{	public var key:*;	public var val:*;	public var prev:Node;	public var next:Node;}// ---------------------------------------------------------------------------------------------/** * @private */internal class HashMapIterator implements IIterator{	private var _node:Node;	private var _walker:Node;		public function HashMapIterator(node:Node)	{		_node = _walker = node;	}			public function remove():*	{		// TODO Add remove operation to HashMapIterator.		throw new UnsupportedOperationException(			"[HashMapIterator] removing is not supported yet.");		return null;	}			public function reset():void	{		_walker = _node;	}			public function get hasNext():Boolean	{		return _walker != null;	}		public function get next():*	{		var v:* = _walker.val;		_walker = _walker.next;		return v;	}		public function get data():*	{		return _walker.val;	}	public function set data(v:*):void	{		_walker.val = v;	}}