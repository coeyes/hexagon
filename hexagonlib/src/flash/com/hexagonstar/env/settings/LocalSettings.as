/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.env.settings{	import com.hexagonstar.core.BasicClass;		/**	 * A data storage object for use with the LocalSettingsManager in that key-value	 * pairs are stored that meant to be stored persistenly to harddisk.	 * 	 * @see #LocalSettingsManager	 * @author Sascha Balkau	 * @version 1.0.0	 */	public class LocalSettings extends BasicClass	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _data:Object;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new LocalSettings instance.		 */		public function LocalSettings()		{			_data = {};		}						/**		 * Stores the specified value in the local settings object mapped under		 * the specified key.		 * 		 * @example		 * <p><pre>		 *	var ls:LocalSettings = new LocalSettings();		 *	ls.put("windowPosX", 200);		 *	ls.put("windowPosY", 150);		 *	ls.put("dataPath", "c:/user/documents/test/");		 * </pre>		 * 		 * @param key The key under which to store the value.		 * @param value The value to store.		 */		public function put(key:String, value:Object):void		{			_data[key] = value;		}						/**		 * Returns the settings value that is mapped with the specified key or		 * undefined if the key was not found in the settings.		 * 		 * @param key The key under that the value is stored.		 * @return The settings value or undefined.		 */		public function getValue(key:String):Object		{			if (_data[key]) return _data[key];			return undefined;		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * The data object in that setting key-value pairs are stored. Normally you don't		 * need to use this prooperty. It is used internally by the LocalSettingsManager.		 */		public function get data():Object		{			return _data;		}	}}