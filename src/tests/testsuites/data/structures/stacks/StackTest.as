/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package testsuites.data.structures.stacks{	import flexunit.framework.*;		import com.hexagonstar.data.structures.stacks.Stack;	import com.hexagonstar.util.debug.Debug;			public class StackTest extends TestCase	{		private var _collection:Stack;
		//--------------------------------------------------------------------------------------				public function StackTest(name:String = null)		{			super(name);		}						override public function setUp():void		{			Assert.resetAssertionsMade();		}            		//--------------------------------------------------------------------------------------      		public function testAll():void		{			Debug.trace("\n\n*******************************************************\n"				+ "StackTest Tests"				+ "\n*******************************************************");						createEmpty();			create();			push();			add();			pop();						peek();			peekAt();			contains();			clone();			toArray();						addAll();			containsAll();			clear();		}						private function log(title:String = ""):void		{			if (title.length > 0)			{				logTitle(title);			}			else			{				Debug.delimiter();			}						Debug.trace(_collection.dump());		}				private function logTitle(title:String = ""):void		{			Debug.trace("\n\n========================================\n"				+ "StackTest " + title				+ "\n========================================");		}						//--------------------------------------------------------------------------------------				//--------------------------------------------------------------------------------------				private function createEmpty():void		{			_collection = new Stack();			assertStrictlyEquals(_collection, _collection);			assertEquals(_collection.size, 0);			assertTrue(_collection.isEmpty);			log("create (empty)");		}				private function create():void		{			_collection = new Stack("Jenn", "Cami", "Abby");			assertStrictlyEquals(_collection, _collection);			assertEquals(_collection.size, 3);			assertFalse(_collection.isEmpty);			log("create");		}						//--------------------------------------------------------------------------------------				private function push():void		{			assertTrue(_collection.push("Bess"));			assertTrue(_collection.push("Lola"));			assertTrue(_collection.push("Cena"));			assertTrue(_collection.push("Dana"));			assertTrue(_collection.push("Yoko"));			assertTrue(_collection.push("Faye"));			assertEquals(_collection.size, 9);			assertFalse(_collection.isEmpty);			log("push");		}				private function add():void		{			assertTrue(_collection.add("Suzi"));			assertTrue(_collection.add("Taki"));			assertEquals(_collection.size, 11);			assertFalse(_collection.isEmpty);			log("add");		}				private function pop():void		{			assertEquals(_collection.pop(), "Taki");			assertEquals(_collection.size, 10);			assertEquals(_collection.pop(), "Suzi");			assertEquals(_collection.size, 9);			assertFalse(_collection.isEmpty);			log("pop");		}						//--------------------------------------------------------------------------------------				private function peek():void		{			assertEquals(_collection.peek(), "Faye");			assertEquals(_collection.size, 9);			log("peek");		}				private function peekAt():void		{			assertEquals(_collection.peekAt(8), "Faye");			assertEquals(_collection.peekAt(7), "Yoko");			assertEquals(_collection.peekAt(6), "Dana");			assertEquals(_collection.peekAt(1), "Cami");			assertEquals(_collection.peekAt(0), "Jenn");			assertEquals(_collection.size, 9);			log("peekAt");		}				private function contains():void		{			assertTrue(_collection.contains("Faye"));			assertTrue(_collection.contains("Yoko"));			assertTrue(_collection.contains("Bess"));			assertTrue(_collection.contains("Cena"));			assertFalse(_collection.contains("XXXX"));			assertFalse(_collection.contains(8888));			assertFalse(_collection.contains(null));			assertFalse(_collection.contains(undefined));			assertEquals(_collection.size, 9);			log("contains");		}				private function clone():void		{			var clone:Stack = _collection.clone();			logTitle("clone");			Debug.trace("Clone:\n" + clone.dump());			assertEquals(clone.size, 9);			assertTrue(_collection.equals(clone));						assertEquals(clone.pop(), "Faye");			assertFalse(_collection.equals(clone));		}				private function toArray():void		{			var array:Array = _collection.toArray();			logTitle("toArray");			Debug.trace(array);			assertEquals(array.length, 9);		}						//--------------------------------------------------------------------------------------			private function addAll():void		{			var list2:Stack = new Stack("Nell", "Nova", "Nyla");			assertTrue(_collection.addAll(list2));						var emptyList:Stack = new Stack();			assertFalse(_collection.addAll(emptyList));						assertEquals(_collection.size, 12);			log("addAll");		}				private function containsAll():void		{			var list6:Stack = new Stack("Cami", "Faye", "Yoko", "Nyla");			assertTrue(_collection.containsAll(list6));						var list7:Stack = new Stack("Cami", "Faye", "Nyla", "Raoul");			assertFalse(_collection.containsAll(list7));						assertEquals(_collection.size, 12);			log("containsAll");		}				private function clear():void		{			assertEquals(_collection.pop(), "Nyla");			assertEquals(_collection.pop(), "Nova");			assertEquals(_collection.pop(), "Nell");			assertEquals(_collection.pop(), "Faye");			assertEquals(_collection.pop(), "Yoko");			assertEquals(_collection.pop(), "Dana");			assertEquals(_collection.pop(), "Cena");			assertEquals(_collection.pop(), "Lola");			assertEquals(_collection.pop(), "Bess");			assertEquals(_collection.pop(), "Abby");			assertEquals(_collection.pop(), "Cami");			assertEquals(_collection.pop(), "Jenn");			assertEquals(_collection.size, 0);			assertTrue(_collection.isEmpty);			log("clear");						_collection.push("Zita");			_collection.push("Zeta");			_collection.push("Zoey");			assertEquals(_collection.size, 3);			assertFalse(_collection.isEmpty);			log();						_collection.clear();			assertEquals(_collection.size, 0);			assertTrue(_collection.isEmpty);			log();		}	}}