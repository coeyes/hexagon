/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.data.structures.stacks{	import com.hexagonstar.data.structures.ICollection;	import com.hexagonstar.data.structures.IIterator;	import com.hexagonstar.data.structures.ProtectedIterator;	import com.hexagonstar.data.structures.arrays.ArrayIterator;			/**	 * Stack Class	 */	public class Stack extends AbstractStack implements IStack	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _elements:Array;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new Stack instance.		 */		public function Stack(...elements)		{			clear();						if (elements.length > 0)			{				var l:int = elements.length;				for (var i:int = 0; i < l; i++)				{					push(elements[i]);				}			}					}						////////////////////////////////////////////////////////////////////////////////////////		// Query Operations                                                                   //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns the top element from the Stack without removing it.		 *		 * @return The top element or undefined if the Stack is empty.		 */		public function peek():*		{			if (_size > 0)				return _elements[_elements.length - 1];			else				return undefined;		}						/**		 * Returns the element from the Stack that is at the specified index		 * without removing it.		 *		 * @return The element or undefined if the Stack is empty.		 */		public function peekAt(index:int):*		{			if (_size > 0)			{				if (index < 0 || index >= _size)				{					return throwIndexOutOfBoundsException(index);				}				else				{					return _elements[index];				}			}						return undefined;		}						/**		 * Checks if the specified element exists in the Stack.		 * 		 * @return true if the Stack contains the specified element or false if not.		 */		override public function contains(element:*):Boolean		{			return _elements.indexOf(element) > -1;		}						/**		 * Checks if the Stack is equal to the specified Stack.		 * 		 * @param stack The stack to be chacked against this stack.		 * @return true if both stacks are equal, false if not.		 */		public function equals(stack:ICollection):Boolean		{			if (stack is Stack)			{				var s:Stack = stack as Stack;				var i:int = s.size;				if (i != _size) return false;								while (i--)				{					if (s.peekAt(i) != peekAt(i)) return false;				}								return true;			}						return false;		}						/**		 * Returns a clone of the Stack. The clone will be safe for use in		 * that it doesn't maintain any reference to the original Stack.		 * 		 * @return A clone of the Queue.		 */		public function clone():*		{			var stack:Stack = new Stack();			stack.addAll(this);			return stack;		}						/**		 * Returns an Iterator over the elements of the Stack. The Iterator		 * returned is a protected Itertator so that no elements from the		 * Stack can be removed with it.		 *		 * @return an Iterator over the elements in the Stack.		 */		public function iterator():IIterator		{			return (new ProtectedIterator(new ArrayIterator(_elements)));		}						/**		 * Returns an Array that contains all of the elements that are		 * currently in the Stack. The returned Array will be safe in that		 * no references to it are maintained by the Stack.		 *		 * @return An Array containing all of the elements in the Stack.		 */		public function toArray():Array		{			var a:Array = _elements.concat();			return a;		}						/**		 * Returns a String Representation of the Stack contents		 * that can be used for debugging purposes.		 * 		 * @return a String representation of the Stack contents.		 */		public function dump():String		{			var s:String = "\n" + toString();			for (var i:int = 0; i < _size; i++)			{				s += "\n[" + i + ": " + _elements[i] + "]";			}			return s;		}						////////////////////////////////////////////////////////////////////////////////////////		// Modification Operations                                                            //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * adds the specified element to the Stack. This does the		 * same like calling push() directly.		 * 		 * @param element The element to be added to the Stack.		 * @return true if the element was added to the Stack successfully		 *          otherwise false.		 */		public function add(element:*):Boolean		{			return push(element);		}						/**		 * Pushes the specified element onto the Stack.		 *		 * @param element The element to push onto the Stack.		 */		public function push(element:*):Boolean		{			_elements.push(element);			_size++;			return true;		}						/**		 * Removes and returns the last pushed element from the stack.		 *		 * @return The last pushed element or undefined if the Stack is empty.		 */		public function pop():*		{			if (_size > 0)			{				_size--;				return _elements.pop();			}			else			{				return undefined;			}		}						/**		 * Throws an unsupported Operation Exceptions as the removal of		 * elements is not allowed in this Stack.		 * 		 * @return undefined.		 * @throws com.hexagonstar.env.exception.UnsupportedOperationException		 */		public function remove(element:*):*		{			throwRemoveNotSupported();			return undefined;		}						////////////////////////////////////////////////////////////////////////////////////////		// Bulk Operations                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Adds all of the elements in the specified Collection to the end of		 * the Stack and returns true if the elements were added successfully.		 *		 * @param collection The Collection whose elements should be added to		 *         the end of the Stack.		 * @return true if the elements of the specified Collection were added		 *          successfully.		 */		public function addAll(collection:ICollection):Boolean		{			if (collection)			{				if (collection.size < 1) return false;								var a:Array = collection.toArray();				var l:int = a.length;								for (var i:int = 0; i < l; i++)				{					push(a[i]);				}								return true;			}			else			{				return throwNullReferenceException();			}		}						/**		 * Throws an unsupported Operation Exceptions as the removal of		 * elements is not allowed in the Stack.		 * 		 * @return false.		 * 		 * @throws com.hexagonstar.env.exception.UnsupportedOperationException		 */		public function removeAll(collection:ICollection):Boolean		{			return throwRemoveNotSupported();		}						/**		 * Throws an unsupported Operation Exceptions as the removal of		 * elements is not allowed in the Stack.		 * 		 * @return false.		 * 		 * @throws com.hexagonstar.env.exception.UnsupportedOperationException		 */		public function retainAll(collection:ICollection):Boolean		{			return throwRemoveNotSupported();		}						/**		 * Clears all elements from the Stack.		 */		public function clear():void		{			_elements = [];			_size = 0;		}	}}