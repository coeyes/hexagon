/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.gui.controls{	import com.hexagonstar.display.StageReference;	import com.hexagonstar.gui.Component;		import flash.display.Sprite;	import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;			/**	 * Slider Class	 */	public class Slider extends Component	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				public static const HORIZONTAL:String = "horizontal";		public static const VERTICAL:String = "vertical";						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _stage:Stage;		protected var _handle:Sprite;		protected var _track:Sprite;				protected var _min:Number = 0;		protected var _max:Number = 100;		protected var _value:Number = 0;				protected var _trackClickable:Boolean = false;		protected var _isDragging:Boolean = false;		protected var _orientation:String;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new Slider instance.		 * 		 * @param orientation		 * @param xpos The x position to place this component.		 * @param ypos The y position to place this component.		 */		public function Slider(orientation:String = Slider.VERTICAL,			x:Number = 0, y:Number = 0)		{			_stage = StageReference.stage;			_orientation = orientation;			super(x, y);		}						/**		 * Draws the visual ui of the component.		 */		override public function draw():void		{			super.draw();			drawTrack();			drawHandle();		}						/**		 * Convenience method to set the three main parameters in one shot.		 * 		 * @param min The minimum value of the slider.		 * @param max The maximum value of the slider.		 * @param value The value of the slider.		 */		public function setSliderParams(min:Number, max:Number, val:Number):void		{			_min = min;			_max = max;			_value = val;						correctValue();			positionHandle();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Sets / gets whether or not a click on the background of the		 * slider will move the handler to that position.		 */		public function set trackClickable(v:Boolean):void		{			_trackClickable = v;			invalidate();		}				public function get trackClickable():Boolean		{			return _trackClickable;		}				/**		 * Determines whether the slider handle is currently being dragged.		 */		public function get isDragging():Boolean		{			return _isDragging;		}				/**		 * Sets/gets the current value of this slider.		 */		public function set value(v:Number):void		{			_value = v;			correctValue();			positionHandle();		}				public function get value():Number		{			return _value;		}				/**		 * Gets/sets the maximum value of this slider.		 */		public function set maximum(v:Number):void		{			_max = v;			correctValue();			positionHandle();		}				public function get maximum():Number		{			return _max;		}				/**		 * Gets/sets the minimum value of this slider.		 */		public function set minimum(v:Number):void		{			_min = v;			correctValue();			positionHandle();		}				public function get minimum():Number		{			return _min;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Handler called when user clicks the background of the slider,		 * causing the handle to move to that point. Only active if backClick is true.		 * @param event The MouseEvent passed by the system.		 */		protected function onTrackClick(e:MouseEvent):void		{			if (_orientation == VERTICAL)			{				_handle.y = mouseY - _width / 2;				_handle.y = Math.max(_handle.y, 0);				_handle.y = Math.min(_handle.y, _height - _width);				_value = (_height - _width - _handle.y)					/ (_height - _width) * (_min - _max) + _max;			}			else			{				_handle.x = mouseX - _height / 2;				_handle.x = Math.max(_handle.x, 0);				_handle.x = Math.min(_handle.x, _width - _height);				_value = _handle.x / (_width - _height) * (_min - _max) + _max;			}						dispatchEvent(new Event(Event.CHANGE));		}						/**		 * Internal mouseDown handler. Starts dragging the handle.		 * @param event The MouseEvent passed by the system.		 */		protected function onMouseDown(e:MouseEvent):void		{			_isDragging = true;						_stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);			_stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);						if (_orientation == VERTICAL)				_handle.startDrag(false, new Rectangle(0, 0, 0, _height - _width));			else				_handle.startDrag(false, new Rectangle(0, 0, _width - _height, 0));		}						/**		 * Internal mouseUp handler. Stops dragging the handle.		 * @param event The MouseEvent passed by the system.		 */		protected function onMouseUp(e:MouseEvent):void		{			_stage.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);			_stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);			stopDrag();			_isDragging = false;		}						/**		 * Internal mouseMove handler for when the handle is being moved.		 * @param event The MouseEvent passed by the system.		 */		protected function onMouseMove(e:MouseEvent):void		{			var old:Number = _value;			if (_orientation == VERTICAL)			{				_value = (_height - _width - _handle.y)					/ (_height - _width) * (_min - _max) + _max;			}			else			{				_value = _handle.x / (_width - _height) * (_min - _max) + _max;			}						if (_value != old) dispatchEvent(new Event(Event.CHANGE));		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Initializes the component.		 */		override protected function init():void		{			super.init();			if (_orientation == VERTICAL) resize(10, 100);			else resize(100, 10);		}						/**		 * Creates and adds the child display objects of this component.		 * @private		 */		override protected function addChildren():void		{			_track = new Sprite();			addChild(_track);						_handle = new Sprite();			_handle.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);			_handle.buttonMode = true;			_handle.useHandCursor = true;			addChild(_handle);		}						/**		 * Draws the track of the slider.		 * @private		 */		protected function drawTrack():void		{			with (_track.graphics)			{				clear();				beginFill(0x333333);				drawRect(0, 0, _width, _height);				endFill();			}						if (_trackClickable)				_track.addEventListener(MouseEvent.MOUSE_DOWN, onTrackClick);			else				_track.removeEventListener(MouseEvent.MOUSE_DOWN, onTrackClick);		}						/**		 * Draws the handle of the slider.		 * @private		 */		protected function drawHandle():void		{			var v:Number = (_orientation == VERTICAL) ? _width - 2 : _height - 2;			with (_handle.graphics)			{				clear();				beginFill(0x666666);				drawRect(1, 1, v, v);				endFill();			}						positionHandle();		}						/**		 * Adjusts position of handle when value, maximum or minimum have changed.		 * TODO: Should also be called when slider is resized.		 * @private		 */		protected function positionHandle():void		{			var range:Number;						if (_orientation == VERTICAL)			{				range = _height - _width;				_handle.y = _height - _width - (_value - _max) / (_min - _max) * range;			}			else			{				range = _width - _height;				_handle.x = (_value - _max) / (_min - _max) * range;			}		}						/**		 * Adjusts value to be within minimum and maximum.		 * @private		 */		protected function correctValue():void		{			if (_max > _min)			{				_value = Math.min(_value, _max);				_value = Math.max(_value, _min);			}			else			{				_value = Math.max(_value, _max);				_value = Math.min(_value, _min);			}		}	}}