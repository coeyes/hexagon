/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.ui.obsolete{	import com.hexagonstar.display.Mask;	import com.hexagonstar.display.shapes.RectangleShape;		import flash.display.Sprite;		/**	 * Panel Class	 */	public class Panel extends Component	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _bg:RectangleShape;		protected var _mask:Mask;		protected var _color:uint = 0x333333;		protected var _transparency:Number = 1.0;				/**		 * Container for content added to this panel. This is masked, so best to		 * add children to content, rather than directly to the panel.		 */		protected var _content:Sprite;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new Panel instance.		 * 		 * @param xpos The x position to place this component.		 * @param ypos The y position to place this component.		 */		public function Panel(x:Number = 0, y:Number =  0)		{			super(x, y);		}						/**		 * Draws the visual ui of the component.		 */		override public function draw():void		{			super.draw();						_bg.draw(_width, _height, _color, _transparency);			_mask.draw(_width, _height);						filters = (_hasShadow) ? [createShadow(2, true)] : [];		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Gets / sets the backgrond color of this panel.		 */		public function set color(v:uint):void		{			_color = v;			invalidate();		}				public function get color():uint		{			return _color;		}				/**		 * Gets/sets the alpha transparency of the panel.		 */		public function get transparency():Number		{			return _transparency;		}				public function set transparency(v:Number):void		{			if (v != _transparency)			{				_transparency = v;				invalidate();			}		}				/**		 * @return the masked content container of the Panel.		 */		public function get content():Sprite		{			return _content;		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Initializes the component.		 * @private		 */		override protected function init():void		{			super.init();			resize(100, 100);		}						/**		 * Creates and adds the child display objects of this component.		 * @private		 */		override protected function addChildren():void		{			_bg = new RectangleShape();			_mask = new Mask();			_content = new Sprite();			_content.mask = _mask;						addChild(_bg);			addChild(_mask);			addChild(_content);		}	}}