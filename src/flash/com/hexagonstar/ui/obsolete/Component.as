/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.ui.obsolete{	import com.hexagonstar.display.BaseSprite;		import flash.display.DisplayObjectContainer;	import flash.events.Event;	import flash.filters.DropShadowFilter;				/**	 * Event that is dispatched to signal that the component has been (re)drawn.	 */	[Event(name="draw", type="flash.events.Event")]			/**	 * Base class for all GUI Components.	 */	public class Component extends BaseSprite	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				public static const DRAW:String = "draw";						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _width:Number = 0;		protected var _height:Number = 0;		protected var _hasShadow:Boolean = true;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new Component instance.		 * 		 * @param x The x position to place this component.		 * @param y The y position to place this component.		 */		public function Component(x:Number = 0, y:Number =  0):void		{			super();						move(x, y);			init();		}						/**		 * Moves the component to the specified position.		 * 		 * @param x the x position to move the component		 * @param y the y position to move the component		 */		public function move(x:Number, y:Number):void		{			this.x = x;			this.y = y;		}						/**		 * Resizes the component.		 * 		 * @param width The width of the component.		 * @param height The height of the component.		 */		public function resize(width:Number, height:Number):void		{			_width = width;			_height = height;			invalidate();		}						/**		 * Abstract draw function.		 */		public function draw():void		{			dispatchEvent(new Event(Component.DRAW));		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Sets/gets the width of the component.		 */		override public function set width(v:Number):void		{			_width = v;			invalidate();			dispatchEvent(new Event(Event.RESIZE));		}				override public function get width():Number		{			return _width;		}				/**		 * Sets/gets the height of the component.		 */		override public function set height(v:Number):void		{			_height = v;			invalidate();			dispatchEvent(new Event(Event.RESIZE));		}				override public function get height():Number		{			return _height;		}				/**		 * Overrides the setter for x to always place the component on a whole pixel.		 */		override public function set x(v:Number):void		{			super.x = Math.round(v);		}				/**		 * Overrides the setter for y to always place the component on a whole pixel.		 */		override public function set y(v:Number):void		{			super.y = Math.round(v);		}				/**		 * Gets / sets whether or not this Panel will have an inner shadow.		 */		public function set hasShadow(v:Boolean):void		{			_hasShadow = v;			invalidate();		}				public function get hasShadow():Boolean		{			return _hasShadow;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Called one frame after invalidate is called.		 * @private		 */		protected function onInvalidate(e:Event):void		{			removeEventListener(Event.ENTER_FRAME, onInvalidate);			draw();		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Initilizes the component.		 * @private		 */		protected function init():void		{			addChildren();			invalidate();		}						/**		 * Abstract method. Overriden in subclasses to create child display objects.		 * @private		 */		protected function addChildren():void		{		}						/**		 * Marks the component to be redrawn on the next frame.		 * @private		 */		protected function invalidate():void		{			addEventListener(Event.ENTER_FRAME, onInvalidate);		}						/**		 * DropShadowFilter factory method, used in many of the components.		 * @private		 * 		 * @param distance The distance of the shadow.		 * @param inner Whether or not to create an inner shadow.		 */		protected static function createShadow(distance:Number,			inner:Boolean = false):DropShadowFilter		{			return new DropShadowFilter(distance, 45, 0x000000, 1, distance, distance,				.3, 1, inner);		}	}}