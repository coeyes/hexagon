/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.ui.controls{	import com.hexagonstar.display.StageReference;	import com.hexagonstar.ui.Component;		import flash.display.Sprite;	import flash.display.Stage;	import flash.events.MouseEvent;			/**	 * AbstractScrollBar Class	 */	public class AbstractScrollBar extends Component	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _stage:Stage;		protected var _handle:Sprite;		protected var _track:Sprite;				protected var _min:Number = 0;		protected var _max:Number = 100;		protected var _value:Number = 0;		protected var _handleSize:int;				protected var _trackClickable:Boolean = false;		protected var _isDragging:Boolean = false;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AbstractScrollBar instance.		 * 		 * @param x The x position to place this component.		 * @param y The y position to place this component.		 */		public function AbstractScrollBar(x:Number = 0, y:Number = 0)		{			_stage = StageReference.stage;			super(x, y);		}						/**		 * Draws the visual UI of the component.		 */		override public function draw():void		{			super.draw();			drawTrack();			drawHandle();		}						/**		 * Convenience method to set the three main parameters in one shot.		 * 		 * @param min The minimum value of the ScrollBar.		 * @param max The maximum value of the ScrollBar.		 * @param value The value of the ScrollBar.		 */		public function setParams(min:Number, max:Number, val:Number):void		{			_min = min;			_max = max;			_value = val;						correctValue();			positionHandle();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Sets/gets whether or not a click on the background of the		 * ScrollBar will move the handler to that position.		 */		public function set trackClickable(v:Boolean):void		{			_trackClickable = v;			invalidate();		}				public function get trackClickable():Boolean		{			return _trackClickable;		}				/**		 * Determines whether the ScrollBar handle is currently being dragged.		 */		public function get isDragging():Boolean		{			return _isDragging;		}				/**		 * Sets/gets the current value of this ScrollBar.		 */		public function set value(v:Number):void		{			_value = v;			correctValue();			positionHandle();		}				public function get value():Number		{			return _value;		}				/**		 * Gets/sets the maximum value of this ScrollBar.		 */		public function set maximum(v:Number):void		{			if (v < 1) v = 1;			_max = v;			correctValue();			positionHandle();		}				public function get maximum():Number		{			return _max;		}				/**		 * Gets/sets the minimum value of this ScrollBar.		 */		public function set minimum(v:Number):void		{			_min = v;			correctValue();			positionHandle();		}				public function get minimum():Number		{			return _min;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Abstract Method.		 * @private		 */		protected function onMouseDown(e:MouseEvent):void		{			_isDragging = true;			_stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);			_stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);		}						/**		 * Internal mouseUp handler. Stops dragging the handle.		 * @param event The MouseEvent passed by the system.		 */		protected function onMouseUp(e:MouseEvent):void		{			_stage.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);			_stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);			stopDrag();			_isDragging = false;		}						/**		 * Abstract Method.		 * @private		 */		protected function onMouseMove(e:MouseEvent):void		{		}						/**		 * Abstract Method.		 * @private		 */		protected function onTrackClick(e:MouseEvent):void		{		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates and adds the child display objects of this component.		 * @private		 */		override protected function addChildren():void		{			_track = new Sprite();			addChild(_track);						_handle = new Sprite();			_handle.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);			_handle.buttonMode = true;			_handle.useHandCursor = true;			addChild(_handle);		}						/**		 * Draws the track of the ScrollBar.		 * @private		 */		protected function drawTrack():void		{			with (_track.graphics)			{				clear();				beginFill(0x222222);				drawRect(0, 0, _width, _height);				endFill();			}						if (_trackClickable)				_track.addEventListener(MouseEvent.MOUSE_DOWN, onTrackClick);			else				_track.removeEventListener(MouseEvent.MOUSE_DOWN, onTrackClick);		}						/**		 * Abstract Method.		 * @private		 */		protected function drawHandle():void		{		}						/**		 * Abstract Method.		 * @private		 */		protected function positionHandle():void		{		}						/**		 * Adjusts value to be within minimum and maximum.		 * @private		 */		protected function correctValue():void		{			if (_max > _min)			{				_value = Math.min(_value, _max);				_value = Math.max(_value, _min);			}			else			{				_value = Math.max(_value, _max);				_value = Math.min(_value, _min);			}		}	}}