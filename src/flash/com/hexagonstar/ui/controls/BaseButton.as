/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.ui.controls{	import com.hexagonstar.ui.core.HUIComponent;	import com.hexagonstar.ui.core.InvalidationType;	import com.hexagonstar.ui.events.ComponentEvent;		import flash.display.DisplayObject;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;			[Event(name="buttonDown", type="com.hexagonstar.env.event.ComponentEvent")]	[Event(name="change", type="flash.events.Event")]	    [Style(name="upSkin", type="Class")]    [Style(name="downSkin", type="Class")]    [Style(name="overSkin", type="Class")]    [Style(name="disabledSkin", type="Class")]    [Style(name="selectedDisabledSkin", type="Class")]    [Style(name="selectedUpSkin", type="Class")]    [Style(name="selectedDownSkin", type="Class")]    [Style(name="selectedOverSkin", type="Class")]    [Style(name="repeatDelay", type="Number", format="Time")]    [Style(name="repeatInterval", type="Number", format="Time")]			/**     * The BaseButton class is the base class for all button components, defining      * properties and methods that are common to all buttons. This class handles      * drawing states and the dispatching of button events.     * 	 * TODO Needs cleanup!	 */	public class BaseButton extends HUIComponent	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var background:DisplayObject;		protected var mouseState:String;		protected var pressTimer:Timer;		protected var _selected:Boolean = false;		protected var _autoRepeat:Boolean = false;				private var _mouseStateLocked:Boolean = false;		private var unlockedMouseState:String;				private static var defaultStyles:Object =		{			upSkin:					"Button_upSkin",			downSkin:				"Button_downSkin",			overSkin:				"Button_overSkin",			disabledSkin:			"Button_disabledSkin",			selectedDisabledSkin:	"Button_selectedDisabledSkin",			selectedUpSkin:			"Button_selectedUpSkin",			selectedDownSkin:		"Button_selectedDownSkin",			selectedOverSkin:		"Button_selectedOverSkin",			focusRectSkin:			null,			focusRectPadding:		null,			repeatDelay:			500,			repeatInterval:			35		};						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new BaseButton instance.		 */		public function BaseButton()		{			super();						buttonMode = true;			mouseChildren = false;			useHandCursor = false;						setupMouseEvents();			setMouseState("up");			pressTimer = new Timer(1, 0);			pressTimer.addEventListener(TimerEvent.TIMER, onButtonDown, false, 0, true);		}						/**		 * Set the mouse state via ActionScript. The BaseButton class		 * uses this property internally, but it can also be invoked manually,		 * and will set the mouse state visually.		 *		 * @param state A string that specifies a mouse state. Supported values are		 * "up", "over", and "down".		 */		public function setMouseState(state:String):void		{			if (_mouseStateLocked) 			{ 				unlockedMouseState = state; 				return; 			}			if (mouseState == state) 			{ 				return; 			}			mouseState = state;			invalidate(InvalidationType.STATE);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public static function get styleDefinition():Object		{ 			return defaultStyles;		}						/**		 * Gets or sets a value that indicates whether the component can accept user 		 * input. A value of <code>true</code> indicates that the component can accept		 * user input; a value of <code>false</code> indicates that it cannot. 		 *		 * <p>When this property is set to <code>false</code>, the button is disabled.		 * This means that although it is visible, it cannot be clicked. This property is 		 * useful for disabling a specific part of the user interface. For example, a button		 * that is used to trigger the reloading of a web page could be disabled		 * by using this technique.</p>		 */		override public function get enabled():Boolean		{			return super.enabled;		}				override public function set enabled(value:Boolean):void		{			super.enabled = value;			mouseEnabled = value;		}						/**		 * Gets or sets a Boolean value that indicates whether a toggle button 		 * is selected. A value of <code>true</code> indicates that the button is		 * selected; a value of <code>false</code> indicates that it is not. 		 * This property has no effect if the <code>toggle</code> property 		 * is not set to <code>true</code>. 		 *		 * <p>For a CheckBox component, this value indicates whether the box is		 * checked. For a RadioButton component, this value indicates whether the 		 * component is selected.</p>		 *		 * <p>This value changes when the user clicks the component  		 * but can also be changed programmatically. If the <code>toggle</code> 		 * property is set to <code>true</code>, changing this property causes  		 * a <code>change</code> event object to be dispatched.</p>		 *		 * @see #event:change change		 * @see LabelButton#toggle LabelButton.toggle		 */		public function get selected():Boolean		{			return _selected;		}				public function set selected(value:Boolean):void		{			if (_selected == value) 			{ 				return; 			}			_selected = value;			invalidate(InvalidationType.STATE);		}						/**		 * Gets or sets a Boolean value that indicates whether the <code>buttonDown</code> event 		 * is dispatched more than one time when the user holds the mouse button down over the component.		 * A value of <code>true</code> indicates that the <code>buttonDown</code> event 		 * is dispatched repeatedly while the mouse button remains down; a value of <code>false</code>		 * indicates that the event is dispatched only one time.		 * 		 * <p>If this value is <code>true</code>, after the delay specified by the 		 * <code>repeatDelay</code> style, the <code>buttonDown</code> 		 * event is dispatched at the interval that is specified by the <code>repeatInterval</code> style.</p>		 *		 * @see #style:repeatDelay		 * @see #style:repeatInterval		 * @see #event:buttonDown		 */		public function get autoRepeat():Boolean		{			return _autoRepeat;		}				public function set autoRepeat(value:Boolean):void		{			_autoRepeat = value;		}						/**		 * @private		 */		public function set mouseStateLocked(value:Boolean):void		{			_mouseStateLocked = value;			if (value == false) 			{ 				setMouseState(unlockedMouseState); 			}			else 			{ 				unlockedMouseState = mouseState; 			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onButtonDown(event:TimerEvent):void		{			if (!_autoRepeat) 			{ 				endPress(); 				return; 			}			if (pressTimer.currentCount == 1) 			{ 				pressTimer.delay = Number(getStyleValue("repeatInterval")); 			}			dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));		}						/**		 * @private		 */		protected function onMouseEvent(event:MouseEvent):void		{			if (event.type == MouseEvent.MOUSE_DOWN) 			{				setMouseState("down");				startPress();			} else if (event.type == MouseEvent.ROLL_OVER || event.type == MouseEvent.MOUSE_UP) 			{				setMouseState("over");				endPress();			} else if (event.type == MouseEvent.ROLL_OUT) 			{				setMouseState("up");				endPress();			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		override protected function draw():void		{			if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)) 			{				drawBackground();				invalidate(InvalidationType.SIZE, false); // invalidates size without calling draw next frame.			}			if (isInvalid(InvalidationType.SIZE)) 			{				drawLayout();			}			super.draw();		}						/**		 * @private		 */		protected function setupMouseEvents():void		{			addEventListener(MouseEvent.ROLL_OVER, onMouseEvent, false, 0, true);			addEventListener(MouseEvent.MOUSE_DOWN, onMouseEvent, false, 0, true);			addEventListener(MouseEvent.MOUSE_UP, onMouseEvent, false, 0, true);			addEventListener(MouseEvent.ROLL_OUT, onMouseEvent, false, 0, true);		}						/**		 * @private		 */		protected function startPress():void		{			if (_autoRepeat) 			{				pressTimer.delay = Number(getStyleValue("repeatDelay"));				pressTimer.start();			}			dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));		}						/**		 * @private		 */		protected function endPress():void		{			pressTimer.reset();		}						/**		 * @private		 */		protected function drawBackground():void		{			var styleName:String = (enabled) ? mouseState : "disabled";			if (selected) 			{ 				styleName = "selected" + styleName.substr(0, 1).toUpperCase() + styleName.substr(1); 			}			styleName += "Skin";			var bg:DisplayObject = background;			background = getDisplayObjectInstance(getStyleValue(styleName));			addChildAt(background, 0);			if (bg != null && bg != background) 			{ 				removeChild(bg); 			}		}						/**		 * @private		 */		protected function drawLayout():void		{			background.width = width;			background.height = height;		}	}}