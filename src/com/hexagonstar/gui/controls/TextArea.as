/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.gui.controls{	import com.hexagonstar.gui.Component;	import com.hexagonstar.gui.containers.Panel;		import flash.events.Event;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.text.TextFormat;		/**	 * TextArea Class	 */	public class TextArea extends Component	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _panel:Panel;		protected var _tf:TextField;		protected var _text:String = "";		protected var _editable:Boolean = true;		protected var _selectable:Boolean = true;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new TextArea instance.		 * 		 * @param x The x position to place this component.		 * @param y The y position to place this component.		 * @param text The initial text to display in this component.		 */		public function TextArea(x:Number = 0, y:Number =  0, text:String = "")		{			_text = text;			super(x, y);			resize(200, 100);		}						/**		 * Draws the visual ui of the component.		 */		override public function draw():void		{			super.draw();						_panel.resize(_width, _height);			_panel.hasShadow = _hasShadow;						_tf.width = _width - 4;			_tf.height = _height - 4;			_tf.text = _text;						if (_selectable)			{				_tf.selectable = true;				_tf.mouseEnabled = true;			}			else			{				_tf.selectable = false;				_tf.mouseEnabled = false;			}						if (_editable)			{				_tf.type = TextFieldType.INPUT;			}			else			{				_tf.type = TextFieldType.DYNAMIC;			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Gets / sets the text of this Label.		 */		public function set text(v:String):void		{			_text = v;			invalidate();		}				public function get text():String		{			return _text;		}				/**		 * Gets / sets whether or not this text component will be editable.		 */		public function set editable(v:Boolean):void		{			_editable = v;			invalidate();		}				public function get editable():Boolean		{			return _editable;		}				/**		 * Gets / sets whether or not the component text will be selectable.		 */		public function set selectable(v:Boolean):void		{			_selectable = v;			invalidate();		}				public function get selectable():Boolean		{			return _selectable;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Internal change handler.		 * @private		 * 		 * @param e The Event passed by the system.		 */		protected function onChange(e:Event):void		{			_text = _tf.text;			dispatchEvent(e);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Initializes the component.		 * @private		 */		override protected function init():void		{			super.init();		}						/**		 * Creates and adds the child display objects of this component.		 * @private		 */		override protected function addChildren():void		{			_panel = new Panel();			addChild(_panel);						_tf = new TextField();			_tf.x = 2;			_tf.y = 2;			_tf.height = _height;			//_tf.embedFonts = true;			_tf.multiline = true;			_tf.wordWrap = true;			_tf.selectable = true;			_tf.type = TextFieldType.INPUT;			_tf.defaultTextFormat = new TextFormat("sans", 11, 0xFFFFFF);			_tf.addEventListener(Event.CHANGE, onChange);						addChild(_tf);		}	}}