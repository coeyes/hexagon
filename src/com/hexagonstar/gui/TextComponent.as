/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.gui{	import com.hexagonstar.display.StageReference;		import flash.text.TextField;			/**	 * Abstract class for Text-based Components.	 */	public class TextComponent extends Component	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _tf:TextField;		protected var _text:String = "";		protected var _font:String = "sans-serif";		protected var _fontSize:int = 12;		protected var _color:uint = 0xEEEEEE;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new TextComponent instance.		 * 		 * @param x The x position to place this component.		 * @param y The y position to place this component.		 * @param text The string containing the initial text of this component.		 */		public function TextComponent(x:Number = 0, y:Number =  0, text:String = "")		{			_text = text;			super(x, y);		}						/**		 * focus		 */		public function focus():void		{			var isEmpty:Boolean = (_tf.length == 0);			if (isEmpty) _tf.text = " ";			StageReference.stage.focus = _tf;			_tf.setSelection(_tf.length, _tf.length);			if (isEmpty) _tf.text = "";		}				////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Gets / sets the text shown in this InputText.		 */		public function set text(v:String):void		{			_text = v;			invalidate();		}				public function get text():String		{			return _text;		}				public function get font():String		{			return _font;		}				public function set font(v:String):void		{			_font = v;			invalidate();		}				public function get fontSize():int		{			return _fontSize;		}				public function set fontSize(v:int):void		{			_fontSize = v;			invalidate();		}				public function get color():uint		{			return _color;		}				public function set color(v:uint):void		{			_color = v;			invalidate();		}				public function get embedFonts():Boolean		{			return _tf.embedFonts;		}				public function set embedFonts(v:Boolean):void		{			_tf.embedFonts = v;			invalidate();		}	}}