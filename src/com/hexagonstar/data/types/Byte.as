/* * hexagon framework - Multi-Purpose ActionScript 3 Framework. * Copyright (C) 2007 Hexagon Star Softworks *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/ FRAMEWORK_/ *            \__/  \__/ * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.data.types{	import com.hexagonstar.data.constants.DataUnit;			/**	 * The Byte class represents a byte value.	 * 	 * <p>This class can be used for a different kind of formatting of a byte	 * value. It allows to access the value as bit, kilo-bit, mega-bit, giga-bit,	 * tera-bit, byte, kilo-byte, mega-byte, giga-byte, tera-byte etc.	 */	public class Byte extends Bit	{		////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Constructs a new Byte instance.		 * 		 * @param bytes The byte value for the Byte.		 * @param decimals Determines how many decimal places the byte value should have.		 */		public function Byte(bytes:Number = 0, decimals:int = 2)		{			super((bytes * DataUnit.BYTE), decimals);		}						/**		 * Returns a well formatted string representation of the byte value. This		 * method uses the next matching size and adds the matching Shortname to it.		 * 		 * @example		 * <p><pre>		 *    new Byte(1).toString();          // 1B		 *    new Byte(1234).toString();       // 1.21kB		 *    new Byte(15002344).toString();   // 14.31MB		 * </pre>		 * 		 * @return Bytes in the next matching size with the matching unit.		 */		override public function toString(...args):String		{			var result:String;			if (_value < DataUnit.KILOBYTE)				result = bytes + DataUnit.SYMBOL_BYTE;			else if (_value < DataUnit.MEGABYTE)				result = kiloBytes + DataUnit.SYMBOL_KILOBYTE;			else if (_value < DataUnit.GIGABYTE)				result = megaBytes + DataUnit.SYMBOL_MEGABYTE;			else if (_value < DataUnit.TERABYTE)				result = gigaBytes + DataUnit.SYMBOL_GIGABYTE;			else				result = teraBytes + DataUnit.SYMBOL_TERABYTE;			return result;		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				override public function get value():Number		{			return bytes;		}				override public function set value(v:Number):void		{			_value = v;		}	}}