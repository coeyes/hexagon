/* * hexagon framework - Multi-Purpose ActionScript 3 Framework. * Copyright (C) 2007 Hexagon Star Softworks *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/ FRAMEWORK_/ *            \__/  \__/ * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.data.structures{	import com.hexagonstar.core.BasicClass;	import com.hexagonstar.env.exception.NullReferenceException;			/**	 * AbstractCollection Class	 */	public class AbstractCollection extends BasicClass	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _size:int;						////////////////////////////////////////////////////////////////////////////////////////		// Query Operations                                                                   //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns an integer that represents the number of elements that		 * the collection contains.		 * 		 * @return The number of elements in the collection.		 */		public function get size():int		{			return _size;		}						/**		 * Returns a boolean that signals if the collection is empty or not. If		 * true is returned, the collection is empty, if false is returned, the		 * collection contains any number of elements.		 *		 * @return true If the collection contains no elements, otherwise false.		 */		public function get isEmpty():Boolean		{			return (_size < 1);		}						/**		 * Abstract contains method! Needs to be overridden in concrete classes.		 */		public virtual function contains(element:*):Boolean		{			return false;		}						/**		 * Returns a String Representation of the Collection Type.		 * 		 * @return A String Representation of the Collection Type.		 */		override public function toString(...args):String		{			return super.toString("size=" + size);		}						////////////////////////////////////////////////////////////////////////////////////////		// Bulk Operations                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Checks whether the collection contains all of the elements that are in		 * the specified collection and returns true if all of the elements are		 * found or false if any elements are missing.		 *		 * @param collection The collection with elements to be checked for		 *         containment in this collection.		 * 		 * @return true If the collection contains all of the elements		 *	        in the specified collection, otherwise false.		 * 		 * @throws com.hexagonstar.env.exception.NullReferenceException if the		 *          specified collection is null.		 * @throws com.hexagonstar.env.exception.UnsupportedOperationException if		 *          this method is not supported by the collection.		 */		public function containsAll(collection:ICollection):Boolean		{			if (collection)			{				var i:IIterator = collection.iterator();				while (i.hasNext)				{					if (!contains(i.next)) return false;				}				return true;			}			else			{				return throwNullReferenceException();			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * throws a NullReferenceException.		 * @private		 */		protected function throwNullReferenceException():Boolean		{			throw new NullReferenceException("The specified collection is null!");			return false;		}	}}