/* * hexagon framework - Multi-Purpose ActionScript 3 Framework. * Copyright (C) 2007 Hexagon Star Softworks *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/ FRAMEWORK_/ *            \__/  \__/ * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.data.structures.lists{	import com.hexagonstar.data.structures.IIterator;	import com.hexagonstar.env.exception.IllegalArgumentException;	import com.hexagonstar.env.exception.IllegalStateException;	import com.hexagonstar.env.exception.NoSuchElementException;			/**	 * ListIterator Class	 */	public class ListIterator implements IIterator	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				private var _list:IList;		private var _index:int;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new ListIterator instance.		 * 		 * @param list The list to iterate over.		 * 		 * @throws com.hexagonstar.env.exception.IllegalArgumentException if		 *          the specified list is null or undefined.		 */		public function ListIterator(list:IList)		{			if (!list)			{				throw new IllegalArgumentException("Argument 'list' ["					+ list + "] is null.");			}						_list = list;			reset();		}						/**		 * remove		 */		public function remove():*		{			if (_index < 0)			{				throw new IllegalStateException("Tried to remove an element from the"				+ " list before calling the 'next' method. There is thus no element"				+ " selected to remove.");			}			return _list.removeByIndex(_index);		}						/**		 * reset		 */		 public function reset():void		 {		 	_index = -1;		 }		 		 		////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get hasNext():Boolean		{			return (_index < _list.size - 1);		}				public function get hasPrevious():Boolean		{			return (_index > -1);		}				public function get next():*		{			if (!hasNext)			{				throw new NoSuchElementException("There is no next element in the"					+ " list to iterate over.");				return undefined;			}			return _list.getElementAt(++_index);		}				public function get previous():*		{			if (!hasPrevious)			{				throw new NoSuchElementException("There is no previous element in the"					+ " list to iterate over.");				return undefined;			}			return _list.getElementAt(_index--);		}				public function get nextIndex():int		{			if (!hasNext)				return _list.size;			else				return _index + 1;		}				public function get previousIndex():int		{			if (!hasPrevious)				return -1;			else				return _index - 1;		}			}}