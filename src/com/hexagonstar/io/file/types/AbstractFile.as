/* * hexagon framework - Multi-Purpose ActionScript 3 Framework. * Copyright (C) 2007 Hexagon Star Softworks *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/ FRAMEWORK_/ *            \__/  \__/ * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.io.file.types{	import com.hexagonstar.core.BasicClass;	import com.hexagonstar.data.types.Byte;			/**	 * Contains common methods used by concrete File implementations.	 */	public class AbstractFile extends BasicClass	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _path:String;		protected var _size:Byte;		protected var _isValid:Boolean;		protected var _errorStatus:String;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AbstractFile instance. This class only exists		 * so that File implementations can extend it.		 * 		 * @param path The path where the file is located.		 */		public function AbstractFile(path:String = "")		{			_path = path;			_size = new Byte(0);			_isValid = false;			_errorStatus = "";		}						/**		 * Returns a String Representation of the File.		 * 		 * @return A String Representation of the File.		 */		override public function toString(...args):String		{			return super.toString("path=" + _path, "size=" + _size);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get path():String		{			return _path;		}				public function set path(v:String):void		{			_path = v;		}				public function get size():Byte		{			return _size;		}				public function set size(v:Byte):void		{			_size = v;		}				public function get isValid():Boolean		{			return _isValid;		}				public function get errorStatus():String		{			return _errorStatus;		}				/**		 * Abstract method! Needs overriding.		 */		public virtual function get content():*		{			return null;		}	}}