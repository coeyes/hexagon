/* * hexagon framework - Multi-Purpose ActionScript 3 Framework. * Copyright (C) 2007 Hexagon Star Softworks *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/ FRAMEWORK_/ *            \__/  \__/ * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.io.file{	import com.hexagonstar.env.exception.IllegalArgumentException;	import com.hexagonstar.io.file.types.*;			/**	 * FileFactory creates Files.	 */	public class FileFactory	{		////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new FileFactory instance.		 */		public function FileFactory()		{		}						/**		 * Creates a new File which type depends on the specified ID. Use the		 * IDs specified in com.hexagonstar.io.file.types.FileTypeIndex to		 * determine the file ID.		 *		 * @param id the ID of the file type.		 * @return A new file instance specific to the passed-in ID.		 * 		 * @throws com.hexagonstar.env.exception.IllegalArgumentException if		 *         the specified ID is not known to the FileFactory.		 */		public function create(id:int):IFile		{			var file:IFile = null;						switch (id)			{				case FileTypeIndex.BINARY_FILE_ID:					file = new BinaryFile();					break;				case FileTypeIndex.TEXT_FILE_ID:					file = new TextFile();					break;				case FileTypeIndex.XML_FILE_ID:					file = new XMLFile();					break;				case FileTypeIndex.CSS_FILE_ID:					file = new CSSFile();					break;				case FileTypeIndex.PROPERTIES_FILE_ID:					file = new PropertiesFile();					break;				case FileTypeIndex.MEDIA_FILE_ID:					file = new MediaFile();					break;				case FileTypeIndex.IMAGE_FILE_ID:					file = new ImageFile();					break;				case FileTypeIndex.SWF_FILE_ID:					file = new SWFFile();					break;				case FileTypeIndex.VIDEO_FILE_ID:					file = new VideoFile();					break;				case FileTypeIndex.SOUND_FILE_ID:					file = new SoundFile();					break;				case FileTypeIndex.TILESET_FILE_ID:					file = new TileSetFile();					break;				default:					throw new IllegalArgumentException("A filetype with the ID " + id						+ " has not been specified in the FileType Index!");			}						return file;		}	}}