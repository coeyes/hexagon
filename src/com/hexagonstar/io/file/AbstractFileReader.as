/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file{	import com.hexagonstar.env.event.FileIOEvent;	import com.hexagonstar.io.file.types.IFile;		import flash.events.EventDispatcher;			/**	 * AbstractFileReader Class	 */	public class AbstractFileReader extends EventDispatcher	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _file:IFile;		protected var _filePath:String;		protected var _fileLoaderFactory:FileLoaderFactory;		protected var _fileLoader:IFileLoader;		protected var _filePercentage:Number;		protected var _bytesLoaded:int;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AbstractFileReader instance.		 */		public function AbstractFileReader()		{			super();		}						/**		 * Initializes the FileLoader.		 */		public function init():void		{			_filePercentage = 0;			_bytesLoaded = 0;		}						/**		 * load		 */		public function load():void		{			if (!_fileLoaderFactory) _fileLoaderFactory = new FileLoaderFactory();		}
		
		/**		 * Aborts the file loading process.		 */		public function abort():void		{			if (isLoading)			{				_fileLoader.abort();			}		}						/**		 * Cleans up Objects used by the FileReader.		 */		public function dispose():void		{			_fileLoaderFactory = null;			_fileLoader.dispose();			_fileLoader = null;			_filePath = null;			_filePercentage = 0;			_bytesLoaded = 0;		}				/**		 * Can be used to add all event listeners for the specific class. the		 * class must then implement the IFileIOEventListener interface.		 * 		 * @param listener The class for which events should be listened.		 */		public function addEventListenersFor(listener:IFileIOEventListener):void		{			addEventListener(FileIOEvent.OPEN, listener.onOpen);			addEventListener(FileIOEvent.PROGRESS, listener.onProgress);			addEventListener(FileIOEvent.COMPLETE, listener.onComplete);			addEventListener(FileIOEvent.ABORT, listener.onAbort);			addEventListener(FileIOEvent.HTTP_STATUS, listener.onHTTPStatus);			addEventListener(FileIOEvent.IO_ERROR, listener.onIOError);			addEventListener(FileIOEvent.SECURITY_ERROR, listener.onSecurityError);		}						/**		 * removeEventListenersFor		 */		public function removeEventListenersFor(listener:IFileIOEventListener):void		{			removeEventListener(FileIOEvent.OPEN, listener.onOpen);			removeEventListener(FileIOEvent.PROGRESS, listener.onProgress);			removeEventListener(FileIOEvent.COMPLETE, listener.onComplete);			removeEventListener(FileIOEvent.ABORT, listener.onAbort);			removeEventListener(FileIOEvent.HTTP_STATUS, listener.onHTTPStatus);			removeEventListener(FileIOEvent.IO_ERROR, listener.onIOError);			removeEventListener(FileIOEvent.SECURITY_ERROR, listener.onSecurityError);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns true if a file loading is in progress.		 */		public function get isLoading():Boolean		{			if (_fileLoader) return _fileLoader.isLoading;			return false;		}						/**		 * Returns true if the file loading progress was aborted.		 */		public function get isAborted():Boolean		{			if (_fileLoader) return _fileLoader.isAborted;			return false;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Called after the file has been opened for loading.		 * @private		 */		protected function onOpen(e:FileIOEvent):void		{			dispatchFileIOEvent(FileIOEvent.OPEN, e);		}						/**		 * Called on every file loading progress event.		 * @private		 */		protected function onProgress(e:FileIOEvent):void		{			dispatchFileIOEvent(FileIOEvent.PROGRESS, e);		}						/**		 * Called after a file has been loaded completely.		 * @private		 */		protected function onComplete(e:FileIOEvent):void		{			removeEventListeners();			dispatchFileIOEvent(FileIOEvent.COMPLETE, e);		}						/**		 * Called if the load progress has been aborted.		 * @private		 */		protected function onAbort(e:FileIOEvent):void		{			removeEventListeners();			dispatchFileIOEvent(FileIOEvent.ABORT, e);		}						/**		 * Called after a HTTP Status event occured.		 * @private		 */		protected function onHTTPStatus(e:FileIOEvent):void		{			dispatchFileIOEvent(FileIOEvent.HTTP_STATUS, e);		}						/**		 * Called if an IO error occured, e.g. if the file could not be found.		 * @private		 */		protected function onIOError(e:FileIOEvent):void		{			dispatchFileIOEvent(FileIOEvent.IO_ERROR, e);		}						/**		 * Called after a File Security Error occured, e.g. errors regarding the		 * Flash security sandbox.		 * @private		 */		protected function onSecurityError(e:FileIOEvent):void		{			dispatchFileIOEvent(FileIOEvent.SECURITY_ERROR, e);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Adds event listeners to the File Loader.		 * @private		 */		protected function addEventListeners():void		{			_fileLoader.addEventListener(FileIOEvent.OPEN, onOpen);			_fileLoader.addEventListener(FileIOEvent.PROGRESS, onProgress);			_fileLoader.addEventListener(FileIOEvent.COMPLETE, onComplete);			_fileLoader.addEventListener(FileIOEvent.ABORT, onAbort);			_fileLoader.addEventListener(FileIOEvent.HTTP_STATUS, onHTTPStatus);			_fileLoader.addEventListener(FileIOEvent.IO_ERROR, onIOError);			_fileLoader.addEventListener(FileIOEvent.SECURITY_ERROR, onSecurityError);		}						/**		 * Removes all event listeners from the File Loader.		 * @private		 */		protected function removeEventListeners():void		{			_fileLoader.removeEventListener(FileIOEvent.OPEN, onOpen);			_fileLoader.removeEventListener(FileIOEvent.PROGRESS, onProgress);			_fileLoader.removeEventListener(FileIOEvent.COMPLETE, onComplete);			_fileLoader.removeEventListener(FileIOEvent.ABORT, onAbort);			_fileLoader.removeEventListener(FileIOEvent.HTTP_STATUS, onHTTPStatus);			_fileLoader.removeEventListener(FileIOEvent.IO_ERROR, onIOError);			_fileLoader.removeEventListener(FileIOEvent.SECURITY_ERROR, onSecurityError);		}						/**		 * dispatchFileIOEvent		 * @private		 */		protected function dispatchFileIOEvent(type:String, e:FileIOEvent):void		{			dispatchEvent(new FileIOEvent(type, _file, e.text, e.httpStatus));		}	}}