/* * hexagon framework - Multi-Purpose ActionScript 3 Framework. * Copyright (C) 2007 Hexagon Star Softworks *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/ FRAMEWORK_/ *            \__/  \__/ * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.io.file{	import com.hexagonstar.data.structures.queues.LinearQueue;	import com.hexagonstar.data.types.Byte;	import com.hexagonstar.env.exception.EmptyDataStructureException;	import com.hexagonstar.io.file.types.IFile;			/**	 * SequentialFileReader Class	 */	public class SequentialFileReader extends AbstractFileReader implements IFileReader	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				private static var _instance:SequentialFileReader;		private var _fileQueue:LinearQueue;		private var _tempQueue:LinearQueue;		private var _fileAmount:int;		private var _fileIndex:int;		private var _totalPercentage:Number;		private var _totalBytesLoaded:Byte;				////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new SequentialFileReader instance. If a file queue is specified		 * it is used to load the files in it, otherwise files need to be added with		 * the addFile method or the setFileQueue method.		 * 		 * @param fileQueue A queue that is used for loading files.		 */		public function SequentialFileReader(fileQueue:LinearQueue = null)		{			super();						if (fileQueue)			{				_fileQueue = fileQueue;				_fileAmount = _fileQueue.size;			}			else			{				_fileQueue = new LinearQueue();				_fileAmount = 0;			}						init();		}						/**		 * Initializes the FileLoader.		 */		override public function init():void		{			if (!isLoading)			{				super.init();				_fileIndex = -1;				_totalPercentage = 0;				_totalBytesLoaded = new Byte(0);				_tempQueue = new LinearQueue();			}		}						/**		 * Adds a new file to the file reader's file queue.		 * 		 * @param file a File that is to be loaded.		 */		public function addFile(file:IFile):void		{			if (!_fileQueue) _fileQueue = new LinearQueue();						_fileQueue.enqueue(file);			_fileAmount = _fileQueue.size;		}						/**		 * Can be used to add all event listeners for the specified class. The		 * class must then implement the IFileIOEventListener interface.		 * 		 * @param listener The class for which events should be listened.		 */		override public function addEventListenersFor(listener:IFileIOEventListener):void		{			super.addEventListenersFor(listener);			addEventListener(FileIOEvent.ALL_COMPLETE, listener.onAllComplete);		}						/**		 * removeEventListenersFor		 */		override public function removeEventListenersFor(listener:IFileIOEventListener):void		{			super.removeEventListenersFor(listener);			removeEventListener(FileIOEvent.ALL_COMPLETE, listener.onAllComplete);		}						/**		 * Starts the load process of the files in the FileQueue.		 * 		 * @throws EmptyDataStructureException if the file queue is empty.		 */		override public function load():void		{			if (_fileQueue.isEmpty)			{				throw new EmptyDataStructureException("Tried to load files from"					+ " an empty File Queue.");			}			else			{				super.load();				_file = _fileQueue.dequeue() as IFile;				_filePath = _file.path;				_fileIndex++;				_fileLoader = _fileLoaderFactory.create(_file);				addEventListeners();				_fileLoader.load(_filePath);			}		}						/**		 * Cleans up Objects used by the FileReader.		 */		override public function dispose():void		{			if (!isLoading)			{				_tempQueue = null;				_fileIndex = -1;				_fileAmount = 0;				_totalPercentage = 0;				super.dispose();			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns a SequentialFileReader instance. This method can be used instead		 * of the constructor to retrieve a singleton instance.		 *		 * @return the SequentialFileReader instance.		 */		public static function get instance():SequentialFileReader		{			if (!_instance) _instance = new SequentialFileReader();			return _instance;		}				public function get fileQueue():LinearQueue		{			return _fileQueue;		}				public function set fileQueue(v:LinearQueue):void		{			_fileQueue = v;			_fileAmount = _fileQueue.size;		}				public function get bytesLoaded():Byte		{			return new Byte(_bytesLoaded);		}				public function get percentage():int		{			return Math.floor(_totalPercentage);		}				public function get currentFilePath():String		{			return _filePath;		}				public function get currentIndex():int		{			return _fileIndex;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				override protected function onOpen(e:FileIOEvent):void		{			_totalBytesLoaded = _fileLoader.bytesLoaded;			_totalPercentage = _filePercentage + (_fileLoader.percentage / _fileAmount);			super.onOpen(e);		}				override protected function onProgress(e:FileIOEvent):void		{			_totalBytesLoaded = _fileLoader.bytesLoaded;			_totalPercentage = _filePercentage + (_fileLoader.percentage / _fileAmount);			super.onProgress(e);		}				override protected function onComplete(e:FileIOEvent):void		{			_bytesLoaded += _totalBytesLoaded.bytes;			_filePercentage += (100 / _fileAmount);			_tempQueue.enqueue(_file);			super.onComplete(e);			next(e);		}				override protected function onAbort(e:FileIOEvent):void		{			super.onAbort(e);		}				override protected function onHTTPStatus(e:FileIOEvent):void		{			super.onHTTPStatus(e);		}				override protected function onIOError(e:FileIOEvent):void		{			super.onIOError(e);			next(e);		}				override protected function onSecurityError(e:FileIOEvent):void		{			super.onSecurityError(e);			next(e);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////						/**		 * Checks whether there are more files to be loaded in which case		 * the load method is called, or if all files are done loading.		 * @private		 */		private function next(e:FileIOEvent):void		{			if (!_fileQueue.isEmpty)			{				load();			}			else			{				_fileQueue = _tempQueue;				dispose();				dispatchFileIOEvent(FileIOEvent.ALL_COMPLETE, e);			}		}	}}