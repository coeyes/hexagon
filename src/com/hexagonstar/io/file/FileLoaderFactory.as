/* * hexagon framework - Multi-Purpose ActionScript 3 Framework. * Copyright (C) 2007 Hexagon Star Softworks *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/ FRAMEWORK_/ *            \__/  \__/ * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.io.file{	import com.hexagonstar.env.exception.IllegalArgumentException;	import com.hexagonstar.io.file.types.*;			/**	 * FileLoaderFactory Class	 */	internal class FileLoaderFactory	{		////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new FileLoaderFactory instance.		 */		public function FileLoaderFactory()		{		}						/**		 * Creates a new FileLoader which type depends on the specified file type.		 *		 * @param file the file for whose file type a FileLoader should be created.		 * @return a new FileLoader instance specific to the passed-in file.		 * 		 * @throws com.hexagonstar.env.exception.IllegalArgumentException if		 *         the specified filetype is not known to the FileLoaderFactory.		 */		public function create(file:IFile):IFileLoader		{			var fileLoader:IFileLoader = null;						if (file is BinaryFile)			{				fileLoader = new BinaryFileLoader(file);			}			else if (file is TextFile)			{				fileLoader = new TextFileLoader(file);			}			else if (file is MediaFile)			{				fileLoader = new MediaFileLoader(file);			}			else if (file is SoundFile)			{				// TODO				fileLoader = new BinaryFileLoader(file);				//fileLoader = new SoundFileLoader(file);			}			else			{				throw new IllegalArgumentException("A FileLoader for the filetype of " + file					+ " has not been specified in the FileLoaderFactory!");			}						return fileLoader;		}	}}