/* * hexagon framework - Multi-Purpose ActionScript 3 Framework. * Copyright (C) 2007 Hexagon Star Softworks *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/ FRAMEWORK_/ *            \__/  \__/ * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.io.file{	import com.hexagonstar.data.types.Byte;	import com.hexagonstar.env.exception.FileNotLoadedException;	import com.hexagonstar.io.file.types.IFile;	import com.hexagonstar.io.file.types.MediaFile;		import flash.display.Loader;	import flash.events.Event;			/**	 * MediaFileLoader is an implementation of FileLoader for media resources.	 */	public class MediaFileLoader extends AbstractFileLoader implements IFileLoader	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _loader:Loader;				////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new MediaFileLoader instance.		 */		public function MediaFileLoader(file:IFile)		{			super(file);		}						/**		 * Loads a media file.		 *		 * @param path location of the file to load.		 */		override public function load(filePath:String):void		{			super.load(filePath);			_loader = (_file as MediaFile).container;			addEventListeners(_loader.contentLoaderInfo);			_loader.load(_urlRequest);		}						/**		 * Aborts the file loading process.		 */		public function abort():void		{			if (_isLoading)			{				try				{					_loader.close();				}				catch (e:Error)				{				}				removeEventListeners(_loader.contentLoaderInfo);				_isAborted = true;				dispatchEvent(new FileIOEvent(FileIOEvent.ABORT));			}		}						/**		 * Cleans up Objects used by the FileReader.		 */		override public function dispose():void		{			super.dispose();			_loader = null;		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns the total amount of bytes that have been loaded.		 * 		 * @return amount of bytes that have been loaded.		 */		override public function get bytesLoaded():Byte		{			return new Byte(_loader.contentLoaderInfo.bytesLoaded);		}						/**		 * Returns the total amount of bytes that will approximately be loaded.		 * 		 * @return amount of bytes to load.		 */		override public function get bytesTotal():Byte		{			return new Byte(_loader.contentLoaderInfo.bytesTotal);		}						/**		 * Returns the content of the loaded file.		 * 		 * @return the loaded resource.		 * @throws FileNotLoadedException if the resource has not been loaded yet.		 */		override public function get fileContent():*		{			if (_loader.content == null)			{				throw new FileNotLoadedException("No File has been loaded yet.");			}			return _loader.content;		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * onComplete Event Handler is called after a file finished loading.		 * @private		 */		override protected function onComplete(e:Event):void		{			_file.size = bytesLoaded;			super.onComplete(e);		}	}}