/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.util.debug{	import com.hexagonstar.display.StageReference;	import com.hexagonstar.display.shapes.RectangleShape;	import com.hexagonstar.gui.Component;	import com.hexagonstar.gui.controls.HRule;	import com.hexagonstar.gui.controls.TextArea;	import com.hexagonstar.gui.controls.TextInput;	import com.hexagonstar.io.key.Key;		import flash.display.Stage;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.text.StyleSheet;	import flash.ui.Keyboard;			/**	 * A Singleton class that represents a Debugging and Command output console similar	 * to that found in many later games. By default the console - once instantiated and	 * added to the stage - is hidden and can be toggled visible with the toggle() method.	 * 	 * StageReference.stage must be assigned before the console can be used.	 * 	 * TODO Add input back-buffer to recall already entered commands when	 * pressing cursor-up key.	 * 	 * @author Sascha Balkau	 */	public class Console extends Component	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				public static const LEVEL_DEBUG:int	= 0;		public static const LEVEL_INFO:int	= 1;		public static const LEVEL_WARN:int	= 2;		public static const LEVEL_ERROR:int	= 3;		public static const LEVEL_FATAL:int	= 4;				protected static const PADDING:int = 4;						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected static var _instance:Console;				protected var _stage:Stage;		protected var _key:Key;		protected var _bg:RectangleShape;		protected var _ta:TextArea;		protected var _ti:TextInput;		protected var _rule:HRule;		protected var _style:StyleSheet;		protected var _font:String = "mono";		protected var _fontSize:int = 12;		protected var _color:uint = 0xEEEEEE;		protected var _useHTMLText:Boolean = true;		protected var _doClear:Boolean = false;		protected var _allowInput:Boolean;		protected var _loggingEnabled:Boolean = true;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new instance of the class.		 */		public function Console()		{			super();						if (_instance)			{				throw new Error("Tried to instantiate Console through"					+ " it's constructor. Use Console.instance instead!");			}						visible = false;						_stage = StageReference.stage;			_width = _stage.stageWidth;			_height = _stage.stageHeight / 2;						_key = Key.instance;			_key.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);			_key.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);		}						/**		 * Adds a new trace message to the console output area.		 * 		 * @param message the message to output.		 * @param level the output level (0-4).		 */		public function trace(message:String, level:int = 1):void		{			if (_loggingEnabled) add(message, level);		}						/**		 * Clears the console.		 */		public function clear():void		{			clearInput();			_ta.text = "";		}						/**		 * Toggles the console visibility.		 */		public function toggle():void		{			visible = !visible;		}						/**		 * Sets the font face and font size that the console should use.		 * 		 * @param fontFace The font face for the console text.		 * @param fontSize The font size for the console text.		 */		public function setFont(fontFace:String, fontSize:int):void		{			_font = fontFace;			_fontSize = fontSize;			createStyleSheet();			invalidate();		}				/**		 * Draws the visual UI of the component. This method is always invoked		 * one frame after an invalidate() call.		 */		override public function draw():void		{			super.draw();						_bg.draw(_width, _height, 0x333333);						_ti.width = _width - (PADDING * 2);			_ti.x = PADDING;			_ti.y = _height - _ti.height - PADDING;			_ti.font = _font;			_ti.fontSize = _fontSize;			_ti.color = _color;						_rule.width = _width;			_rule.y = _height - _ti.height - (PADDING * 2);						_ta.width = _ti.width;			_ta.x = _ti.x;			_ta.y = PADDING;			_ta.height = _height - _ti.height - (PADDING * 4);						if (_useHTMLText)			{				_ta.styleSheet = _style;				_ta.isHTML = true;			}			else			{				_ta.styleSheet = null;				_ta.isHTML = false;			}						filters = (_hasShadow) ? [createShadow(2)] : [];		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @return the Singleton instance of Console.		 */		public static function get instance():Console		{			if (!_instance) _instance = new Console();			return _instance;		}				/**		 * Gets / Sets whether the console uses HTML text or simple text.		 */		public function get useHTMLText():Boolean		{			return _useHTMLText;		}				public function set useHTMLText(v:Boolean):void		{			_useHTMLText = v;			invalidate();		}				/**		 * Toggles visibility of the console. If the console is made invisible		 * it's visible property is not only set to false but the console is also		 * moved off-screen.		 */		override public function set visible(v:Boolean):void		{			_allowInput = v;			super.visible = v;			if (v)			{				y = 0;				_ti.focus();			}			else			{				y = 0 - height;			}		}				public function get loggingEnabled():Boolean		{			return _loggingEnabled;		}				public function set loggingEnabled(v:Boolean):void		{			_loggingEnabled = v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onTextInputChange(e:Event):void		{			if (_allowInput)			{				if (_doClear)				{					_doClear = false;					clearInput();				}			}		}						/**		 * @private		 */		protected function onKeyDown(e:KeyboardEvent):void		{			if (_allowInput)			{				if (e.keyCode == Keyboard.ENTER)				{					if (_ti.text.length > 0)					{						processInput();						_doClear = true;					}				}			}		}						/**		 * @private		 */		protected function onKeyUp(e:KeyboardEvent):void		{		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates the UI for the console.		 * @private		 */		override protected function addChildren():void		{			createStyleSheet();						_bg = new RectangleShape();						_ti = new TextInput();			_ti.hasShadow = false;			_ti.addEventListener(Event.CHANGE, onTextInputChange);						_rule = new HRule();			_rule.hasShadow = false;						_ta = new TextArea();			_ta.editable = false;			_ta.hasShadow = false;						addChild(_bg);			addChild(_ta);			addChild(_rule);			addChild(_ti);		}						/**		 * createStyleSheet		 * @private		 */		protected function createStyleSheet():void		{			_style = new StyleSheet();			with (_style)			{				setStyle("body", {fontFamily: _font, fontSize: _fontSize, color: "#EEEEEE"});				setStyle("l0", {fontFamily: _font, fontSize: _fontSize, color: "#A0A0FF"});				setStyle("l1", {fontFamily: _font, fontSize: _fontSize, color: "#EEEEEE"});				setStyle("l2", {fontFamily: _font, fontSize: _fontSize, color: "#FFD400"});				setStyle("l3", {fontFamily: _font, fontSize: _fontSize, color: "#FF7F00"});				setStyle("l4", {fontFamily: _font, fontSize: _fontSize, color: "#FF0000"});			}		}						/**		 * Internal add method.		 * @private		 */		protected function add(message:String, level:int = 1):void		{			message = "> " + message;						if (_useHTMLText)			{				_ta.text += "<l" + level + ">" + convertTags(message) + "</l" + level + ">";			}			else			{				_ta.text += message + "\n";			}						_ta.updateScrolling();		}						/**		 * Converts all occurances of HTML special characters and braces.		 * @private		 * 		 * @param s String to convert Tags in.		 * @param stripCRs true if CR's should be stripped from String.		 */		protected function convertTags(s:String, stripCRs:Boolean = false):String		{			if (stripCRs) s = s.replace(/\\r/g, "");			return s.replace(/&amp;/gi, "&amp;amp;")				.replace(/&quot;/gi, "&amp;quot;")				.replace(/&lt;/gi, "&amp;lt;")				.replace(/&gt;/gi, "&amp;gt;")				.replace(/</gi, "&lt;")				.replace(/>/gi, "&gt;");		}						/**		 * Clears the TextInput.		 * @private		 */		protected function clearInput():void		{			_ti.text = "";		}						/**		 * Processes the input entered in the TextInput.		 * @private		 */		protected function processInput():void		{			// TODO Script parsing to be implemented!						switch (_ti.text)			{				case "clear":					clear();					break;				case "disable":					_loggingEnabled = false;					add("Console logging disabled.");					break;				case "enable":					_loggingEnabled = true;					add("Console logging enabled.");					break;				case "hide":					clearInput();					toggle();					break;				default:					add("Unknown command: " + _ti.text);			}		}	}}