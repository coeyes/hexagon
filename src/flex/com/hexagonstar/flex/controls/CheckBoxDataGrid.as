/* * hexcomps * Copyright (C) 2007 Hexagon Star Softworks * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.flex.controls{	import mx.controls.CheckBox;	import mx.controls.DataGrid;	import mx.controls.listClasses.IListItemRenderer;		import flash.display.Sprite;	import flash.events.KeyboardEvent;			/**	 * CheckBoxDataGrid Class	 * @author Sascha Balkau	 */	public class CheckBoxDataGrid extends DataGrid	{		////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new CheckBoxDataGrid instance.		 */		public function CheckBoxDataGrid()		{			super();		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				override protected function selectItem(item:IListItemRenderer,													shiftKey:Boolean,													ctrlKey:Boolean,													transition:Boolean = true):Boolean		{			/* Only run selection code if a checkbox was hit			 * and always pretend we're using ctrl selection */			if (item is CheckBox)				return super.selectItem(item, false, true, transition);			return false;		}						/**		 * Turn off selection indicator.		 */		override protected function drawSelectionIndicator(indicator:Sprite,															x:Number,															y:Number,															width:Number,															height:Number,															color:uint,															itemRenderer:IListItemRenderer):void	    {		}						/**		 * Whenever we draw the renderer, make sure we re-eval the checked state.		 */		override protected function drawItem(item:IListItemRenderer,												selected:Boolean = false,												highlighted:Boolean = false,												caret:Boolean = false,												transition:Boolean = false):void		{			CheckBox(item).invalidateProperties();			super.drawItem(item, selected, highlighted, caret, transition);		}						/**		 * Fake all keyboard interaction as if it had the ctrl key down.		 */		override protected function keyDownHandler(event:KeyboardEvent):void		{			/* This is technically illegal, but works */			event.ctrlKey = true;			event.shiftKey = false;			super.keyDownHandler(event);		}	}}