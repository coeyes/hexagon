/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.flex.controls{	import com.hexagonstar.env.console.CLICommand;	import com.hexagonstar.env.console.Console;	import com.hexagonstar.env.console.ICLICommandInvoker;		import mx.core.UIComponent;			/**	 * A Flex Wrapper for Console. Use this class in Flex projects to get the	 * Debug Console.	 */	public class FlexConsole extends UIComponent	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				private static var _instance:FlexConsole;		protected var _console:Console;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new FlexConsole instance.		 */		public function FlexConsole()		{			super();						if (_instance)			{				throw new Error("Tried to instantiate FlexConsole through"					+ " it's constructor. Use FlexConsole.instance instead!");			}						_console = Console.instance;		}						/**		 * Adds a new trace message to the console output area.		 * 		 * @param message the message to output.		 * @param level the output level (0-4).		 */		public function trace(message:String, level:int = 1):void		{			_console.trace(message, level);		}						/**		 * Clears the console.		 */		public function clear():void		{			_console.clear();		}						/**		 * Clears the Text Input Line of the Console.		 */		public function clearInput():void		{			_console.clearInput();		}						/**		 * Toggles the console visibility.		 */		public function toggle():void		{			_console.toggle();		}						/**		 * Toggles the console height.		 */		public function toggleSize():void		{			_console.toggleSize();		}				/**		 * Sets the font face and font size that the console should use.		 * 		 * @param fontFace The font face for the console text.		 * @param fontSize The font size for the console text.		 */		public function setFont(fontFace:String, fontSize:int):void		{			_console.setFont(fontFace, fontSize);		}						/**		 * addCLICommand		 */		public function addCLICommand(command:CLICommand):void		{			_console.addCLICommand(command);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns the Singleton instance of FlexConsole.		 */		public static function get instance():FlexConsole		{			if (!_instance) _instance = new FlexConsole();			return _instance;		}						/**		 * Gets / Sets whether the console uses HTML text or simple text.		 */		public function get useHTMLText():Boolean		{			return _console.useHTMLText;		}				public function set useHTMLText(v:Boolean):void		{			useHTMLText = v;		}						/**		 * Toggles visibility of the console. If the console is made invisible		 * it's visible property is not only set to false but the console is also		 * moved off-screen.		 */		override public function set visible(v:Boolean):void		{			_console.visible = v;			super.visible = v;		}						/**		 * Determines if the console is completely disabled or not. If this		 * is set to false, console input and logging is disabled and the		 * console cannot be made visible.		 */		public function get consoleEnabled():Boolean		{			return _console.consoleEnabled;		}				public function set consoleEnabled(v:Boolean):void		{			_console.consoleEnabled = v;			super.enabled = v;		}						/**		 * Gets/sets the alpha transparency of the console's background.		 */		public function get transparency():Number		{			return _console.transparency;		}				public function set transparency(v:Number):void		{			_console.transparency = v;		}						/**		 * Gets/sets the command handler class used for the Console's CLI.		 */		public function get cliCommandInvoker():ICLICommandInvoker		{			return _console.cliCommandInvoker;		}				public function set cliCommandInvoker(v:ICLICommandInvoker):void		{			_console.cliCommandInvoker = v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * createChildren		 * @private		 */		override protected function createChildren():void		{			super.createChildren();			addChild(_console);		}	}}