/* * hexcomps * Copyright (C) 2007 Hexagon Star Softworks * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.flex.controls{	import mx.containers.HBox;	import mx.controls.TextInput;	import mx.events.FlexEvent;		import flash.events.Event;	import flash.events.MouseEvent;				[Event(name="click", type="flash.events.MouseEvent")]	[Event(name="change", type="flash.events.Event")]			/**	 * FilePathInput Class	 * @author Sascha Balkau	 */	public class FilePathInput extends HBox	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				[Embed(source="../assets/icon_filePathInput.png")]		protected static const BROWSE_ICON:Class;				protected var _textInput:TextInput;		protected var _browseButton:FlexButton;		protected var _path:String = "";						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new FilePathInput instance.		 */		public function FilePathInput()		{			addEventListener(FlexEvent.CREATION_COMPLETE, onCreationComplete);		}						/**		 * dispose		 */		public function dispose():void		{			_textInput.removeEventListener(Event.CHANGE, onChange);			_browseButton.removeEventListener(MouseEvent.CLICK, onClick);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				[Inspectable(type="String", category="Common")]		public function set path(v:String):void		{			_path = v;			if (_textInput) updateFilepathInput();		}				public function get path():String		{			return _path;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Updates the TextInput right after creation complete in case the		 * path was set right after instantiation.		 */		protected function onCreationComplete(e:FlexEvent):void		{			removeEventListener(FlexEvent.CREATION_COMPLETE, onCreationComplete);			updateFilepathInput();		}				/**		 * Called when the filepathInput text changes.		 */		protected function onChange(e:Event):void		{			_path = _textInput.text;			dispatchEvent(e);		}				/**		 * Called when the Browse Button is clicked.		 */		protected function onClick(e:MouseEvent):void		{			dispatchEvent(e);		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Updates the filePathInput Textbox.		 */		protected function updateFilepathInput():void		{			_textInput.text = _path;			_textInput.toolTip = _path;		}						/**		 * createChildren		 * @private		 */		override protected function createChildren():void		{			super.createChildren();						setStyle("horizontalGap", 4);						_textInput = new TextInput();			_textInput.percentWidth = 100;			_textInput.maxChars = 1024;			_textInput.addEventListener(Event.CHANGE, onChange);			addChild(_textInput);						_browseButton = new FlexButton();			_browseButton.width = 22;			_browseButton.setStyle("icon", BROWSE_ICON);			_browseButton.addEventListener(MouseEvent.CLICK, onClick);			addChild(_browseButton);		}	}}