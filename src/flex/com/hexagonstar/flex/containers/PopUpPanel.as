/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Copyright (c) 2007-2008 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.flex.containers{	import com.hexagonstar.flex.controls.FlexButton;		import mx.containers.Panel;	import mx.events.FlexEvent;		import flash.display.DisplayObject;	import flash.events.Event;	import flash.events.MouseEvent;		[Event(name="panelOpen", type="flash.events.Event")]	[Event(name="panelClose", type="flash.events.Event")]			/**	 * PopUpPanel Class	 */	public class PopUpPanel extends Panel	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				public static const OPEN:String	= "panelOpen";		public static const CLOSE:String	= "panelClose";						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected var _closeButton:FlexButton;		protected var _openedHeight:Number;		protected var _isClosed:Boolean = true;		protected var _isClickable:Boolean = false;		protected var _showCloseButton:Boolean = false;		protected var _preventBarClick:Boolean = false;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new PopUpPanel instance.		 */		public function PopUpPanel()		{			super();			addEventListener(FlexEvent.CREATION_COMPLETE, onCreationComplete);		}						/**		 * addChild		 */		override public function addChild(child:DisplayObject):DisplayObject		{			var d:DisplayObject = super.addChild(child);			d["enabled"] = d["visible"] = !_isClosed;			return d;		}				/**		 * toggle		 */		public function toggle():void		{			if (_isClosed)			{				height = _openedHeight;				if (_closeButton) _closeButton.selected = true;				styleName = "popUpPanelOpened";				_isClosed = false;				toggleChildren();				dispatchEvent(new Event(OPEN));			}			else			{				super.height = titleBar.height;				if (_closeButton) _closeButton.selected = false;				styleName = "popUpPanelClosed";				_isClosed = true;				toggleChildren();				dispatchEvent(new Event(CLOSE));			}		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				override public function set height(v:Number):void		{			_openedHeight = v;			super.height = v;		}						[Bindable]		public function set showCloseButton(v:Boolean):void		{			_showCloseButton = v;		}				public function get showCloseButton():Boolean		{			return _showCloseButton;		}						[Bindable]		public function set clickable(v:Boolean):void		{			_isClickable = v;		}				public function get clickable():Boolean		{			return _isClickable;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		protected function onCreationComplete(e:FlexEvent):void		{			removeEventListener(FlexEvent.CREATION_COMPLETE, onCreationComplete);			positionChildren();			addListeners();			super.height = titleBar.height;		}						/**		 * @private		 */		protected function onTitleBarClick(e:MouseEvent = null):void		{			if (!_preventBarClick)			{				toggle();			}			else			{				_preventBarClick = false;			}		}						/**		 * @private		 */		protected function onCloseButtonClick(e:MouseEvent):void		{			if (_isClickable) _preventBarClick = true;			onTitleBarClick();		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * createChildren		 * @private		 */		override protected function createChildren():void		{			super.createChildren();						if (_showCloseButton)			{				_closeButton = new FlexButton();				_closeButton.width = 16;				_closeButton.height = 16;				_closeButton.styleName = "popUpPanelButton";				_closeButton.toggle = true;				titleBar.addChild(_closeButton);			}		}				/**		 * Disables or enables all children that are in the panel.		 * @private		 */		protected function toggleChildren():void		{			for (var i:int = 0; i < numChildren; i++)			{				var d:DisplayObject = getChildAt(i);				d["enabled"] = d["visible"] = !_isClosed;			}		}						/**		 * positionChildren		 * @private		 */		protected function positionChildren():void		{			if (_showCloseButton)			{				_closeButton.y = 6;				_closeButton.x = unscaledWidth - _closeButton.width - 8;			}		}						/**		 * addListeners		 * @private		 */		protected function addListeners():void		{			if (_isClickable)			{				titleBar.addEventListener(MouseEvent.CLICK, onTitleBarClick);			}						if (_showCloseButton)			{				_closeButton.addEventListener(MouseEvent.CLICK, onCloseButtonClick);			}		}						/**		 * removeListeners		 * @private		 */		protected function removeListeners():void		{			if (titleBar.hasEventListener(MouseEvent.CLICK))				titleBar.removeEventListener(MouseEvent.CLICK, onTitleBarClick);			if (_closeButton && _closeButton.hasEventListener(MouseEvent.CLICK))				_closeButton.removeEventListener(MouseEvent.CLICK, onTitleBarClick);		}	}}