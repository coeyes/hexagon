/* * hexcomps * Copyright (C) 2007 Hexagon Star Softworks * * ``The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the * License for the specific language governing rights and limitations * under the License. */package com.hexagonstar.flex.containers{	import com.hexagonstar.flex.util.Constant;
	import com.hexagonstar.flex.util.CursorUtils;
	
	import mx.containers.TitleWindow;
	import mx.controls.Button;
	import mx.core.Application;
	import mx.events.FlexEvent;
	
	import flash.display.DisplayObject;
	import flash.events.MouseEvent;
	import flash.geom.Point;		
	[Event(name="closeWindow", type="mx.events.FlexEvent")]	[Event(name="minWindow", type="mx.events.FlexEvent")]	[Event(name="maxWindow", type="mx.events.FlexEvent")]			/**	 * A resizeable Window that can be resized on all borders.	 */	public class ResizeWindow extends TitleWindow	{		////////////////////////////////////////////////////////////////////////////////////////		// Constants                                                                          //		////////////////////////////////////////////////////////////////////////////////////////				public static const CLOSE:String		= "closeWindow";		public static const MINIMIZE:String	= "minWindow";		public static const MAXIMIZE:String	= "maxWindow";						////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				protected static var _resizeObj:ResizeWindow;		protected static var _mouseState:Number = 0;		protected static var _mouseMargin:Number = 4;				protected var oWidth:Number = 0;		protected var oHeight:Number = 0;		protected var oX:Number = 0;		protected var oY:Number = 0;		protected var oPoint:Point = new Point();				protected var _showWindowButtons:Boolean = false;		protected var _windowMinSize:Number = 60;				protected var _appParent:DisplayObject;		protected var _minimizeButton:Button;		protected var _maximizeButton:Button;		protected var _closeButton:Button;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Constructor.		 * Add mouse envent to this window and application.		 * initialize the old positions.		 */		public function ResizeWindow()		{			super();						initPosition(this);						addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);			addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);			addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);			addEventListener(FlexEvent.CREATION_COMPLETE, onAddButton);						_appParent = Application.application["parent"];			_appParent.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);			_appParent.addEventListener(MouseEvent.MOUSE_MOVE, onResize);		}						/**		 * dispose		 */		public function dispose():void		{			removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);			removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);			removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);			removeEventListener(FlexEvent.CREATION_COMPLETE, onAddButton);			_appParent.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);			_appParent.removeEventListener(MouseEvent.MOUSE_MOVE, onResize);						if (_minimizeButton)				_minimizeButton.removeEventListener(MouseEvent.CLICK, onMinimizeButton);			if (_maximizeButton)				_maximizeButton.removeEventListener(MouseEvent.CLICK, onMaximizeButton);			if (_closeButton)				_closeButton.removeEventListener(MouseEvent.CLICK, onCloseButton);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				public function get showWindowButtons():Boolean		{			return _showWindowButtons;		}				public function set showWindowButtons(v:Boolean):void		{			_showWindowButtons = v;			if (titleBar) onAddButton();		}				public function get minimumSize():int		{			return _windowMinSize;		}				public function set minimumSize(v:int):void		{			if (v > 0) _windowMinSize = v;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Set the first global point that mouse down on the window.		 */		protected function onMouseDown(e:MouseEvent):void		{			if (_mouseState != Constant.SIDE_OTHER)			{				_resizeObj = e.currentTarget as ResizeWindow;				initPosition(_resizeObj);				oPoint.x = _resizeObj.mouseX;				oPoint.y = _resizeObj.mouseY;				oPoint = this.localToGlobal(oPoint);			}		}						/**		 * Clear the _resizeObj and also set the latest position.		 */		protected function onMouseUp(e:MouseEvent):void		{			if (_resizeObj) initPosition(_resizeObj);			_resizeObj = null;		}						/**		 * Show the mouse arrow when not draging.		 * Call oResize(event) to resize window when mouse is inside the window area.		 */		protected function onMouseMove(e:MouseEvent):void		{			if (!_resizeObj)			{				var xPosition:Number = _appParent.mouseX;				var yPosition:Number = _appParent.mouseY;								if (xPosition >= (x + width - _mouseMargin) && yPosition >= (y + height - _mouseMargin))				{					CursorUtils.changeCursor(Constant.LEFT_OBLIQUE_SIZE, -6, -6);					_mouseState = Constant.SIDE_RIGHT | Constant.SIDE_BOTTOM;				}				else if (xPosition <= (x + _mouseMargin) && yPosition <= (y + _mouseMargin))				{					CursorUtils.changeCursor(Constant.LEFT_OBLIQUE_SIZE, -6, -6);					_mouseState = Constant.SIDE_LEFT | Constant.SIDE_TOP;				}				else if (xPosition <= (x + _mouseMargin) && yPosition >= (y + height - _mouseMargin))				{					CursorUtils.changeCursor(Constant.RIGHT_OBLIQUE_SIZE, -6, -6);					_mouseState = Constant.SIDE_LEFT | Constant.SIDE_BOTTOM;				}				else if (xPosition >= (x + width - _mouseMargin) && yPosition <= (y + _mouseMargin))				{					CursorUtils.changeCursor(Constant.RIGHT_OBLIQUE_SIZE, -6, -6);					_mouseState = Constant.SIDE_RIGHT | Constant.SIDE_TOP;				}				else if (xPosition >= (x + width - _mouseMargin))				{					CursorUtils.changeCursor(Constant.HORIZONTAL_SIZE, -9, -9);					_mouseState = Constant.SIDE_RIGHT;					}				else if (xPosition <= (x + _mouseMargin))				{					CursorUtils.changeCursor(Constant.HORIZONTAL_SIZE, -9, -9);					_mouseState = Constant.SIDE_LEFT;				}				else if (yPosition >= (y + height - _mouseMargin))				{					CursorUtils.changeCursor(Constant.VERTICAL_SIZE, -9, -9);					_mouseState = Constant.SIDE_BOTTOM;				}				else if (yPosition <= (y + _mouseMargin))				{					CursorUtils.changeCursor(Constant.VERTICAL_SIZE, -9, -9);					_mouseState = Constant.SIDE_TOP;				}				else				{					_mouseState = Constant.SIDE_OTHER;					CursorUtils.changeCursor(null, 0, 0);				}			}			//Use SystemManager to listen the mouse resize event, so we needn't handle the event at the current object.			//onResize(event);		}						/**		 * Hide the arrow when not dragging and moving out the window.		 */		protected function onMouseOut(e:MouseEvent):void		{			if (!_resizeObj)			{				CursorUtils.changeCursor(null, 0, 0);			}		}						/**		 * Resize when the draging window, _resizeObj is not null.		 */		protected function onResize(e:MouseEvent):void		{			if (_resizeObj)			{				_resizeObj.stopDragging();								var xPlus:Number = _appParent.mouseX - _resizeObj.oPoint.x;				var yPlus:Number = _appParent.mouseY - _resizeObj.oPoint.y;								switch (_mouseState)				{					case Constant.SIDE_RIGHT | Constant.SIDE_BOTTOM:						_resizeObj.width = _resizeObj.oWidth + xPlus > _windowMinSize ? _resizeObj.oWidth + xPlus : _windowMinSize;						_resizeObj.height = _resizeObj.oHeight + yPlus > _windowMinSize ? _resizeObj.oHeight + yPlus : _windowMinSize;						break;					case Constant.SIDE_LEFT | Constant.SIDE_TOP:						_resizeObj.x = xPlus < _resizeObj.oWidth - _windowMinSize ? _resizeObj.oX + xPlus : _resizeObj.x;						_resizeObj.y = yPlus < _resizeObj.oHeight - _windowMinSize ? _resizeObj.oY + yPlus : _resizeObj.y;						_resizeObj.width = _resizeObj.oWidth - xPlus > _windowMinSize ? _resizeObj.oWidth - xPlus : _windowMinSize;						_resizeObj.height = _resizeObj.oHeight - yPlus > _windowMinSize ? _resizeObj.oHeight - yPlus : _windowMinSize;						break;					case Constant.SIDE_LEFT | Constant.SIDE_BOTTOM:						_resizeObj.x = xPlus < _resizeObj.oWidth - _windowMinSize ? _resizeObj.oX + xPlus : _resizeObj.x;						_resizeObj.width = _resizeObj.oWidth - xPlus > _windowMinSize ? _resizeObj.oWidth - xPlus : _windowMinSize;						_resizeObj.height = _resizeObj.oHeight + yPlus > _windowMinSize ? _resizeObj.oHeight + yPlus : _windowMinSize;						break;					case Constant.SIDE_RIGHT | Constant.SIDE_TOP:						_resizeObj.y = yPlus < _resizeObj.oHeight - _windowMinSize ? _resizeObj.oY + yPlus : _resizeObj.y;						_resizeObj.width = _resizeObj.oWidth + xPlus > _windowMinSize ? _resizeObj.oWidth + xPlus : _windowMinSize;						_resizeObj.height = _resizeObj.oHeight - yPlus > _windowMinSize ? _resizeObj.oHeight - yPlus : _windowMinSize;						break;					case Constant.SIDE_RIGHT:						_resizeObj.width = _resizeObj.oWidth + xPlus > _windowMinSize ? _resizeObj.oWidth + xPlus : _windowMinSize;						break;					case Constant.SIDE_LEFT:						_resizeObj.x = xPlus < _resizeObj.oWidth - _windowMinSize ? _resizeObj.oX + xPlus : _resizeObj.x;						_resizeObj.width = _resizeObj.oWidth - xPlus > _windowMinSize ? _resizeObj.oWidth - xPlus : _windowMinSize;						break;					case Constant.SIDE_BOTTOM:						_resizeObj.height = _resizeObj.oHeight + yPlus > _windowMinSize ? _resizeObj.oHeight + yPlus : _windowMinSize;						break;					case Constant.SIDE_TOP:						_resizeObj.y = yPlus < _resizeObj.oHeight - _windowMinSize ? _resizeObj.oY + yPlus : _resizeObj.y;						_resizeObj.height = _resizeObj.oHeight - yPlus > _windowMinSize ? _resizeObj.oHeight - yPlus : _windowMinSize;						break;				}			}		}						/**		 * Add the window buttons and layout them.		 */		protected function onAddButton(e:FlexEvent = null):void		{			if (_showWindowButtons)			{				if (!_minimizeButton)				{					_minimizeButton = new Button();					_minimizeButton.width = 10;					_minimizeButton.height = 10;					_minimizeButton.focusEnabled = false;					_minimizeButton.setStyle("upSkin", Constant.WINDOW_MIN_BUTTON_1);					_minimizeButton.setStyle("overSkin", Constant.WINDOW_MIN_BUTTON_2);					_minimizeButton.setStyle("downSkin", Constant.WINDOW_MIN_BUTTON_2);					_minimizeButton.addEventListener(MouseEvent.CLICK, onMinimizeButton);					titleBar.addChild(_minimizeButton);				}								if (!_maximizeButton)				{					_maximizeButton = new Button();					_maximizeButton.width = 10;					_maximizeButton.height = 10;					_maximizeButton.focusEnabled = false;					_maximizeButton.setStyle("upSkin", Constant.WINDOW_MAX_BUTTON_1);					_maximizeButton.setStyle("overSkin", Constant.WINDOW_MAX_BUTTON_2);					_maximizeButton.setStyle("downSkin", Constant.WINDOW_MAX_BUTTON_2);					_maximizeButton.addEventListener(MouseEvent.CLICK, onMaximizeButton);					titleBar.addChild(_maximizeButton);				}								if (!_closeButton)				{					_closeButton = new Button();					_closeButton.width = 10;					_closeButton.height = 10;					_closeButton.focusEnabled = false;					_closeButton.setStyle("upSkin", Constant.WINDOW_CLOSE_BUTTON_1);					_closeButton.setStyle("overSkin", Constant.WINDOW_CLOSE_BUTTON_2);					_closeButton.setStyle("downSkin", Constant.WINDOW_CLOSE_BUTTON_2);					_closeButton.addEventListener(MouseEvent.CLICK, onCloseButton);					titleBar.addChild(_closeButton);				}								layoutWindowButtons();			}			else			{				if (_minimizeButton)					titleBar.removeChild(_minimizeButton);					_minimizeButton = null;								if (_maximizeButton)					titleBar.removeChild(_maximizeButton);					_maximizeButton = null;								if (_closeButton)					titleBar.removeChild(_closeButton);					_closeButton = null;			}		}						protected function onMinimizeButton(e:MouseEvent):void		{			dispatchEvent(new FlexEvent(MINIMIZE));		}						protected function onMaximizeButton(e:MouseEvent):void		{			dispatchEvent(new FlexEvent(MAXIMIZE));		}						protected function onCloseButton(e:MouseEvent):void		{			dispatchEvent(new FlexEvent(CLOSE));		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				protected static function initPosition(obj:ResizeWindow):void		{			obj.oHeight = obj.height;			obj.oWidth = obj.width;			obj.oX = obj.x;			obj.oY = obj.y;		}						protected function layoutWindowButtons():void		{			if (_minimizeButton)			{				_minimizeButton.move(titleBar.width - 10 * 3 - 6 - 6 - 6, (titleBar.height - 10) / 2);			}						if (_maximizeButton)			{				_maximizeButton.move(titleBar.width - 10 * 2 - 6 - 6, (titleBar.height - 10) / 2);			}						if (_closeButton)			{				_closeButton.move(titleBar.width - 10 - 6, (titleBar.height - 10) / 2);			}		}						override protected function layoutChrome(unscaledWidth:Number, unscaledHeight:Number):void		{			super.layoutChrome(unscaledWidth, unscaledHeight);			layoutWindowButtons();		}	}}